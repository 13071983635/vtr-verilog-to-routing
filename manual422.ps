%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 5.1
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%-
%- Frame ps_prolog 5.0, for use with Frame 5.0 products
%- This ps_prolog file is Copyright (c) 1986-1996 Adobe Systems, Incoporated.
%- All rights reserved.  This ps_prolog file may be freely copied and 
%- distributed in conjunction with documents created using FrameMaker, 
%- FrameMaker/SGML FrameReader and FrameViewer as long as this 
%- copyright notice is preserved.
%-
%- FrameMaker users specify the proper paper size for each print job in the
%- "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
%- printer that the PS file is sent to does not support the requested paper
%- size, or if there is no paper tray of the proper size currently installed, 
%- then the job will not be printed.  The following flag, if set to true, will
%- cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            false def
%-
%- Frame products normally print colors as their true color on a color printer
%- or as shades of gray, based on luminance, on a black-and white printer. The
%- following flag, if set to true, forces all non-white colors to print as pure
%- black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%-
%- Frame products can either set their own line screens or use a printer's 
%- default settings. Three flags below control this separately for no 
%- separations, spot separations and process separations. If a flag
%- is true, then the default printer settings will not be changed. If it is
%- false, Frame products will use their own settings from a table based on
%- the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%-
%- For any given PostScript printer resolution, Frame products have two sets of 
%- screen angles and frequencies for printing process separations, which are 
%- recomended by Adobe. The following variable chooses the higher frequencies
%- when set to true or the lower frequencies when set to false. This is only
%- effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%-
%- The following is a set of predefined optimal frequencies and angles for various
%- common dpi settings. This is taken from "Advances in Color Separation Using
%- PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
%- and corrolated with information which is in various PPD (4.0) files.
%-
%- The "dpiranges" figure is the minimum dots per inch device resolution which
%- can support this setting. The "low" and "high" values are controlled by the
%- setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
%- the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
%- three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%-
%- PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
%- to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
%- (too badly) against the screen frequencies of any separations for that DPI.
% This is computed by taking dpi/9 as the ideal pixels per repetition, and then
% computing a tiling size in printer pixels for each of the four separations as 
% (dpi/screenFreq)*(cos(screenAngle)+sin(screenAngle)) Actually, this is the same 
% for Cyan and Magenta). Then, we take a "nice" LCM of the tile sizes close to
% the desired pattern tile where the beat factor is not more than 2 or 3.
%
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def

/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def

/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%-
%- PostScript Level 2 printers contain an "Accurate Screens" feature which can
%- improve process separation rendering at the expense of compute time. This 
%- flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%-
%- The following PostScript procedure defines the spot function that Frame
%- products will use for process separations. You may un-comment-out one of
%- the alternative functions below, or use your own.
%-
%- Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%-
%- Line function
%- /FMSpotFunction { pop } def
%-
%- Elipse function
%- /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%-		sqrt 1 exch sub } def
%-
%-

/FMversion (5.0) def % matches PS_VERSION in fmprintdriver

% PostScript Level 1 = true, 2 = false
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def

% Set up Color vs. Black-and-White
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
%		statusdict /processcolors known {
%			statusdict /processcolors get exec
%		} {1} ifelse
%		1 gt
		true
	} ifelse
def

/FrameDict 400 dict def % should check this value each time changes made

%
% For NeWS we add a fake errordict, so we can psh files
%
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if

%- The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put % save old rangecheck
errordict /rangecheck {FrameDict /bug true put} put % will flag bug found
FrameDict /bug false put % flag bug not found
mark % since we're not sure what will happen next
%- Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark % junk from readline and rangecheck
errordict /rangecheck FrameDict /tmprangecheck get put % restore rangecheck
FrameDict /bug get { % redefine readline if last one got a rangecheck
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop % get a char
			dup 10 eq {exit} if % exit if LF
			dup 13 eq {exit} if % exit if CR
			gstring exch gindex exch put % store it away
			/gindex gindex 1 add def % bump index
		} loop
		pop % eol character
		gstring 0 gindex getinterval true % simulate real readline
		} bind def
	} if

% outer-world defs

/FMshowpage /showpage load def
/FMquit /quit load def

/FMFAILURE { % enter with two error strings on the stack
	dup = flush % send a copy of the message to the console
	FMshowpage % msg on a page by itself, so it can't be, say, black on black
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage % we might be in the middle of some EPS, where "showpage"
	FMquit % and "quit" are redefined
	} def % only used once at most, so no bind

/FMVERSION {
	FMversion ne {
		(Adobe Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def % only used at startup, so no bind

/FMBADEPSF { % Call with bad operator name on stack (as a string)
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length % parmstr errstr errstr indx
	5 -1 roll % errstr errstr index parmstr
	putinterval % errstr
	FMFAILURE
	} def

% standard concatprocs routine
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def

% Put all local variables here in alphabetical order.
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall

% Start of PDF/Acrobat support

% Bind def
/FmBD {bind def} bind def

systemdict /pdfmark known {
	/fMAcrobat true def

	% FmPD is a conditional PDFMark
	/FmPD /pdfmark load def
	
	% FmPT is a show text operator which only show up when distiller is active
	/FmPT /show load def
	
	% FmPD2 and FmPA are Acrobat 2.0-specific
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		% FmPD2 is like FmPD but for Acrobat 2.0-specific PDF
		/FmPD2 /pdfmark load def
		
		% x y/name FmPA
		% 	is equivalent to
		% [/Dest/name/View[/FitH x y FmDC exch pop]/DEST FmPD
		% It is a shortcut for pagragraph Uinique ID designators whic occurr commonly.
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		% These are No-Ops for Distiller 1.0
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	% these are the No-Ops for regular PostScript
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse

% This convert a set of X Y coordinates from the current user space to the default
% PostScript coordinates needed by some pdfmark variants. We also convert to 
% integer because the distiller doesn't always like floats!
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD

% This converts four numbers into a bounding box making sure the first two are maller than the last two
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD

% End of PDF/Acrobat support

%
% Color separation code
%

% Constants.

/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def

/fMNegative false def % we are inverting the page

% Variables.

/FrameSepIs FMnone def % separation we are printing
% If FrameSepIs is FMcustom, this is the custom color
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def

/FrameCurColors [ 0 0 0 1 0 0 0 ] def % c m y k r g b

% Utility routines

/FrameColorEpsilon .001 def	% epsilon by which values can differ and sill be equal
/eqepsilon {		% v1 v2 eqeps bool
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def

% are the cmyk and cmykrgb arrays on the stack the same color?
/FrameCmpColorsCMYK { % [ c1 m1 y1 k1 ] [ c2 m2 y2 k2 r2 g2 b2] -> bool
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
% are the rgb and cmykrgb arrays on the stack the same color?
/FrameCmpColorsRGB { % [ r1 g1 b1 ] [ c2 m2 y2 k2 r2 g2 b2] -> bool
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def

% convert r g b to c m y k
/RGBtoCMYK { % r g b
	1 exch sub % r g y
	3 1 roll % y r g
	1 exch sub % y r m
	3 1 roll % m y r
	1 exch sub % m y c
	3 1 roll % c m y
	3 copy % c m y c m y
	2 copy % c m y c m y m y
	le { pop } { exch pop } ifelse % c m y c min(m,y)
	2 copy % c m y c min(m,y) c min(m,y)
	le { pop } { exch pop } ifelse % c m y min(c, min(m,y))
	dup dup dup % c m y k k k k
	6 1 roll % c k m y k k k
	4 1 roll % c k m k y k k
	7 1 roll % k c k m k y k
	sub % k c k m k y
	6 1 roll % y k c k m k
	sub % y k c k m
	5 1 roll % m y k c k
	sub % m y k c
	4 1 roll % c m y k 
} bind def
/CMYKtoRGB { % c m y k CMYKtoRGB r g b
	dup dup 4 -1 roll add 						  % c m k k y+k
	5 1 roll 3 -1 roll add 						  % y+k c k m+k
	4 1 roll add 								  % m+k y+k c+k
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  % r m+k y+k
	1 exch sub dup 0 lt {pop 0} if exch 	      % r b m+k
	1 exch sub dup 0 lt {pop 0} if exch	  		  % r g b
} bind def

% Public routines


% Happens at the top of each page that is a separation
/FrameSepInit {
	1.0 RealSetgray
} bind def
% Tell the separation code that this separation is for a custom color
/FrameSetSepColor { % c m y k r g b
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
% Tell the separation code that this separation is Cyan
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
% Tell the separation code that this separation is Magenta
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
% Tell the separation code that this separation is Yellow
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
% Tell the separation code that this separation is Black
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
% Tell the separation code we are not doing a separation
/FrameNoSep { %
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def

% Initialize the separation code with all the custom colors we are
% separating (not process colors)
/FrameSetSepColors { % list of arrays of [c m y k r g b] count 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  % array of arrays of colors we are separating
	exch def end
	} bind def

% is this color array in the array of custom color separations?
/FrameColorInSepListCMYK { % [ c m y k ] -> bool
	FrameSepColors {  % color elem-of-array
       		exch dup 3 -1 roll % color color elem
       		FrameCmpColorsCMYK % color bool
       		{ pop true exit } if
    	} forall % exits with either [color] or true
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { % [ r g b ] -> bool
	FrameSepColors {  % color elem-of-array
       		exch dup 3 -1 roll % color color elem
       		FrameCmpColorsRGB % color bool
       		{ pop true exit } if
    	} forall % exits with either [color] or true
	dup true ne {pop false} if
	} bind def

% Level 1 color operators saved and redefined
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 

% Setgray patch
/setgray { % num
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ % go to white unless the current sep color is black
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { % r g b
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] % r g b [ r g b ]
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor % safe since we will overwrite the color state
		currentrgbcolor  % r g b - Let PostsCript to the conversion.
		setrgbcolor % call our version
	} 
	ifelse
	end
} bind def
FrameDict begin

/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { % c m y k
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put

% Set up a prototype pattern for PostScript Level 2
fMLevel1 { 
	% set up screen functions for the patterns in PS level 1
	% each entry contains an angle, spot function, flipped spot function,
	% gray level and frequency multiplier.
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { % prototype level 2 pattern dictionary
	% define some PostScript procedures for known jaggy patterns.
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		% Always 1 for PS Level 2
		/PaintType 2 def		% Uncolored pattern
		/TilingType 3 def		% constant spacing and faster tiling
		/BBox [ 0 0 8 8 ] def 	% bounding box
		/XStep 8 def			% X offset
		/YStep 8 def			% Y offset
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse

%combineColor puts together the current gray value (which could also be
%a fraction of on bits for a fill pattern and the current color and calls
%the appropriate function
%
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			% Level 2 pattern
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { % separation case
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			% Level 2 pattern
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				% Level 1 patterns are either all there or not there at all
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def

/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
% freq and sangle are used for ps Level 1 pattern building.
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def

%
% screen index depending on dpi
%	- screenIndex smallint
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def

%
% These routines get the standard Adobe frequencies, angles, and spot functions
% depending on the DPI
%
% - getCyanScreen freq angle spotfunction
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def

%
% - getMagentaScreen freq angle spotFunction
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def

%
% - getYellowScreen freq angle spotFunction
% note that some of these use a "tripple dot" function at 1/3 the frequency
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def

%
% - getBlackScreen freq angle spotFunction
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def

%
% - getSpotScreen freq angle spotFunction
/getSpotScreen {
	getBlackScreen
} bind def

%
% - getCompositeScreen freq angle spotFunction
/getCompositeScreen {
	getBlackScreen
} bind def

% FmSetScreen sets the screen for either PostScript Level 1 or Level 2 and optionally
% sets the accuratescreens flag in the latter case
% freq angle spotfunction FMSetScreen -
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def

% This sets the default screen as was set at the beginning of the job
% - setDefaultScreen -
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def

% This sets the current screen depending on FrameSepIs
% - setCurrentScreen -
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def


end

% End of Color separation code
%
	
/FMDOCUMENT { % xscale yscale edown negative paperwidth paperheight manfeed numcopies numfonts
	array /FMfonts exch def % Why isn't this in FrameDict???
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def % invert page
	0 ne /edown exch def % flip page along y axis
	/yscale exch def
	/xscale exch def

	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def % some PS's leave junk on dict ...
		/FMoptop count def % ...or on operand stack...
		setpapername % This stuff may alter the transfer/screen/angle
		manualfeed {true} {papersize} ifelse % true->more work to do
		{manualpapersize} {false} ifelse % true->more work to do
		{desperatepapersize} {false} ifelse % true->failed completely
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for %...if tray not installed
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
		 {setpagedevice} stopped {papersizefailure} if
		}
	ifelse % fMLevel1
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def

			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse

	end % FrameDict
} def % only used at startup, so no bind

/FMBEGINPAGE { % pagewidth pageheight landscape color-arrays count
	FrameDict begin % for the whole page...
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { % check for landscape
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
% paint the whole page in "white".  If the page is inverted, then
% this will actually paint our black background
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave % for CLIP
} def % only used infrequently, so no bind

/FMENDPAGE {
	grestore % for CLIP
	pagesave restore
	end % FrameDict
	showpage
	} def % only used infrequently, so no bind

/FMFONTDEFINE { % fontindex nonstd_encoding fontname -- 
	FrameDict begin
	findfont % fontindex nonstd_encoding font
	ReEncode % fontindex font'
	1 index exch % fontindex fontindex font'
	definefont % fontindex font"
	FMfonts 3 1 roll %  FMfonts fontindex font"
	put
	end % FrameDict
	} def % only used infrequently, so no bind

/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end % framedict
	} def % Only called once, so no bind

/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end % FrameDict
	} def % only used infrequently, so no bind

% Set things to a known, quiescent state, for when we switch to another writer
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray % Not FMsetgray; only called outside of our environment!
	} bind def

/FMBEGINEPSF { % <theta> llx lly urx ury fw fh fx fy
	end % FrameDict
	/FMEPSF save def % in userdict
	/showpage {} def % this def is in userdict
%- See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
%- "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def % FMBADEPSF knows this is the longest!
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
%	/initmatrix {(initmatrix) FMBADEPSF} def	% Aldus Freehand 4.0 epsf uses this harmlessly <Gus 4/26/95>
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS % in case we're in a strange state
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall % neat trick
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale % then scale
	llx neg lly neg translate % then compensate for LL offset 
	/FMdicttop countdictstack 1 add def % high-water mark of dict stack
	/FMoptop count def % tricky! "/FMoptop" on stack
	} bind def

/FMENDEPSF {
	count -1 FMoptop {pop pop} for % clear EPS junk from operand stack
	countdictstack -1 FMdicttop {pop end} for % ditto for dict stack
	FMEPSF restore
	FrameDict begin % for the whole page...
	} bind def

FrameDict begin % put most defs here

/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def

/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def

/pagedimen { % name width height
	paperheight sub abs 16 lt exch % 16pt is an arbitrary slop amount
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def

/setpapername { % Already set up: paperwidth paperheight and manualfeed
	/papersizedict 14 dict def % one for /papername, one for /unknown
	papersizedict begin
	/papername /unknown def % in case no match
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def

/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end % return true if more work to do
	} bind def

/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped % return true if more work to do
	} bind def

/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped % return true iff failed
		end
		} {true} ifelse % return true iff failed
	} bind def

/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def

%
% Font re-encoding to include diacritics
% 
/DiacriticEncoding [

/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron

] def

/ReEncode { % nonstd_encoding font -- reencodedfont
	dup % nonstd_encoding font font
	length % nonstd_encoding font dictlength
	dict begin % nonstd_encoding font % currentdict = newdict
	{% forall % forall is over font to be copied
	1 index /FID ne % skip FID
		{def} % defs go into newfontdict which is currentdict
		{pop pop} ifelse % copy all keys including /Encoding
	} forall % nonstd_encoding
	0 eq {/Encoding DiacriticEncoding def} if % --
	currentdict % push a copy of the copied font dict onto operand stack
	end % font' % before popping it off dictionary stack
	} bind def

FMPColor 
	% setup procs for color printing
	{

	/BEGINBITMAPCOLOR { % iw, ih, width, height, theta, x y 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { % iw, ih, width, height, theta, x y 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	% setup procs for B&W printing
	{
	/BEGINBITMAPCOLOR { % iw, ih, width, height, theta, x y 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { % iw, ih, width, height, theta, x y 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse

/K { % c m y k r g b SEPARATION
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
%
% graymode is true if we are just doing gray fills, this way do not keep calling
% setscreen. I don't know what the cost is on calling setscreen with defaults, but
% this is easy to keep track of, and we know for sure we aren't wasting cycles.
% if graymode is false and fMLevel1 is false, then we are using Level 2 patterns.
%
/graymode true def

% used by level 1 patterns
% defaultflip matrixentry fmGetFlit -> eith -1 or 1
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if

/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop % angle spot fspot gray mult
			freq 								% freq
			mul									% times multiplier
			5 2 roll							% angle spot fspot gray mult freq -> gray freq angle spot fspot
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		% landscape
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								% portrait     
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		% take regular or flipped spot function
			fMNegative { 
				{neg} fmConcatProcs 			% invert spot function
			} if
			bind
			% we need to bypass any screen filter and go directly to systemdict
			% to avoid problems with Kodak Precision calibration software
			% <Gus 9/13/93>
			systemdict /setscreen get exec		% leave graylevel on stack
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { % Level 2 version
		pop pop
		dup patCache exch known {
			patCache exch get
		} { % not in cache
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
%			9 orgfreq 
%				organgle sin abs organgle cos abs add div
%				dup 16 div round dup 0 le {pop 1} if  % Unix pattern size
%			    dup  9 div round dup 0 le {pop 1} if  % Mac larger (WYSIWYG) size
%					div div dup matrix scale % This gives Unix pattern size.
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def

/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def

/normalize {
	transform round exch round exch itransform
	} bind def

/dnormalize {
	dtransform round exch round exch idtransform
	} bind def

/lnormalize { % line widths are always odd so that arrow heads work
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def

/H { % THICK
	lnormalize setlinewidth
	} bind def

/Z {
	setlinecap
	} bind def
	
% This is used to fill or stroke white behind a Level 2 pattern
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def

/X { % TEXTURE
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} % Silly to pass parameters here
	{setGrayScaleMode}
	ifelse
	} bind def

/V { % FILL
	PFill gsave eofill grestore
	} bind def

/Vclip {
	clip
	} bind def

/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/N { % PEN
	PStroke
	} bind def

/Nclip {
	strokepath clip newpath
	} bind def

/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def

/L { % POLYLINE
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def

/Y { % POLYGON !!!
	L % POLYLINE
	closepath
	} bind def

/R { % RECT x1 y1 x2 y2
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y % POLYGON
	} bind def

/rarc % Leaves all sorts of junk on the operand stack for caller to clear off
	{rad % arcto might fail if we're scaled way down
	 arcto
	} bind def

/RR { % ROUNDRECT x1 y1 x2 y2 r
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if % in case rarc failed for degenerate arcs
	cleartomark
	} bind def

/RRR { % ROUNDRECT ROTATED xs ys x1 y1 x2 y2 x3 y3 x4 y4 r
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto % eats xs ys
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def

/C { % CLIP
	grestore
	gsave
	R % RECT
	clip
	setCurrentScreen
} bind def

/CP { % CLIPPOLY p1x p1y p2x p2y ... n 
	grestore
	gsave
	Y % POLYGON
	clip
	setCurrentScreen
} bind def

/F { % FONT
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def

/Q { % POINTSIZE (& font)
	/FMpointsize exch def
	F % could be slightly optimized here
	} bind def

/T { % TEXT <string> <x> <y>
	moveto show
	} bind def

% Callers of RF (rotate/flip) must gsave (or save) first; (g)restore when done
/RF { % <flip> <theta>
	rotate
	0 ne {-1 1 scale} if
	} bind def

/TF { % TEXTFLIPROTATE <string> <flip> <theta> <x> <y>
	gsave
	moveto 
	RF
	show
	grestore
	} bind def

/P { % PADTEXT <pad> <string> <x> <y>
	moveto
	0 32 3 2 roll widthshow
	} bind def

/PF { % PADTEXTFLIPROTATE <pad> <string> <flip> <theta> <x> <y>
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def

/S { % SPREADTEXT <spread> <string> <x> <y>
	moveto
	0 exch ashow
	} bind def

/SF { % SPREADTEXTFLIPROTATE <spread> <string> <flip> <theta> <x> <y>
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def

/B { % PADSPREADTEXT <pad> <spread> <string> <x> <y>
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def

/BF { % PADSPREADTEXTFLIPROTATE <pad> <spread> <string> <flip> <theta> <x> <y>
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def

/G { % ARCFILL theta1 theta2 width height x y
	gsave
	newpath
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	PFill fill
	grestore
	} bind def

/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch % theta1 theta2 width height x y
    normalize 2 index 2 div sub exch 3 index 2 div add exch % theta1 theta2 width height x y
    translate
    scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def

/Gclip { % ARCFILL theta1 theta2 width height x y swid
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	clip newpath
	restorematrix
	} bind def

/GG { % ARCFILL ROTATED theta1 theta2 width height angle x y
	gsave
	newpath
	normalize translate 0.0 0.0 moveto % eats x y
	rotate % eats angle
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath
	PFill
	fill
	grestore
	} bind def

/GGclip { % ARCFILL ROTATED theta1 theta2 width height angle x y
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath
	clip newpath
	restorematrix
	} bind def

/GGstrk { % ARCFILL ROTATED swid theta1 theta2 width height angle x y
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def

/A { % ARCPEN theta1 theta2 width height x y
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch % theta1 theta2 width height x y
	normalize 2 index 2 div sub exch 3 index 2 div add exch % theta1 theta2 width height x y
	translate 
	scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	restorematrix
	PStroke
	grestore
	} bind def

/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto % eats x y
	dnormalize scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	closepath 
	strokepath clip newpath
	restorematrix
} bind def

/Astrk {
	Gstrk
} bind def

/AA { % ARCPEN ROTATED theta1 theta2 width height angle x y
	gsave
	savematrix
	newpath
	% theta1 theta2 width height angle x y
	3 index 2 div add exch 4 index 2 div sub exch 
	% theta1 theta2 width height angle x y
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate % eats x y
	rotate % eats angle
	scale % eats width height
	0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
	restorematrix
	PStroke
	grestore
	} bind def

/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto % eats x y
    rotate % eats angle
    dnormalize scale % eats width height
    0.0 0.0 1.0 5 3 roll arc % eats theta1 theta2
    closepath
	strokepath clip newpath
	restorematrix
} bind def

/AAstrk {
	GGstrk
} bind def

/BEGINPRINTCODE { % -x -y width height
	/FMdicttop countdictstack 1 add def % high-water mark of dict stack
	/FMoptop count 7 sub def % tricky! 7 params on stack, plus "/FMoptop"
	/FMsaveobject save def
	userdict begin % insulate user from FrameDict; not in /FMdicttop count
	/showpage {} def % this def is in userdict
	FMNORMALIZEGRAPHICS % in case we're in a strange state
	3 index neg 3 index neg translate
	} bind def

/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for % clear user junk from operand stack
	countdictstack -1 FMdicttop {pop end} for % ditto for dict stack
	FMsaveobject restore % this is now safe, unless user very malicious
	} bind def

/gn { % get a number in a funny encoding scheme
	0 % result on stack
	{	46 mul % shift old digits
		cf read pop % get next character
		32 sub % zero is the space character
		dup 46 lt {exit} if % quit if we're the last digit
		46 sub add % add in this digit and loop around for next
		} loop
	add % result on stack
	} bind def

/cfs { % create a string of length "sl" filled with "val"s
	/str sl string def % create string as "str"
	0 1 sl 1 sub {str exch val put} for % fill array
	str def % define real array name, too; name is on stack from caller
	} bind def

/ic [ % "case" stmt list of procedures that the image commands should call
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def

/ms { % make all the strings
	/sl exch def % remember length of currently existing strings
	/val 255 def % that's white
	/ws cfs % make "ws" a string filled with white
	/im cfs % and "im" is a complete image scanline
	/val 0 def % that's black
	/bs cfs % make "bs" a string filled with black
	/cs cfs % here's where we'll put complete command lines
	} bind def

400 ms % make strings that will be plenty long for most applications

/ip { % image procedure; reads and executes commands to make scanlines
	is % leave image string and...
	0 % ...image position on stack all through this procedure
	cf cs readline pop % get a string of commands
	{	ic exch get exec % execute next command
		add % all commands leave a length on the stack; update pos
		} forall % step through all commands
	pop % get rid of image position pointer
	% image string left on stack, so it's returned to image primitive
	} bind def
/rip { % this is similar to ip above, except for 24 bit images
	   % this takes an extra argument, the width of the image
	  % do red
	  bis ris copy pop % copy blue to red
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop % remove is and position from stack
	  ris gis copy pop % copy red to green
	  dup is exch % position of green is width bytes into is
	  % do green
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop % copy green to blue
	  dup add is exch % position of blue is 2*width bytes into is
	  % do blue
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def

/rip4 { % this is similar to ip above, except for 32 bit images
	   % this takes an extra argument, the width of the image
	  % do cyan
	  kis cis copy pop % copy black to cyan
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop % remove is and position from stack
	  cis mis copy pop % copy cyan to magenta
	  dup is exch % position of magenta is width bytes into is
	  % do magenta
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop % copy magenta to yellow
	  dup dup add is exch % position of yellow is 2*width bytes into is
	  % do yellow
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop % copy yellow to black
	  3 mul is exch % position of black is 3*width bytes into is
	  % do black
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def


/wh { % fill a number of bytes with "white"
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	ws 0 len getinterval im pos len getinterval copy pop
	pos len % remember where we got to
	} bind def

/bl { % fill a number of bytes with "black"
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	bs 0 len getinterval im pos len getinterval copy pop
	pos len % remember where we got to
	} bind def

/s1 1 string def

/fl { % fill a number of bytes with a specific hex value
	/len exch def % number of bytes to fill
	/pos exch def % position to put them at
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len % remember where we got to
	} bind def

/hx { % read hex bytes directly; on entry, stack has <str> <pos> <len>
	3 copy getinterval % stack has <str> <pos> <len> <substr>
	cf exch readhexstring pop pop % stack back to <str> <pos> <len>
	} bind def

/wbytes { % width depth -> wb      find width in bytes  given 1, 2, 8 or 24 or 32
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { % iw, ih, width, height, theta, x y 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { % iw, ih, width, height, theta, x y 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { % iw, ih, width, height, theta, x y 
	2 {} COMMONBITMAPc
	} bind def
%
% Common routine for imaging compressed images
%
/COMMONBITMAPc { % iw, ih, width, height, theta, x y depth proc
		 % (x,y) is the lower left corner of the image
	/cvtProc exch def
	/depth exch def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def % LW+ has a buggy memory leak!
	cvtProc                % run the desired proc after save has occurred
	/is im 0 lb getinterval def % image substring
	ws 0 lb getinterval is copy pop % whiten it
	/cf currentfile def % evaluate "currentfile" only once
	width height depth [width 0 0 height neg 0 height] % top to bottom
	{ip} image % zap!
	bitmapsave restore % avoid occasional disaster on the LW+
	grestore
	} bind def
/BEGINBITMAPBW { % iw, ih, width, height, theta, x y 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { % iw, ih, width, height, theta, x y 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { % iw, ih, width, height, theta, x y 
	2 {} COMMONBITMAP
	} bind def
%
% Common routine for uncompressed images
%
/COMMONBITMAP { % iw, ih, width, height, theta, x y depth proc
	/cvtProc exch def
	/depth exch def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/bitmapsave save def % LW+ has a buggy memory leak!
	cvtProc              % run the desired proc after save has occurred
	/is width depth wbytes string def
	/cf currentfile def % evaluate "currentfile" only once
	width height depth [width 0 0 height neg 0 height] % top to bottom
	{cf is readhexstring pop} image
	bitmapsave restore % avoid occasional disaster on the LW+
	grestore
	} bind def

%
% All this hairy color setup stuff gus wrote on the mac, I just copied and
% changed the variable names to be humanly readable.

/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def

fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
% The HP PaintJet XL300 ignores the gray transfer curve but still sets its
% default black generation and undercolor removal functions as if it is
% used. This causes black colors not to work. Bug#56844 <Gus 2/22/93>
% - We go back to the old (correct?) way of doing this since this code
% is now bypassed for PS Level 2 printers in favor of colorSetup2 which
% uses PS Level 2 indexed color, which is much cleaner. <Gus 3/3/93>
		/u kk currentundercolorremoval exec def
%-		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
% Here, we set up indexed color for imaging on PS Level 2 without mucking around
% with the transfer functions.

/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse

%
% Setup a transfer function to convert psuedo color values into grayscale
% values based on the color lookup tables.
%
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
%
% image a color image
%
/BITMAPCOLOR { % iw, ih, width, height, theta, x y 
	/depth 8 def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def % evaluate "currentfile" only once
		width height depth [width 0 0 height neg 0 height] % top to bottom
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def % evaluate "currentfile" only once
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
%
% Compressed color image rendering
%
/BITMAPCOLORc { % iw, ih, width, height, theta, x y 
	/depth 8 def
	gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def % image substring
		ws 0 lb getinterval is copy pop % whiten it
		/cf currentfile def % evaluate "currentfile" only once
		width height depth [width 0 0 height neg 0 height] % top to bottom
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def % image substring
		ws 0 lb getinterval is copy pop % whiten it
		/cf currentfile def % evaluate "currentfile" only once
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/ris im 0 width getinterval def	% red part of im
	/gis im width width getinterval def	% green part of im
	/bis im width 2 mul width getinterval def % blue part of im
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/cis im 0 width getinterval def	% cyan part of im
	/mis im width width getinterval def	% magenta part of im
	/yis im width 2 mul width getinterval def % yellow part of im
	/kis im width 3 mul width getinterval def % black part of im
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
%
% image a color image to a b&width device
%
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/ris im 0 width getinterval def	% red part of im
	/gis im width width getinterval def	% green part of im
	/bis im width 2 mul width getinterval def % blue part of im
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	% rotate about center of image
	3 index 2 div add exch	% iw ih width height theta y+(height/2) x
	4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
	translate		% iw ih width height theta
	rotate			% iw ih width height
	1 index 2 div neg	% iw ih width height -(width/2)
	1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
	translate		% iw ih width height
	scale			% iw ih
	/height exch def /width exch def
	/lb width depth wbytes def % so "lb" has width in bytes
	sl lb lt {lb ms} if % maybe make bigger strings
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	% Whole scanline
	/cis im 0 width getinterval def	% cyan part of im
	/mis im width width getinterval def	% magenta part of im
	/yis im width 2 mul width getinterval def % yellow part of im
	/kis im width 3 mul width getinterval def % black part of im
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { % c m y k width
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { % r g b width
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		% rotate about center of image
		3 index 2 div add exch	% iw ih width height theta y+(height/2) x
		4 index 2 div add exch	% iw ih width height theta x+(width/2) y+(height/2)
		translate		% iw ih width height theta
		rotate			% iw ih width height
		1 index 2 div neg	% iw ih width height -(width/2)
		1 index 2 div neg	% iw ih width height -(width/2) -(height/2)
		translate		% iw ih width height
		scale			% iw ih
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { % iw, ih, width, height, theta, x y 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { % iw, ih, width, height, theta, x y 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end % of FrameDict definitions

% OPI stuff
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def

% Dashed lines stuff
/I { setdash } bind def
/J { [] 0 setdash } bind def

%%EndProlog
%%BeginSetup
(5.0) FMVERSION
1 1 0 0 612 792 0 1 17 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /Times-Bold FMFONTDEFINE
2 0 /Courier FMFONTDEFINE
3 0 /Times-Italic FMFONTDEFINE
4 0 /Courier-Oblique FMFONTDEFINE
5 1 /Symbol FMFONTDEFINE
6 0 /Times-BoldItalic FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 54 540 54 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(VPR and VP) 72 42.62 T
(ack User\325) 113.22 42.62 T
(s Manual \050V) 143.65 42.62 T
(ersion 4.22\051) 182.75 42.62 T
(February 17, 1999) 276.56 42.62 T
(1) 536 42.62 T
0 18 Q
(VPR and VP) 138.41 708 T
(ack User\325) 231.15 708 T
(s Manual \050V) 299.62 708 T
(ersion 4.22\051) 387.6 708 T
1 12 Q
(V) 201.23 675 T
(aughn Betz \050v) 208.79 675 T
(aughn@eecg) 279.34 675 T
(.tor) 344.32 675 T
(onto.edu\051) 362.43 675 T
(F) 259.32 659 T
(ebruary 17, 1999) 266.35 659 T
1 15 Q
(1  Ov) 72 626 T
(er) 106.02 626 T
(view) 119.19 626 T
0 11 Q
0.23 (VPR \050V) 93.6 603.67 P
0.23 (ersatile Place and Route\051 is an FPGA placement and routing tool. VPR has four required and) 128.36 603.67 P
(man) 72 586.67 T
(y optional parameters; it is in) 90.78 586.67 T
(v) 218.97 586.67 T
(ok) 224.25 586.67 T
(ed by typing:) 235.14 586.67 T
2 9 Q
(vpr) 72 571 T
(netlist.net architecture.arch placement.p routing.r [-options]) 93.6 571 T
0 11 Q
1.96 (Netlist.net is the netlist describing the circuit to be placed and/or routed, while architecture.arch) 93.6 558.67 P
-0.12 (describes the architecture of the FPGA in which the circuit is to be realized. If VPR is placing a circuit, the) 72 541.67 P
-0.06 (\336nal placement will be written to placement.p; if VPR is routing a pre) 72 524.67 P
-0.06 (viously placed circuit, the placement) 378.64 524.67 P
0.79 (is read from placement.p. The \336nal routing of a circuit is written to \336le routing.r) 72 507.67 P
0.79 (. The format of each of) 434.66 507.67 P
(these \336les is described in Section 6.) 72 490.67 T
-0.2 (VPR can be run in one of tw) 93.6 473.67 P
-0.2 (o basic modes.  In its def) 217.68 473.67 P
-0.2 (ault mode, VPR places a circuit on an FPGA and) 326.07 473.67 P
-0.21 (then repeatedly attempts to route it in order to \336nd the minimum number of tracks required by the speci\336ed) 72 456.67 P
0.02 (FPGA architecture to route this circuit. If a routing is unsuccessful, VPR increases the number of tracks in) 72 439.67 P
0.04 (each routing channel and tries ag) 72 422.67 P
0.04 (ain; if a routing is successful, VPR decreases the number of tracks before) 217.24 422.67 P
0.75 (trying to route it ag) 72 405.67 P
0.75 (ain. Once the minimum number of tracks required to route the circuit is found, VPR) 159.87 405.67 P
-0.23 (e) 72 388.67 P
-0.23 (xits.  The other mode of VPR is in) 76.72 388.67 P
-0.23 (v) 225.65 388.67 P
-0.23 (ok) 230.93 388.67 P
-0.23 (ed when a user speci\336es a speci\336c channel width for routing.  In this) 241.82 388.67 P
0.29 (case, VPR places a circuit and attempts to route it only once, with the speci\336ed channel width.  If the cir-) 72 371.67 P
(cuit will not route at the speci\336ed channel width, VPR simply report that it is unroutable.) 72 354.67 T
(VPR can perform either global routing or combined global and detailed routing.) 93.6 337.67 T
0.32 (VP) 93.6 320.67 P
0.32 (ack is a packing program which can be used with or without VPR.  It tak) 107.49 320.67 P
0.32 (es a technology-mapped) 432.43 320.67 P
-0 (netlist \050in blif format\051 consisting of lookup tables \050LUTs\051 and \337ip \337ops \050FFs\051 and packs the LUTs and FFs) 72 303.67 P
0.37 (together to form more coarse-grained logic blocks.  The netlist it outputs is in the .net format required by) 72 286.67 P
(VPR, and hence can be fed directly into VPR.  Its usage is:) 72 269.67 T
2 9 Q
(vpack input.blif output.net [-options]) 72 254 T
0 11 Q
-0.03 (T) 93.6 235.67 P
-0.03 (yping either VPR or VP) 99.44 235.67 P
-0.03 (ack with no parameters will print out a list of all the a) 204.87 235.67 P
-0.03 (v) 440.13 235.67 P
-0.03 (ailable command line) 445.35 235.67 P
(parameters.) 72 218.67 T
1 15 Q
(2  Compiling VPR and VP) 72 184 T
(ack) 240.62 184 T
0 11 Q
0.43 (If your compiler of choice is gcc and you are running a Solaris-based Sparcstation, you can compile) 93.6 161.67 P
0.07 (VPR simply by typing) 72 144.67 P
3 F
0.07 (mak) 173.73 144.67 P
0.07 (e) 191.95 144.67 P
0 F
0.07 ( in the directory containing VPR\325) 196.83 144.67 P
0.07 (s source code and mak) 343.52 144.67 P
0.07 (e\336le. If your compiler) 443.26 144.67 P
-0.15 (and/or architecture are dif) 72 127.67 P
-0.15 (ferent, ho) 185.2 127.67 P
-0.15 (we) 226.92 127.67 P
-0.15 (v) 239.47 127.67 P
-0.15 (er) 244.81 127.67 P
-0.15 (, you will ha) 252.92 127.67 P
-0.15 (v) 307.24 127.67 P
-0.15 (e to mak) 312.58 127.67 P
-0.15 (e some small modi\336cations to the mak) 350.05 127.67 P
-0.15 (e\336le.) 518.31 127.67 P
-0.15 (First, change the CC = gcc line in the mak) 72 110.67 P
-0.15 (e\336le so that CC is set to the name of your desired compiler) 256.41 110.67 P
-0.15 (.  Sec-) 512.5 110.67 P
0.34 (ond, you may w) 72 93.67 P
0.34 (ant to change the line OPT_FLA) 143.79 93.67 P
0.34 (GS = -O3 to set OPT_FLA) 288.94 93.67 P
0.34 (GS to the v) 409.14 93.67 P
0.34 (alue that gi) 459.69 93.67 P
0.34 (v) 508.97 93.67 P
0.34 (es the) 514.31 93.67 P
1.73 (highest le) 72 76.67 P
1.73 (v) 115.92 76.67 P
1.73 (el of optimization with your compiler) 121.26 76.67 P
1.73 (, and it may be necessary to gi) 294.75 76.67 P
1.73 (v) 439.76 76.67 P
1.73 (e the link) 445.09 76.67 P
1.73 (er dif) 489.38 76.67 P
1.73 (ferent) 514.35 76.67 P
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 54 540 54 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(VPR and VP) 72 42.62 T
(ack User\325) 113.22 42.62 T
(s Manual \050V) 143.65 42.62 T
(ersion 4.22\051) 182.75 42.62 T
(February 17, 1999) 276.56 42.62 T
(2) 536 42.62 T
0 11 Q
0.38 (options so it \336nds all the rele) 72 712.67 P
0.38 (v) 201.12 712.67 P
0.38 (ant libraries on your machine.  If, during compilation, you get an error that) 206.34 712.67 P
0.75 (type XPointer is not de\336ned, uncomment the \322typedef char *XPointer\323 line in graphics.c \050man) 72 695.67 P
0.75 (y X W) 497.39 695.67 P
0.75 (in-) 527.78 695.67 P
0.72 (do) 72 678.67 P
0.72 (ws implementations do not de\336ne the XPointer type\051.  Finally) 82.72 678.67 P
0.72 (, if you are compiling VPR on a system) 360.41 678.67 P
0.79 (without X W) 72 661.67 P
0.79 (indo) 130.59 661.67 P
0.79 (ws \050e.g. W) 149.87 661.67 P
0.79 (indo) 198.66 661.67 P
0.79 (ws NT\051, you should add a \322#de\336ne NO_GRAPHICS\323 line to the top of) 217.95 661.67 P
0.01 (vpr_types.h.  VPR\325) 72 644.67 P
0.01 (s b) 156.35 644.67 P
0.01 (uilt-in graphics will all be remo) 168.67 644.67 P
0.01 (v) 307.56 644.67 P
0.01 (ed by this de\336ne, allo) 312.89 644.67 P
0.01 (wing compilation on non-X11) 407.06 644.67 P
(machines.) 72 627.67 T
0.1 (If you are using VP) 93.6 610.67 P
0.1 (ack to con) 180.01 610.67 P
0.1 (v) 224.99 610.67 P
0.1 (ert SIS output to VPR\325) 230.32 610.67 P
0.1 (s netlist format, you should mak) 330.37 610.67 P
0.1 (e similar modi-) 472.57 610.67 P
(\336cations to VP) 72 593.67 T
(ack\325) 137.23 593.67 T
(s mak) 155.56 593.67 T
(e\336le.) 181.42 593.67 T
1 15 Q
(3  T) 72 559 T
(ypical CAD Flo) 95.89 559 T
(w) 194.91 559 T
0 11 Q
-0 (Figure 1 illustrates the CAD \337o) 93.6 536.67 P
-0 (w we typically use. First, the SIS [1] synthesis package is used to per-) 232.35 536.67 P
0.48 (form technology-independent logic optimization of each circuit. Ne) 72 519.67 P
0.48 (xt, each circuit is technology-mapped) 372.79 519.67 P
0.46 (into 4-LUTs and \337ip \337ops by Flo) 72 502.67 P
0.46 (wMap [2]. The output of Flo) 220.54 502.67 P
0.46 (wMap is a .blif format netlist of LUTs and) 349.05 502.67 P
0.36 (\337ip \337ops.  Our VP) 72 485.67 P
0.36 (ack program [3, 4, 5] then packs this netlist of 4-LUTs and \337ip \337ops into more coarse-) 154.24 485.67 P
0.26 (grained logic blocks, and outputs a netlist in the .net format VPR uses.  VPR [3, 4, 6, 7, 8] can then place) 72 468.67 P
-0.2 (the circuit and either globally route it or perform combined global and detailed routing on it.  The output of) 72 451.67 P
72 63 540 720 C
0 0 0 1 0 0 0 K
90 63 522 432.38 C
0 0 0 1 0 0 0 K
171.17 141.41 404.5 226.41 R
6 X
0 0 0 1 0 0 0 K
V
0.5 H
2 Z
0 X
N
184.17 149.24 396.67 177.57 R
7 X
V
0 X
N
184.5 191.41 397 208.07 R
7 X
V
0 X
N
203.48 370.71 378.29 400.87 R
0 Z
N
180.61 299.31 395.36 313.89 R
N
284.89 365.4 287.04 365.4 284.89 357.91 282.74 365.4 4 Y
N
284.89 365.4 287.04 365.4 284.89 357.91 282.74 365.4 4 Y
V
284.89 370.23 284.89 365.65 2 L
7 X
V
2 Z
0 X
N
284.94 289.81 287.08 289.81 284.94 282.31 282.79 289.81 4 Y
0 Z
N
284.94 289.81 287.08 289.81 284.94 282.31 282.79 289.81 4 Y
V
284.94 298.33 284.94 290.06 2 L
2 Z
N
0 10 Q
(Circuit) 270.36 417.71 T
285.41 408.44 287.56 408.44 285.41 400.94 283.26 408.44 4 Y
0 Z
N
285.41 408.44 287.56 408.44 285.41 400.94 283.26 408.44 4 Y
V
285.41 414.26 285.41 408.69 2 L
2 Z
N
(Logic Optimization \050SIS\051) 238.93 389.74 T
(T) 212 375.94 T
(echnology Map to LUTs \050Flo) 217.41 375.94 T
(wMap\051) 334.93 375.94 T
1 F
(VP) 185.53 304.04 T
(ack:) 198.76 304.04 T
0 F
(  P) 217.09 304.04 T
(ack FFs and LUTs into Logic Blocks) 227.5 304.04 T
(Place Circuit or Read in an Existing Placement) 196.13 196.34 T
171.93 306.08 171.93 308.23 179.42 306.08 171.93 303.93 4 Y
0 Z
N
171.93 306.08 171.93 308.23 179.42 306.08 171.93 303.93 4 Y
V
171.68 306.08 165.6 306.08 2 L
2 Z
N
(Logic) 135.7 317.74 T
(P) 125.4 295.64 T
(arameters) 130.81 295.64 T
90 450 86.67 14.17 284.5 343.07 A
(.blif F) 219.5 343.91 T
(ormat Netlist of LUTs and) 243.8 343.91 T
(Flip Flops) 266.17 333.07 T
286.17 321.47 288.32 321.47 286.17 313.98 284.02 321.47 4 Y
0 Z
N
286.17 321.47 288.32 321.47 286.17 313.98 284.02 321.47 4 Y
V
286.17 328.91 286.17 321.72 2 L
2 Z
N
(Block) 135.33 306.41 T
90 450 76.67 14.17 286.67 266.74 A
(.net F) 231.17 268.91 T
(ormat Netlist of Logic) 253.8 268.91 T
(Blocks) 271.17 256.41 T
285.33 234.81 287.48 234.81 285.33 227.31 283.18 234.81 4 Y
0 Z
N
285.33 234.81 287.48 234.81 285.33 227.31 283.18 234.81 4 Y
V
285.33 253.07 285.33 235.06 2 L
2 Z
N
1 F
(VPR:) 275.33 213.91 T
286.17 184.81 288.32 184.81 286.17 177.31 284.02 184.81 4 Y
0 Z
N
286.17 184.81 288.32 184.81 286.17 177.31 284.02 184.81 4 Y
V
286.17 191.41 286.17 185.06 2 L
2 Z
N
0 F
(Perform Either Global or Combined Global /) 199.5 165.57 T
(Detailed Routing) 254.5 153.07 T
90 450 47.08 20.42 143.25 260.99 A
(FPGA) 127.75 271.41 T
(Architecture) 114.78 260.57 T
(Description File) 111.49 248.91 T
179.58 230.34 180.58 232.24 186.2 226.83 178.57 228.44 4 Y
0 Z
N
179.58 230.34 180.58 232.24 186.2 226.83 178.57 228.44 4 Y
V
158.67 241.41 179.35 230.45 2 L
2 Z
N
[7.372 6.389] 0 I
517 199.74 M
 517 214.93 494.61 227.24 467 227.24 D
 439.39 227.24 417 214.93 417 199.74 D
 417 184.55 439.39 172.24 467 172.24 D
 494.61 172.24 517 184.55 517 199.74 D
O
N
(Existing Placement) 429.5 208.07 T
(or Placement from) 429.5 197.24 T
(Another CAD T) 429.5 185.57 T
(ool) 493.69 185.57 T
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
J
405.4 200.57 405.4 198.42 397.91 200.57 405.4 202.72 4 Y
0 Z
N
405.4 200.57 405.4 198.42 397.91 200.57 405.4 202.72 4 Y
V
J
416.17 200.57 405.65 200.57 2 L
J
416.17 200.57 412.42 200.57 2 L
2 Z
N
[3.479 3.015] 3.479 I
412.42 200.57 409.4 200.57 2 L
N
J
409.4 200.57 405.65 200.57 2 L
N
J
90 450 93.75 18.75 288.25 104.32 A
(Placement and Routing Output Files,) 218.67 106.62 T
(Placement and Routing Statistics) 225.33 95.59 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
287.83 131.47 289.98 131.47 287.83 123.98 285.68 131.47 4 Y
0 Z
N
287.83 131.47 289.98 131.47 287.83 123.98 285.68 131.47 4 Y
V
287.83 141.41 287.83 131.72 2 L
2 Z
N
1 11 Q
(Figur) 244.92 68.83 T
(e 1:) 271.01 68.83 T
0 F
(CAD flow.) 290.55 68.83 T
0 0 0 1 0 0 0 K
72 63 540 720 C
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 54 540 54 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(VPR and VP) 72 42.62 T
(ack User\325) 113.22 42.62 T
(s Manual \050V) 143.65 42.62 T
(ersion 4.22\051) 182.75 42.62 T
(February 17, 1999) 276.56 42.62 T
(3) 536 42.62 T
0 11 Q
0.99 (VPR consists of a \336le describing the circuit placement, another \336le describing the circuit\325) 72 712.67 P
0.99 (s routing, and) 477.82 712.67 P
-0.05 (v) 72 695.67 P
-0.05 (arious statistics concerning the minimum number of tracks per channel required to successfully route, the) 77.22 695.67 P
0.14 (total wirelength, etc.  In order to \336nd the minimum number of tracks required for successful routing, VPR) 72 678.67 P
0.17 (actually attempts to route the circuit se) 72 661.67 P
0.17 (v) 243.25 661.67 P
0.17 (eral times with dif) 248.59 661.67 P
0.17 (ferent numbers of tracks allo) 329.19 661.67 P
0.17 (wed per channel in) 456.08 661.67 P
(each attempted routing.) 72 644.67 T
-0.15 (Of course, man) 93.6 627.67 P
-0.15 (y v) 160.63 627.67 P
-0.15 (ariations on this CAD \337o) 173.96 627.67 P
-0.15 (w are possible.  One can use dif) 283.68 627.67 P
-0.15 (ferent logic optimizers and) 422.23 627.67 P
0.32 (technology mappers than SIS and Flo) 72 610.67 P
0.32 (wMap; just put the output netlist from your technology-mapper into) 238.62 610.67 P
0.32 (.blif format and feed it into VP) 72 593.67 P
0.32 (ack.  Alternati) 209.74 593.67 P
0.32 (v) 272.73 593.67 P
0.32 (ely) 278.07 593.67 P
0.32 (, if the logic block you are interested in is not supported) 290.8 593.67 P
0.3 (by VP) 72 576.67 P
0.3 (ack, your CAD \337o) 99.94 576.67 P
0.3 (w can bypass VP) 181.84 576.67 P
0.3 (ack altogether by outputting a netlist of logic blocks in .net for-) 258.04 576.67 P
-0.27 (mat.  VPR can place and route netlists of an) 72 559.67 P
-0.27 (y type of logic block -- you simply ha) 262.5 559.67 P
-0.27 (v) 426.34 559.67 P
-0.27 (e to create the netlist and) 431.67 559.67 P
1.16 (describe the logic block in the FPGA architecture description \336le.  Finally) 72 542.67 P
1.16 (, if you w) 409.76 542.67 P
1.16 (ant only to route a) 455.3 542.67 P
0.52 (placement produced by another CAD tool you can create a placement \336le in VPR format, and ha) 72 525.67 P
0.52 (v) 505.11 525.67 P
0.52 (e VPR) 510.45 525.67 P
(route this pre-e) 72 508.67 T
(xisting placement.) 138.43 508.67 T
1 15 Q
(4  Operation of VP) 72 474 T
(ack) 192.68 474 T
0 11 Q
0.36 (As stated earlier) 93.6 451.67 P
0.36 (, VP) 165.35 451.67 P
0.36 (ack tak) 185.1 451.67 P
0.36 (es as input a technology-mapped netlist of lookup tables \050LUTs\051 and \337ip) 216.81 451.67 P
0.34 (\337ops in .blif format, and outputs a .net format netlist composed of more comple) 72 434.67 P
0.34 (x logic blocks.  The logic) 426.45 434.67 P
-0.08 (block to be tar) 72 417.67 P
-0.08 (geted is selected via command-line options.  The simplest logic block VP) 134.81 417.67 P
-0.08 (ack can tar) 457.05 417.67 P
-0.08 (get con-) 504.34 417.67 P
0.1 (sists of a LUT and a FF) 72 400.67 P
0.1 (, in the con\336guration sho) 175.6 400.67 P
0.1 (wn in Figure 2.  W) 285.41 400.67 P
0.1 (e call this logic block a basic logic ele-) 368.13 400.67 P
(ment.) 72 383.67 T
(T) 93.6 366.67 T
(o ha) 99.44 366.67 T
(v) 117.86 366.67 T
(e VP) 123.19 366.67 T
(ack tar) 144.72 366.67 T
(get a logic block of this form, use the command:) 174.14 366.67 T
2 9 Q
(vpack <) 72 351 T
4 F
(input.blif> <output.net>) 109.8 351 T
2 F
(-lut_size) 244.8 351 T
4 F
(<K>) 298.8 351 T
2 F
( -no_clustering) 315 351 T
0 11 Q
1.14 (In the command abo) 93.6 332.67 P
1.14 (v) 186.99 332.67 P
1.14 (e, the italicized v) 192.33 332.67 P
1.14 (alues in angled brack) 270.64 332.67 P
1.14 (ets, <>, should be replaced by the \336le) 367.13 332.67 P
1.32 (names or numbers you are using, while unitalicized w) 72 315.67 P
1.32 (ords are k) 319.82 315.67 P
1.32 (e) 365.72 315.67 P
1.32 (yw) 370.44 315.67 P
1.32 (ords and must be typed e) 383.77 315.67 P
1.32 (xactly as) 499.88 315.67 P
(sho) 72 298.67 T
(wn.) 87 298.67 T
0.17 (The) 93.6 281.67 P
1 F
0.17 (-lut_size <K>) 113.62 281.67 P
0 F
0.17 ( option speci\336es the number of inputs to a LUT \050i.e. K in Figure 2\051.  If -lut_size is) 176.74 281.67 P
0.25 (not speci\336ed, a def) 72 264.67 P
0.25 (ault LUT size of 4 is assumed by VP) 155.73 264.67 P
0.25 (ack.  The) 319.5 264.67 P
1 F
0.25 (-no_clustering) 363.62 264.67 P
0 F
0.25 ( option indicates that the) 430.84 264.67 P
0.15 (logic block is a single basic logic element with no local routing to route the logic block output back to the) 72 247.67 P
0.57 (logic block inputs.  By def) 72 230.67 P
0.57 (ault, VP) 191.47 230.67 P
0.57 (ack marks all clock nets in the input netlist as global nets which VPR) 227.94 230.67 P
0.48 (should not route.  Since clocks are typically routed via a dedicated netw) 72 213.67 P
0.48 (ork in FPGAs, this is usually the) 393.82 213.67 P
-0.24 (most realistic thing to do.  If, ho) 72 196.67 P
-0.24 (we) 211.5 196.67 P
-0.24 (v) 224.05 196.67 P
-0.24 (er) 229.39 196.67 P
-0.24 (, you w) 237.5 196.67 P
-0.24 (ant clocks to be routed as using normal routing resources, you) 269.6 196.67 P
(should specify) 72 179.67 T
1 F
(-global_clocks off) 138.6 179.67 T
0 F
( on the VP) 220.8 179.67 T
(ack command line.) 267.38 179.67 T
72 63 540 720 C
0 0 0 1 0 0 0 K
90 63 522 146.85 C
0 0 0 1 0 0 0 K
218.28 87.07 261.27 130.07 R
7 X
0 0 0 1 0 0 0 K
V
0.5 H
0 Z
0 X
N
210.92 123.92 210.92 126.05 217.47 123.92 210.92 121.79 4 Y
N
210.92 123.92 210.92 126.05 217.47 123.92 210.92 121.79 4 Y
V
199.85 123.92 210.67 123.92 2 L
2 Z
N
210.92 113.69 210.92 115.81 217.47 113.69 210.92 111.56 4 Y
0 Z
N
210.92 113.69 210.92 115.81 217.47 113.69 210.92 111.56 4 Y
V
199.85 113.69 210.67 113.69 2 L
2 Z
N
210.92 103.45 210.92 105.58 217.47 103.45 210.92 101.32 4 Y
0 Z
N
210.92 103.45 210.92 105.58 217.47 103.45 210.92 101.32 4 Y
V
199.85 103.45 210.67 103.45 2 L
2 Z
N
210.92 93.21 210.92 95.34 217.47 93.21 210.92 91.08 4 Y
0 Z
N
210.92 93.21 210.92 95.34 217.47 93.21 210.92 91.08 4 Y
V
199.85 93.21 210.67 93.21 2 L
2 Z
N
261.42 111.64 322.45 111.64 2 L
N
289.45 111.64 289.45 131.08 381.58 131.08 381.58 117.53 393.87 117.53 5 L
N
323.23 90.46 354.02 120.38 R
0 Z
N
323.23 100.36 329.37 96.26 323.23 92.17 3 L
2 Z
N
316.04 96.26 316.04 98.39 322.59 96.26 316.04 94.13 4 Y
0 Z
N
316.04 96.26 316.04 98.39 322.59 96.26 316.04 94.13 4 Y
V
315.79 96.26 306.34 96.26 2 L
2 Z
N
354.63 106.18 394.04 106.18 2 L
N
394.61 129.49 394.61 94.8 406.55 102.2 406.55 120.96 4 Y
0 Z
N
414.55 110.73 414.55 112.85 421.1 110.73 414.55 108.6 4 Y
N
414.55 110.73 414.55 112.85 421.1 110.73 414.55 108.6 4 Y
V
406.55 110.73 414.3 110.73 2 L
2 Z
N
0 10 Q
(Inputs) 169.92 107.83 T
(K-input) 226.25 113.03 T
(LUT) 231.45 100.03 T
(Clock) 279.12 93.96 T
1 F
(D FF) 328.52 106.1 T
0 F
(Out) 425.58 107.83 T
1 11 Q
(Figur) 241.1 69.59 T
(e 2:) 267.18 69.59 T
0 F
(Basic logic element.) 286.72 69.59 T
0 0 0 1 0 0 0 K
72 63 540 720 C
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "3" 3
%%Page: "4" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 54 540 54 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(VPR and VP) 72 42.62 T
(ack User\325) 113.22 42.62 T
(s Manual \050V) 143.65 42.62 T
(ersion 4.22\051) 182.75 42.62 T
(February 17, 1999) 276.56 42.62 T
(4) 536 42.62 T
0 11 Q
-0.22 (VP) 93.6 490.76 P
-0.22 (ack is capable of tar) 107.49 490.76 P
-0.22 (geting a more comple) 194.38 490.76 P
-0.22 (x form of logic block, which we call a cluster) 289.17 490.76 P
-0.22 (-based logic) 486.76 490.76 P
-0.25 (block [5].  Figure 3 depicts an e) 72 473.76 P
-0.25 (xample.  A cluster) 209.97 473.76 P
-0.25 (-based logic block consists of N basic logic elements \050i.e.) 289.64 473.76 P
0.59 (N LUTs and N FFs\051, along with local interconnect that allo) 72 456.76 P
0.59 (ws the N cluster outputs to be routed back to) 338.24 456.76 P
0.68 (LUT inputs.  Since the number of logic block inputs, I, can be less than the total number of LUT inputs) 72 439.76 P
0.32 (\050KN, where K is the number of inputs per LUT\051, the local interconnect also allo) 72 422.76 P
0.32 (ws each of the I inputs to) 427.5 422.76 P
0.86 (be routed to an) 72 405.76 P
0.86 (y of the KN LUT inputs.  Cluster) 140.1 405.76 P
0.86 (-based logic blocks are v) 291.97 405.76 P
0.86 (ery similar to the logic blocks) 404.61 405.76 P
(used in the Altera 8K and 10K FPGAs, and to those used in the Xilinx 5200 series of FPGAs.) 72 388.76 T
(T) 93.6 371.76 T
(o tar) 99.44 371.76 T
(get such a logic block, use a command line of the form:) 119.1 371.76 T
2 9 Q
(vpack) 72 356.09 T
4 F
(input.blif output.net) 104.4 356.09 T
2 F
(-lut_size) 223.2 356.09 T
4 F
(<K>) 277.2 356.09 T
2 F
(-cluster_size) 298.8 356.09 T
4 F
(<N>) 374.4 356.09 T
2 F
(-inputs_per_cluster) 108 345.09 T
4 F
( <I>) 210.6 345.09 T
2 F
(-clocks_per_cluster) 237.6 345.09 T
4 F
( <C>) 340.2 345.09 T
0 11 Q
0.69 (The meaning of the -inputs_per_cluster and -cluster_size parameters should be clear from Figure 3.) 93.6 326.76 P
1.4 (The -clocks_per_cluster option is used to specify ho) 72 309.76 P
1.4 (w man) 310.96 309.76 P
1.4 (y distinct clocks can be used by each logic) 341.83 309.76 P
(block.) 72 292.76 T
0.26 (T) 93.6 275.76 P
0.26 (able) 99.44 275.76 P
0.26 (1 lists all of VP) 120.52 275.76 P
0.26 (ack\325) 189.86 275.76 P
0.26 (s options.  The \336rst three options are important both when VP) 208.19 275.76 P
0.26 (ack is tar) 482.86 275.76 P
0.26 (get-) 522.9 275.76 P
0.41 (ing a single BLE-based logic block and when it is tar) 72 258.76 P
0.41 (geting a cluster) 309.33 258.76 P
0.41 (-based logic block.  The middle four) 377.14 258.76 P
0.96 (options are rele) 72 241.76 P
0.96 (v) 141.45 241.76 P
0.96 (ant only if VP) 146.68 241.76 P
0.96 (ack is tar) 211.41 241.76 P
0.96 (geting a cluster) 252.83 241.76 P
0.96 (-based logic block.  Finally) 321.73 241.76 P
0.96 (, the last tw) 444.92 241.76 P
0.96 (o options) 498.4 241.76 P
-0.02 (only af) 72 224.76 P
-0.02 (fect the CAD algorithms emplo) 102.56 224.76 P
-0.02 (yed to group BLEs into logic clusters, and are probably not of inter-) 241.1 224.76 P
(est unless you\325) 72 207.76 T
(re in) 136.83 207.76 T
(v) 156.25 207.76 T
(estig) 161.58 207.76 T
(ating CAD algorithms for clustering.) 182.31 207.76 T
1 15 Q
(5  Operation of VPR) 72 173.09 T
0 11 Q
(In) 93.6 150.76 T
(v) 102.32 150.76 T
(ok) 107.6 150.76 T
(e VPR by typing:) 118.49 150.76 T
2 9 Q
(vpr) 72 135.09 T
4 F
(input.net input.arch placement.p output.routing [-options]) 93.6 135.09 T
0 11 Q
-0.15 (This section outlines ho) 93.6 116.76 P
-0.15 (w VPR\325) 197.7 116.76 P
-0.15 (s graphics and options w) 232.69 116.76 P
-0.15 (ork; Section 6 describes the format of each of) 340.77 116.76 P
(the four \336les used by VPR.) 72 99.76 T
72 63 540 720 C
0 0 0 1 0 0 0 K
90 498.09 522 720 C
0 0 0 1 0 0 0 K
237.96 711.32 237.96 694.32 245.61 697.94 245.61 707.14 4 Y
7 X
0 0 0 1 0 0 0 K
V
0.5 H
0 Z
0 X
N
210.67 707.77 210.67 556.97 2 L
1.5 H
N
211.54 707.33 238.4 707.33 2 L
N
292.79 652.73 338.72 699.53 R
0.5 H
N
0 10 Q
(BLE) 305.79 680.16 T
226.05 717.73 226.05 548.73 2 L
1.5 H
N
225.4 699.53 238.4 699.53 2 L
N
237.96 692.54 237.96 675.54 245.61 679.16 245.61 688.36 4 Y
7 X
V
0.5 H
0 X
N
211.54 688.55 238.4 688.55 2 L
1.5 H
N
225.4 680.75 238.4 680.75 2 L
N
237.96 673.76 237.96 656.76 245.61 660.39 245.61 669.58 4 Y
7 X
V
0.5 H
0 X
N
211.54 669.78 238.4 669.78 2 L
1.5 H
N
225.4 661.98 238.4 661.98 2 L
N
237.96 654.99 237.96 637.98 245.61 641.61 245.61 650.81 4 Y
7 X
V
0.5 H
0 X
N
211.54 651 238.4 651 2 L
1.5 H
N
225.4 643.2 238.4 643.2 2 L
N
301.21 653.53 305.3 659.67 309.4 653.53 3 L
0.5 H
2 Z
N
246.85 703 269.39 703 269.39 692.6 292.79 692.6 4 L
0 Z
N
245.99 683.93 263.54 683.93 263.54 680.47 292.79 680.47 4 L
N
245.99 664.87 263.32 664.87 263.32 669.2 292.79 669.2 4 L
N
245.99 646.67 269.39 646.67 269.39 659.67 292.79 659.67 4 L
N
293.65 556.54 339.59 603.33 R
N
(BLE) 306.65 583.09 T
302.08 557.33 306.17 563.47 310.26 557.33 3 L
2 Z
N
(. . .) 0 -270 304.92 622.96 TF
(. . .) 0 -270 243.39 620.36 TF
338.72 676.13 386.39 676.13 2 L
0 Z
N
339.59 579.07 386.39 579.07 2 L
N
386.39 717.73 386.39 578.2 2 L
1.5 H
N
386.39 716.86 226.92 716.86 2 L
N
391.58 660.53 379.45 651.87 2 L
0.5 H
N
(N) 395.05 655.89 T
237.96 617.72 237.96 600.72 245.61 604.34 245.61 613.54 4 Y
7 X
V
0 X
N
211.54 613.73 238.4 613.73 2 L
1.5 H
N
225.4 605.93 238.4 605.93 2 L
N
237.96 598.94 237.96 581.94 245.61 585.57 245.61 594.76 4 Y
7 X
V
0.5 H
0 X
N
211.54 594.96 238.4 594.96 2 L
1.5 H
N
225.4 587.16 238.4 587.16 2 L
N
237.96 580.17 237.96 563.16 245.61 566.79 245.61 575.99 4 Y
7 X
V
0.5 H
0 X
N
211.54 576.18 238.4 576.18 2 L
1.5 H
N
225.4 568.38 238.4 568.38 2 L
N
237.96 561.39 237.96 544.39 245.61 548.01 245.61 557.21 4 Y
7 X
V
0.5 H
0 X
N
211.54 557.4 238.4 557.4 2 L
1.5 H
N
225.4 549.6 238.4 549.6 2 L
N
246.85 609.4 269.39 609.4 269.39 599 292.79 599 4 L
0.5 H
N
245.99 590.33 263.54 590.33 263.54 586.87 292.79 586.87 4 L
N
245.99 571.27 263.32 571.27 263.32 575.6 292.79 575.6 4 L
N
245.99 553.07 269.39 553.07 269.39 566.07 292.79 566.07 4 L
N
(N) 319.65 630.77 T
(BLEs) 313.59 616.89 T
304.92 652.73 304.92 647.53 283.25 647.53 283.25 533.14 197.46 533.14 5 L
N
306.65 555.67 306.65 542.67 283.25 542.67 3 L
N
90 450 0.75 0.75 409.57 630.2 G
410.32 630.2 410.32 633.03 415.22 630.2 410.32 627.37 4 Y
1.5 H
N
410.32 630.2 410.32 633.03 415.22 630.2 410.32 627.37 4 Y
V
386.39 630.2 409.57 630.2 2 L
N
(N) 428.85 629.9 T
(Outputs) 417.58 618.63 T
(Clock) 167.99 530.23 T
213.27 557.62 188.14 557.62 2 L
N
(I) 172.76 561.43 T
(Inputs) 161.49 550.16 T
216.74 633.67 204.61 625.87 2 L
0.5 H
N
(I) 197.67 622.96 T
(#1) 308.39 668.89 T
(#N) 309.25 570.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(Figur) 229.02 515.96 T
(e 3:) 255.1 515.96 T
0 F
( A cluster-based logic block.) 274.65 515.96 T
0 0 0 1 0 0 0 K
72 63 540 720 C
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "4" 4
%%Page: "5" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 54 540 54 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(VPR and VP) 72 42.62 T
(ack User\325) 113.22 42.62 T
(s Manual \050V) 143.65 42.62 T
(ersion 4.22\051) 182.75 42.62 T
(February 17, 1999) 276.56 42.62 T
(5) 536 42.62 T
1 13 Q
(5.1  Graphics) 72 415.33 T
0 11 Q
0.01 (The graphics included in VPR are v) 93.6 394.67 P
0.01 (ery easy to use. Click an) 251.16 394.67 P
0.01 (y mouse b) 358.6 394.67 P
0.01 (utton on the) 403.63 394.67 P
1 F
0.01 (arr) 458.98 394.67 P
0.01 (o) 474.05 394.67 P
0.01 (w) 479.44 394.67 P
0 F
0.01 ( k) 487.38 394.67 P
0.01 (e) 495.53 394.67 P
0.01 (ys to pan) 500.25 394.67 P
-0.25 (the vie) 72 377.67 P
-0.25 (w) 101.11 377.67 P
-0.25 (, or click on the) 108.33 377.67 P
1 F
-0.25 (Zoom-In) 178.56 377.67 P
0 F
-0.25 (,) 220.12 377.67 P
1 F
-0.25 (Zoom-Out) 225.36 377.67 P
0 F
-0.25 ( and) 274.86 377.67 P
1 F
-0.25 (Zoom-Fit) 295.74 377.67 P
0 F
-0.25 (k) 342.84 377.67 P
-0.25 (e) 348.23 377.67 P
-0.25 (ys to zoom the vie) 352.95 377.67 P
-0.25 (w) 432.33 377.67 P
-0.25 (. Click on the) 439.56 377.67 P
1 F
-0.25 (W) 500.58 377.67 P
-0.25 (indo) 511.38 377.67 P
-0.25 (w) 532.06 377.67 P
0 F
0.55 (b) 72 360.67 P
0.55 (utton, then on the diagonally opposite corners of a box, to zoom in on a particular area. Selecting) 77.28 360.67 P
1 F
0.55 (P) 516.39 360.67 P
0.55 (ost-) 522.89 360.67 P
-0.09 (Script) 72 343.67 P
0 F
-0.09 ( creates a PostScript \336le \050in pic1.ps, pic2.ps, etc.\051 of the image on screen.) 100.72 343.67 P
1 F
-0.09 (Pr) 423.86 343.67 P
-0.09 (oceed) 435.27 343.67 P
0 F
-0.09 ( tells VPR to con-) 461.54 343.67 P
-0.22 (tinue with the ne) 72 326.67 P
-0.22 (xt step in placing and routing the circuit, while) 144.81 326.67 P
1 F
-0.22 (Exit) 351.2 326.67 P
0 F
-0.22 ( aborts the program. The menu b) 370.76 326.67 P
-0.22 (uttons) 513.1 326.67 P
0.14 (will be gre) 72 309.67 P
0.14 (yed out to sho) 119.16 309.67 P
0.14 (w the) 181.32 309.67 P
0.14 (y are not selectable when VPR is w) 205.43 309.67 P
0.14 (orking, rather than interacti) 362.39 309.67 P
0.14 (v) 482.89 309.67 P
0.14 (ely display-) 488.23 309.67 P
(ing graphics.) 72 292.67 T
0.99 (The) 93.6 275.67 P
1 F
0.99 (T) 114.44 275.67 P
0.99 (oggle Nets) 120.77 275.67 P
0 F
0.99 ( b) 169.72 275.67 P
0.99 (utton toggles the nets in the circuit visible/in) 178.74 275.67 P
0.99 (visible. When a placement is being) 381.08 275.67 P
0.04 (displayed, routing information is not yet kno) 72 258.67 P
0.04 (wn so nets are simply dra) 268.41 258.67 P
0.04 (wn as a \322star;\323 that is, a straight line) 380.55 258.67 P
0 (is dra) 72 241.67 P
0 (wn from the net source to each of its sinks.  Click on an) 95.97 241.67 P
0 (y clb in the display) 340.86 241.67 P
0 (, and it will be highlighted) 423.87 241.67 P
0.46 (in green, while its f) 72 224.67 P
0.46 (anin and f) 158.96 224.67 P
0.46 (anout are highlighted in blue and red, respecti) 203.75 224.67 P
0.46 (v) 408.31 224.67 P
0.46 (ely) 413.65 224.67 P
0.46 (.  Once a circuit has been) 426.37 224.67 P
0.25 (routed the true path of each net will be sho) 72 207.67 P
0.25 (wn.  Ag) 261.86 207.67 P
0.25 (ain, you can click on T) 297.43 207.67 P
0.25 (oggle Nets to mak) 398.62 207.67 P
0.25 (e net routings) 479.61 207.67 P
(visible or in) 72 190.67 T
(visible, and clicking on a clb or pad will highlight their f) 124.12 190.67 T
(anins and f) 372.72 190.67 T
(anouts.) 420.88 190.67 T
-0.05 (When a routing is on-screen, clicking on) 93.6 173.67 P
1 F
-0.05 (T) 274.7 173.67 P
-0.05 (oggle RR) 281.02 173.67 P
0 F
-0.05 ( will switch between v) 324.05 173.67 P
-0.05 (arious vie) 422.55 173.67 P
-0.05 (ws of the routing) 465.3 173.67 P
0.02 (resources a) 72 156.67 P
0.02 (v) 120.97 156.67 P
0.02 (ailable in the FPGA.  W) 126.19 156.67 P
0.02 (iring se) 232.18 156.67 P
0.02 (gments and clb pins are dra) 264.72 156.67 P
0.02 (wn in black, connections from wir-) 385.32 156.67 P
0.26 (ing se) 72 139.67 P
0.26 (gments to input pins are sho) 98.07 139.67 P
0.26 (wn in blue, connections from output pins to wiring se) 222.85 139.67 P
0.26 (gments are sho) 460.32 139.67 P
0.26 (wn) 526.56 139.67 P
-0.27 (in red, and connections between wiring se) 72 122.67 P
-0.27 (gments are sho) 255.02 122.67 P
-0.27 (wn in green.  The points at which wiring se) 320.19 122.67 P
-0.27 (gments) 508.22 122.67 P
0.17 (connect to clb pins \050connection box switches\051 are mark) 72 105.67 P
0.17 (ed with an \322X\323.  Switch box connections will ha) 315.82 105.67 P
0.17 (v) 529.78 105.67 P
0.17 (e) 535.12 105.67 P
0.15 (b) 72 88.67 P
0.15 (uf) 77.28 88.67 P
0.15 (fers \050triangles\051 or pass transistors \050circles\051 dra) 86.17 88.67 P
0.15 (wn on top of them, depending on the type of switch each) 288.49 88.67 P
-0.19 (connection uses.  Clicking on a clb or pad will o) 72 71.67 P
-0.19 (v) 282.27 71.67 P
-0.19 (erlay the routing of all nets connected to that block on top) 287.6 71.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(T) 85.75 713.33 T
(ABLE 1:  VP) 91.51 713.33 T
(ack Options.) 147.8 713.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Option) 75 692.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Default) 209.57 692.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Description) 266.07 692.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(-lut_size <int>) 75 676.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4) 209.57 676.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Number of inputs per LUT \050i.e.) 266.07 676.33 T
3 F
(K) 394.38 676.33 T
0 F
(\051.) 401.05 676.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(-no_clustering) 75 660.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(cluster) 209.57 660.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.04 (Speci\336es that no clustering is to be performed -- i.e. the logic block) 266.07 660.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(consists of one BLE \050a LUT and  a FF\051 with no local routing.) 266.07 648.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(-global_clocks {on | of) 75 632.33 T
(f}) 166.26 632.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(on) 209.57 632.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Indicates whether clocks should be mark) 266.07 632.33 T
(ed as being routed via a) 428.99 632.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(special, global resource.  VPR does not route global signals.) 266.07 620.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(-cluster_size <int>) 75 604.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1) 209.57 604.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Number of BLEs in a cluster) 266.07 604.33 T
(-based logic block \050i.e.) 381.13 604.33 T
3 F
(N) 475 604.33 T
0 F
(\051.) 481.67 604.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(-inputs_per_cluster <int>) 75 588.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4 *) 209.57 588.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(cluster_size) 209.57 576.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Number of  distinct inputs in a logic cluster \050i.e.) 266.07 588.33 T
3 F
(I) 460.5 588.33 T
0 F
(\051.) 463.83 588.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(-clocks_per_cluster <int>) 75 560.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1) 209.57 560.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Number of distinct clocks in a logic cluster) 266.07 560.33 T
(.) 438 560.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(-mux) 75 544.33 T
(es_to_cluster_output_pins) 95.96 544.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
({on | of) 75 532.33 T
(f}) 104.88 532.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(of) 209.57 544.33 T
(f) 217.65 544.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.15 (If \322of) 266.07 544.33 P
-0.15 (f\323, each BLE output is hook) 287.6 544.33 P
-0.15 (ed directly to a cluster output pin.) 398.94 544.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(If \322on\323, a set of) 266.07 532.33 T
3 F
(N) 330.49 532.33 T
0 F
( \050one per cluster output\051) 337.16 532.33 T
3 F
(N) 435.75 532.33 T
0 F
(:1 multiple) 442.42 532.33 T
(x) 485.89 532.33 T
(ers allo) 490.74 532.33 T
(ws) 519.65 532.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(each output pin to be dri) 266.07 520.33 T
(v) 363.31 520.33 T
(en by an) 368.16 520.33 T
(y of the) 401.89 520.33 T
3 F
(N) 434.94 520.33 T
0 F
( BLEs within a cluster) 441.61 520.33 T
(.) 530.5 520.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(-hill_climbing {on | of) 75 504.33 T
(f}) 164.61 504.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(on) 209.57 504.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Controls whether the algorithm used to pack BLEs into clusters) 266.07 504.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(allo) 266.07 492.33 T
(ws hill climbing or is strictly greedy) 280.82 492.33 T
(.) 425.17 492.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(-cluster_seed {max_sharing |) 75 476.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(max_inputs}) 75 464.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(max_inputs) 209.57 476.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Speci\336es the w) 266.07 476.33 T
(ay in which the cluster packing algorithm picks the) 326.52 476.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\336rst BLE to be placed in an empty cluster) 266.07 464.33 T
(.  Max_sharing picks the) 432.17 464.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(BLE with the most signals in common with the last cluster) 266.07 452.33 T
(, while) 500.12 452.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(max_inputs picks the BLE with the most used inputs.) 266.07 440.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 706.75 72 435.25 2 L
V
0.5 H
0 Z
N
206.57 707.25 206.57 434.75 2 L
V
N
263.07 707.25 263.07 434.75 2 L
V
N
540.43 706.75 540.43 435.25 2 L
V
N
71.75 707 540.68 707 2 L
V
N
72.25 688.25 540.18 688.25 2 L
V
N
72.25 685.75 540.18 685.75 2 L
V
N
71.75 671 540.68 671 2 L
V
N
71.75 643 540.68 643 2 L
V
N
71.75 615 540.68 615 2 L
V
2 H
N
71.75 599 540.68 599 2 L
V
0.5 H
N
71.75 571 540.68 571 2 L
V
N
71.75 555 540.68 555 2 L
V
2 H
N
71.75 515 540.68 515 2 L
V
N
71.75 487 540.68 487 2 L
V
0.5 H
N
71.75 435 540.68 435 2 L
V
N
FMENDPAGE
%%EndPage: "5" 5
%%Page: "6" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 54 540 54 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(VPR and VP) 72 42.62 T
(ack User\325) 113.22 42.62 T
(s Manual \050V) 143.65 42.62 T
(ersion 4.22\051) 182.75 42.62 T
(February 17, 1999) 276.56 42.62 T
(6) 536 42.62 T
0 11 Q
0.81 (of the dra) 72 712.67 P
0.81 (wing of the FPGA routing resources, and will label each of the pins on that block with its pin) 115.62 712.67 P
0.3 (number) 72 695.67 P
0.3 (.  The routing resource vie) 105 695.67 P
0.3 (w can be v) 222.31 695.67 P
0.3 (ery useful in ensuring that you ha) 270.39 695.67 P
0.3 (v) 419.22 695.67 P
0.3 (e correctly described your) 424.56 695.67 P
1.21 (FPGA in the architecture description \336le -- if you see switches where the) 72 678.67 P
1.21 (y shouldn\325) 407.08 678.67 P
1.21 (t be or pins on the) 454.84 678.67 P
(wrong side of a clb, your architecture description needs to be re) 72 661.67 T
(vised.) 351.54 661.67 T
0.27 (When a routing is sho) 93.6 644.67 P
0.27 (wn on-screen, clicking on the) 190.95 644.67 P
1 F
0.27 (Congestion) 324.88 644.67 P
0 F
0.27 ( b) 377.44 644.67 P
0.27 (utton will sho) 385.74 644.67 P
0.27 (w an) 446.52 644.67 P
0.27 (y o) 467.7 644.67 P
0.27 (v) 481.55 644.67 P
0.27 (erused rout-) 486.89 644.67 P
0.49 (ing resources \050wires or pins\051 in red, if an) 72 627.67 P
0.49 (y o) 254.46 627.67 P
0.49 (v) 268.53 627.67 P
0.49 (erused resources e) 273.87 627.67 P
0.49 (xist.  Finally) 355.31 627.67 P
0.49 (, when a routing is on screen) 410.89 627.67 P
-0.27 (you can click on the) 72 610.67 P
1 F
-0.27 (Crit. P) 162.01 610.67 P
-0.27 (ath) 193.4 610.67 P
0 F
-0.27 ( b) 208.68 610.67 P
-0.27 (utton to see each of the nets on the critical path in turn.  The current net on) 216.44 610.67 P
0.01 (the critical path is highlighted in c) 72 593.67 P
0.01 (yan; its source block is sho) 222.25 593.67 P
0.01 (wn in yello) 340.9 593.67 P
0.01 (w and the critical sink is sho) 390.15 593.67 P
0.01 (wn in) 515.23 593.67 P
(green.) 72 576.67 T
1 13 Q
(5.2  Command-Line Options) 72 547.33 T
0 11 Q
(T) 93.6 526.67 T
(o get a list of all the a) 99.44 526.67 T
(v) 194.24 526.67 T
(ailable options type vpr with no parameters.) 199.46 526.67 T
0.05 (VPR has a lot of options.  The four options most people will be interested in are) 93.6 509.67 P
1 F
0.05 (-fast, -inner_num, -) 448.85 509.67 P
0.28 (r) 72 492.67 P
0.28 (oute_chan_width,) 76.69 492.67 P
0 F
0.28 (and) 163.14 492.67 P
1 F
0.28 ( -r) 179.02 492.67 P
0.28 (oute_type) 190.4 492.67 P
0 F
0.28 (.  In general for the other options the def) 236.23 492.67 P
0.28 (aults are \336ne, and only peo-) 416.41 492.67 P
-0.02 (ple looking at ho) 72 475.67 P
-0.02 (w dif) 145.92 475.67 P
-0.02 (ferent CAD algorithms perform will try man) 168.54 475.67 P
-0.02 (y of them. T) 364.42 475.67 P
-0.02 (o understand what the more) 417.87 475.67 P
1.75 (esoteric placer and router options actually do, do) 72 458.67 P
1.75 (wnload [6, 7, 8] from the author\325) 298.45 458.67 P
1.75 (s web page \050http://) 453.17 458.67 P
(www) 72 441.67 T
(.eecg.toronto.edu/~v) 95.11 441.67 T
(aughn\051.) 185.41 441.67 T
0.43 (In the follo) 93.6 424.67 P
0.43 (wing te) 143.06 424.67 P
0.43 (xt, v) 176.01 424.67 P
0.43 (alues in angle brack) 195.72 424.67 P
0.43 (ets, e.g. <int>, should be replaced by the appropriate \336le-) 284.56 424.67 P
-0.17 (name or number) 72 407.67 P
-0.17 (.  V) 143.16 407.67 P
-0.17 (alues in curly braces separated by v) 157.79 407.67 P
-0.17 (ertical bars, e.g. {on | of) 313.03 407.67 P
-0.17 (f}, indicate all the permissi-) 417.76 407.67 P
(ble choices for an option.) 72 390.67 T
1 12 Q
(5.2.1  General Options) 72 361 T
1 11 Q
1.53 (-fast) 93.6 339.67 P
0 F
1.53 (:  Sets v) 114.37 339.67 P
1.53 (arious placer and router parameters so that a circuit will be placed and routed more) 153.83 339.67 P
0.41 (quickly) 72 322.67 P
0.41 (, at the cost of some \050~10 - 15%\051 de) 104.29 322.67 P
0.41 (gradation in quality) 265.33 322.67 P
0.41 (.) 351.6 322.67 P
3 F
0.41 (Note:  -fast should pr) 360.68 322.67 P
0.41 (obably not be used) 455.96 322.67 P
0.06 (with the timing-driven r) 72 305.67 P
0.06 (outer) 176.49 305.67 P
0.06 (, as it can de) 198.49 305.67 P
0.06 (gr) 254.19 305.67 P
0.06 (ade the cir) 263.81 305.67 P
0.06 (cuit speed by o) 310.56 305.67 P
0.06 (ver 30%, without signi\336cantly speed-) 376.31 305.67 P
(ing the r) 72 288.67 T
(outer) 108.78 288.67 T
(.) 130.78 288.67 T
1 F
(-nodisp) 93.6 271.67 T
0 F
(: Disables all graphics. Useful if you're not running X W) 128.45 271.67 T
(indo) 377.15 271.67 T
(ws. Def) 396.43 271.67 T
(ault: graphics enabled.) 430.53 271.67 T
1 F
-0.1 (-auto <int>) 93.6 254.67 P
0 F
-0.1 (: Can be 0, 1, or 2. This sets ho) 146.07 254.67 P
-0.1 (w often you must click Proceed to continue e) 281.82 254.67 P
-0.1 (x) 479.47 254.67 P
-0.1 (ecution after) 484.81 254.67 P
(vie) 72 237.67 T
(wing the graphics. The higher the number) 85.17 237.67 T
(, the more infrequently the program will pause. Def) 268.94 237.67 T
(ault: 1.) 495.51 237.67 T
1 F
0.43 (-r) 93.6 220.67 P
0.43 (oute_only) 101.95 220.67 P
0 F
0.43 (: T) 147.79 220.67 P
0.43 (ak) 159.86 220.67 P
0.43 (e an e) 170.14 220.67 P
0.43 (xisting placement from the placement \336le speci\336ed on the command line and) 196.48 220.67 P
(route it. Def) 72 203.67 T
(ault: of) 125.35 203.67 T
(f.) 156.55 203.67 T
1 F
(-place_only) 93.6 186.67 T
0 F
(: Place the circuit, b) 147.38 186.67 T
(ut do not route it. Def) 234.84 186.67 T
(ault: of) 330.06 186.67 T
(f.) 361.25 186.67 T
1 F
0.97 (-timing_analysis_only_with_net_delay <\337oat>:) 93.6 169.67 P
0 F
0.97 ( Do not place or route the circuit; just assume the) 313.99 169.67 P
0.37 (delay of e) 72 152.67 P
0.37 (v) 115.85 152.67 P
0.37 (ery net has the speci\336ed v) 121.18 152.67 P
0.37 (alue \050in seconds\051, and perform a timing analysis of the circuit.  Nets) 236.73 152.67 P
0.66 (mark) 72 135.67 P
0.66 (ed as .global in the netlist still ha) 94.5 135.67 P
0.66 (v) 243.72 135.67 P
0.66 (e a zero delay \050normally these are just clocks\051; e) 249.06 135.67 P
0.66 (v) 467.01 135.67 P
0.66 (ery other net is) 472.34 135.67 P
(assumed to ha) 72 118.67 T
(v) 134.11 118.67 T
(e the speci\336ed delay) 139.44 118.67 T
(.) 228.23 118.67 T
1 F
0.1 (-aspect_ratio <\337oat>:) 93.6 101.67 P
0 F
0.1 (Speci\336es the aspect ratio \050number of columns / number of ro) 197.38 101.67 P
0.1 (ws\051 of an FPGA.) 465.14 101.67 P
(Def) 72 84.67 T
(ault 1 \050square FPGA\051.) 88.38 84.67 T
FMENDPAGE
%%EndPage: "6" 6
%%Page: "7" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 54 540 54 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(VPR and VP) 72 42.62 T
(ack User\325) 113.22 42.62 T
(s Manual \050V) 143.65 42.62 T
(ersion 4.22\051) 182.75 42.62 T
(February 17, 1999) 276.56 42.62 T
(7) 536 42.62 T
1 11 Q
0.41 (-nx <int>:) 93.6 712.67 P
0 F
0.41 (Number of columns in the FPGA logic array) 144.24 712.67 P
0.41 (. Def) 342.83 712.67 P
0.41 (ault: set to minimum required to \336t cir-) 365.11 712.67 P
(cuit.) 72 695.67 T
1 F
(-ny <int>:) 93.6 678.67 T
0 F
(Number of ro) 143.42 678.67 T
(ws in the FPGA logic array) 203.02 678.67 T
(. Def) 322.98 678.67 T
(ault: set to minimum required to \336t circuit.) 344.86 678.67 T
1 F
-0.15 (-full_stats:) 93.6 661.67 P
0 F
-0.15 (Print out some e) 146.3 661.67 P
-0.15 (xtra statistics about the circuit and its routing useful for wireability analy-) 217.5 661.67 P
(sis. Def) 72 644.67 T
(ault: of) 105.5 644.67 T
(f.) 136.69 644.67 T
1 F
-0.14 (-timing_analysis { on | off }) 93.6 627.67 P
0 F
-0.14 (:  T) 219.16 627.67 P
-0.14 (urn timing analysis of the routing on or of) 233.66 627.67 P
-0.14 (f.  If it is of) 416.76 627.67 P
-0.14 (f, you don\325) 465.87 627.67 P
-0.14 (t ha) 513.95 627.67 P
-0.14 (v) 529.78 627.67 P
-0.14 (e) 535.11 627.67 P
(to specify the v) 72 610.67 T
(arious timing analysis parameters in the architecture \336le.  Def) 139.24 610.67 T
(ault:  on.) 410.42 610.67 T
1 12 Q
(5.2.2  Placer Options) 72 581 T
0 11 Q
0.06 (By def) 93.6 559.67 P
0.06 (ault, the automatic annealing schedule [8] is used. This schedule g) 123.18 559.67 P
0.06 (athers statistics as the place-) 415.14 559.67 P
0.01 (ment progresses, and uses them to determine ho) 72 542.67 P
0.01 (w to update the temperature, when to e) 282.57 542.67 P
0.01 (xit, etc. This sched-) 453.52 542.67 P
0.58 (ule is generally superior to an) 72 525.67 P
0.58 (y user) 205.18 525.67 P
0.58 (-speci\336ed schedule. If an) 232.11 525.67 P
0.58 (y of init_t, e) 343.65 525.67 P
0.58 (xit_t or alpha_t is speci\336ed, the) 399 525.67 P
(user schedule, with a \336x) 72 508.67 T
(ed initial temperature, \336nal temperature and temperature update f) 178.46 508.67 T
(actor is used.) 465.2 508.67 T
1 F
(-seed <int>) 93.6 491.67 T
0 F
(: Sets the initial random seed used by the placer) 145.55 491.67 T
(. Def) 354.84 491.67 T
(ault: 1.) 376.72 491.67 T
1 F
1.09 (-inner_num <\337oat>) 93.6 474.67 P
0 F
1.09 (: The number of mo) 186.37 474.67 P
1.09 (v) 278.53 474.67 P
1.09 (es attempted at each temperature is inner_num times the) 283.87 474.67 P
0.45 (total number of blocks) 72 457.67 P
0 8.8 Q
0.36 (4/3) 172.65 462.07 P
0 11 Q
0.45 ( in the circuit.  The number of blocks in a circuit is the number of pads plus the) 183.9 457.67 P
0.04 (number of clbs.  Changing inner_num is the best w) 72 440.67 P
0.04 (ay to change the speed/quality tradeof) 297.16 440.67 P
0.04 (f of the placer) 464.21 440.67 P
0.04 (, as) 525.29 440.67 P
-0.2 (it lea) 72 423.67 P
-0.2 (v) 93.27 423.67 P
-0.2 (es the highly-ef) 98.61 423.67 P
-0.2 (\336cient automatic annealing schedule on and simply changes the number of mo) 166.36 423.67 P
-0.2 (v) 508.91 423.67 P
-0.2 (es per) 514.24 423.67 P
0.12 (temperature.  Def) 72 406.67 P
0.12 (ault: 10.) 149.41 406.67 P
3 F
0.12 (Note:  specifying -inner_num 1 will speed up the placer by a factor of 10 while) 191.35 406.67 P
-0.05 (typically r) 72 389.67 P
-0.05 (educing placement quality only by 10% or less \050depends on the ar) 116.45 389.67 P
-0.05 (c) 405.98 389.67 P
-0.05 (hitectur) 410.7 389.67 P
-0.05 (e\051.  Hence user) 444.52 389.67 P
-0.05 (s mor) 510.83 389.67 P
-0.05 (e) 535.12 389.67 P
(concerned with CPU time than quality may \336nd this a mor) 72 372.67 T
(e appr) 328.86 372.67 T
(opriate value of inner_num.) 356.78 372.67 T
1 F
1 (-init_t <\337oat>) 93.6 355.67 P
0 F
1 (: The starting temperature of the anneal for the manual annealing schedule. Def) 159.39 355.67 P
1 (ault:) 520.44 355.67 P
(100.) 72 338.67 T
1 F
0.47 (-exit_t <\337oat>) 93.6 321.67 P
0 F
0.47 (: The \050manual\051 anneal will terminate when the temperature drops belo) 160.07 321.67 P
0.47 (w the e) 472.45 321.67 P
0.47 (xit tem-) 505 321.67 P
(perature. Def) 72 304.67 T
(ault: 0.01.) 129.91 304.67 T
1 F
-0.17 (-alpha_t <\337oat>) 93.6 287.67 P
0 F
-0.17 (: The temperature is updated by multiplying the old temperature by alpha_t when the) 168.61 287.67 P
(manual annealing schedule is enabled. Def) 72 270.67 T
(ault: 0.8.) 260.07 270.67 T
1 F
-0.03 (-\336x_pins {random | <\336le.pads>}:) 93.6 253.67 P
0 F
-0.03 (Do not allo) 248.23 253.67 P
-0.03 (w the placer to mo) 297.4 253.67 P
-0.03 (v) 379.01 253.67 P
-0.03 (e the I/O locations about during the) 384.34 253.67 P
0.01 (anneal. Instead, lock each I/O pad to some location at the start of the anneal.  If) 72 236.67 P
1 F
0.01 (-\336x_pins random) 423.54 236.67 P
0 F
0.01 ( is spec-) 503.93 236.67 P
0.62 (i\336ed, each I/O block is lock) 72 219.67 P
0.62 (ed to a random pad location to model the ef) 196.59 219.67 P
0.62 (fect of poor board-le) 393.46 219.67 P
0.62 (v) 485.77 219.67 P
0.62 (el I/O con-) 491.1 219.67 P
0.18 (straints.  If an) 72 202.67 P
0.18 (y w) 132.85 202.67 P
0.18 (ord other than random is speci\336ed after -\336x_pins, that string is tak) 149.11 202.67 P
0.18 (en to be the name of a) 441.8 202.67 P
0.35 (\336le listing the desired location of each I/O block in the netlist \050i.e.) 72 185.67 P
1 F
0.35 (-\336x_pins <\336le.pads>) 368.95 185.67 P
0 F
0.35 (\051.  This pad loca-) 463.75 185.67 P
-0.17 (tion \336le is in the same format as a normal placement \336le, b) 72 168.67 P
-0.17 (ut only speci\336es the locations of I/O pads, rather) 327.85 168.67 P
(than the locations of all blocks.  Def) 72 151.67 T
(ault: of) 231.37 151.67 T
(f \050i.e. placer chooses pad locations\051.) 262.56 151.67 T
1 F
0.69 (-place_cost_type {linear | nonlinear}:) 93.6 134.67 P
0 F
0.69 (Select the placement cost function. F) 272.43 134.67 P
0.69 (or FPGAs in which all) 438.24 134.67 P
0.12 (channels ha) 72 117.67 P
0.12 (v) 123.52 117.67 P
0.12 (e the same width the linear cost function reduces to a bounding box wirelength cost function.) 128.85 117.67 P
1.09 (The nonlinear cost function, on the other hand, considers both wirelength and congestion during place-) 72 100.67 P
(ment. Def) 72 83.67 T
(ault: linear) 115.88 83.67 T
(.) 162.63 83.67 T
FMENDPAGE
%%EndPage: "7" 7
%%Page: "8" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 54 540 54 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(VPR and VP) 72 42.62 T
(ack User\325) 113.22 42.62 T
(s Manual \050V) 143.65 42.62 T
(ersion 4.22\051) 182.75 42.62 T
(February 17, 1999) 276.56 42.62 T
(8) 536 42.62 T
1 11 Q
-0.24 (-place_cost_exp <\337oat>:) 93.6 712.67 P
0 F
-0.24 (Only rele) 209.52 712.67 P
-0.24 (v) 250.25 712.67 P
-0.24 (ant for FPGAs in which the channel width v) 255.47 712.67 P
-0.24 (aries from channel to) 447.56 712.67 P
1.35 (channel. Sets the e) 72 695.67 P
1.35 (xponent \050) 157.75 695.67 P
5 F
1.35 (a) 200.96 695.67 P
0 F
1.35 (\051 used in the linear cost function to penalize routing in narro) 207.9 695.67 P
1.35 (w channels.) 486.72 695.67 P
(Def) 72 678.67 T
(ault: 1.) 88.38 678.67 T
1 F
-0.19 (-place_chan_width <int>:) 93.6 661.67 P
0 F
-0.19 (Can be used with the nonlinear cost function to tell VPR ho) 216.37 661.67 P
-0.19 (w man) 476.4 661.67 P
-0.19 (y tracks) 505.68 661.67 P
-0.23 (a channel of relati) 72 644.67 P
-0.23 (v) 150.14 644.67 P
-0.23 (e width 1 is e) 155.48 644.67 P
-0.23 (xpected to need to complete routing of this circuit. VPR will then place the) 213.05 644.67 P
0.42 (circuit only once, and repeatedly try routing the circuit as usual. If place_chan_width is not speci\336ed and) 72 627.67 P
1.31 (the nonlinear cost is used, VPR will replace and reroute the circuit for each channel width at which it) 72 610.67 P
(attempts to map the circuit.) 72 593.67 T
1 F
0.62 (-num_r) 93.6 576.67 P
0.62 (egions <int>:) 128.84 576.67 P
0 F
0.62 (Used only with the nonlinear cost function. VPR will compute congestion on) 193.97 576.67 P
0.79 (an array of num_re) 72 559.67 P
0.79 (gions X num_re) 158.19 559.67 P
0.79 (gions subareas. Lar) 230.48 559.67 P
0.79 (ge v) 317.08 559.67 P
0.79 (alues of num_re) 336.23 559.67 P
0.79 (gions greatly slo) 408.51 559.67 P
0.79 (w the placer) 482.52 559.67 P
0.79 (.) 537.25 559.67 P
(Def) 72 542.67 T
(ault: 4.) 88.38 542.67 T
1 12 Q
(5.2.3  Router Options) 72 513 T
1 11 Q
0.81 (-r) 93.6 491.67 P
0.81 (oute_type {global | detailed}:) 101.95 491.67 P
0 F
0.81 (Speci\336es whether global routing or combined global and detailed) 246.34 491.67 P
(routing should be performed.  Def) 72 474.67 T
(ault:  detailed \050i.e. combined global and detailed routing\051.) 222.19 474.67 T
1 F
0.69 (-r) 93.6 457.67 P
0.69 (oute_chan_width <int>:) 101.95 457.67 P
0 F
0.69 (  T) 215.1 457.67 P
0.69 (ells VPR to route the circuit with a certain channel width.  No binary) 227.94 457.67 P
-0.09 (search on channel capacity will be performed to \336nd the minimum number of tracks required for routing --) 72 440.67 P
(VPR simply reports whether or not the circuit will route at this channel width.) 72 423.67 T
1 F
1.27 (-r) 93.6 406.67 P
1.27 (outer_algorithm {br) 101.95 406.67 P
1.27 (eadth_\336rst | timing_dri) 198.09 406.67 P
1.27 (v) 309.28 406.67 P
1.27 (en}:) 314.67 406.67 P
0 F
1.27 (  Selects which router algorithm to use.  The) 333.66 406.67 P
0.27 (breadth-\336rst router focuses solely on routing a design successfully) 72 389.67 P
0.27 (, while the timing-dri) 364.93 389.67 P
0.27 (v) 458.98 389.67 P
0.27 (en router focuses) 464.31 389.67 P
0.24 (both on achie) 72 372.67 P
0.24 (ving a successful route and achie) 131.48 372.67 P
0.24 (ving good circuit speed.  The breadth-\336rst router is capable) 277.52 372.67 P
0.6 (of routing a design using slightly fe) 72 355.67 P
0.6 (wer tracks than the timing-dri) 231.78 355.67 P
0.6 (ving router \050typically 5% if the timing-) 364.67 355.67 P
-0.18 (dri) 72 338.67 P
-0.18 (v) 83.95 338.67 P
-0.18 (en router uses its def) 89.28 338.67 P
-0.18 (ault parameters; this can be reduced to about 2% if the router parameters are set so) 179.49 338.67 P
0.28 (the timing-dri) 72 321.67 P
0.28 (v) 132.81 321.67 P
0.28 (en router pays more attention to routability and less to area\051.  The designs produced by the) 138.14 321.67 P
1.19 (timing-dri) 72 304.67 P
1.19 (v) 116.34 304.67 P
1.19 (en router are much f) 121.68 304.67 P
1.19 (aster) 215.52 304.67 P
1.19 (, ho) 235.85 304.67 P
1.19 (we) 253.27 304.67 P
1.19 (v) 265.82 304.67 P
1.19 (er) 271.16 304.67 P
1.19 (, \0502x - 10x\051 and it uses less CPU time to route.  Def) 279.26 304.67 P
1.19 (ault:) 520.44 304.67 P
(timing_dri) 72 287.67 T
(v) 118.18 287.67 T
(en.) 123.51 287.67 T
1 F
1.11 (-max_r) 93.6 270.67 P
1.11 (outer_iterations <int>) 127.61 270.67 P
0 F
1.11 (:  The number of iterations of a P) 232 270.67 P
1.11 (ath\336nder) 386.71 270.67 P
1.11 (-based router that will be) 425.6 270.67 P
0.9 (e) 72 253.67 P
0.9 (x) 76.72 253.67 P
0.9 (ecuted before a circuit is declared unrouteable \050if it hasn\325) 82.05 253.67 P
0.9 (t routed successfully yet\051 at a gi) 341.36 253.67 P
0.9 (v) 486.42 253.67 P
0.9 (en channel) 491.75 253.67 P
-0.16 (width.  Def) 72 236.67 P
-0.16 (ault: 30.) 121.36 236.67 P
3 F
-0.16 (Speed-quality tr) 162.43 236.67 P
-0.16 (ade-of) 232.67 236.67 P
-0.16 (f:  r) 260.58 236.67 P
-0.16 (educe this number to speed up the r) 276.35 236.67 P
-0.16 (outer) 431.43 236.67 P
-0.16 (, at the cost of some) 453.43 236.67 P
(incr) 72 219.67 T
(ease in \336nal tr) 89.31 219.67 T
(ac) 152.4 219.67 T
(k count.  This is most ef) 162.56 219.67 T
(fective if -initial_pr) 265.95 219.67 T
(es_fac is simultaneously incr) 351.1 219.67 T
(eased.) 478.11 219.67 T
1 F
0.69 (-initial_pr) 93.6 202.67 P
0.69 (es_fac <\337oat>) 141.08 202.67 P
0 F
0.69 (: Sets the starting v) 206.55 202.67 P
0.69 (alue of the present o) 293.38 202.67 P
0.69 (v) 385.18 202.67 P
0.69 (eruse penalty f) 390.51 202.67 P
0.69 (actor) 456.55 202.67 P
0.69 (. Def) 477.93 202.67 P
0.69 (ault: 0.5.) 500.5 202.67 P
3 F
0.41 (Speed-quality tr) 72 185.67 P
0.41 (ade-of) 142.82 185.67 P
0.41 (f:  incr) 170.73 185.67 P
0.41 (ease this number to speed up the r) 201.09 185.67 P
0.41 (outer) 354.1 185.67 P
0.41 (, at the cost of some incr) 376.1 185.67 P
0.41 (ease in \336nal) 486.01 185.67 P
(tr) 72 168.67 T
(ac) 79.17 168.67 T
(k count.  V) 89.34 168.67 T
(alues of 1000 or so ar) 135.16 168.67 T
(e perfectly r) 231.62 168.67 T
(easonable) 284.37 168.67 T
(.) 328.81 168.67 T
1 F
0.3 (-\336rst_iter_pr) 93.6 151.67 P
0.3 (es_fac <\337oat>:) 154.5 151.67 P
0 F
0.3 (  Similar to -initial_pres_f) 223.24 151.67 P
0.3 (ac.  This sets the present o) 338.59 151.67 P
0.3 (v) 455.99 151.67 P
0.3 (eruse penalty f) 461.33 151.67 P
0.3 (ac-) 526.57 151.67 P
(tor for the v) 72 134.67 T
(ery \336rst routing iteration.  -initial_pres_f) 124.07 134.67 T
(ac sets it for the second iteration.  Def) 302.39 134.67 T
(ault: 0.5.) 469.39 134.67 T
1 F
0.25 (-pr) 93.6 117.67 P
0.25 (es_fac_mult <\337oat>) 108.07 117.67 P
0 F
0.25 (: Sets the gro) 200.59 117.67 P
0.25 (wth f) 258.82 117.67 P
0.25 (actor by which the present o) 281.87 117.67 P
0.25 (v) 407.3 117.67 P
0.25 (eruse penalty f) 412.63 117.67 P
0.25 (actor is multi-) 477.78 117.67 P
(plied after each router iteration. Def) 72 100.67 T
(ault: 2.) 230.11 100.67 T
1 F
3.39 (-acc_fac <\337oat>) 93.6 83.67 P
0 F
3.39 (: Speci\336es the accumulated o) 171.54 83.67 P
3.39 (v) 313.26 83.67 P
3.39 (eruse f) 318.59 83.67 P
3.39 (actor \050historical congestion cost f) 351.5 83.67 P
3.39 (actor\051.) 511.6 83.67 P
(Def) 72 66.67 T
(ault: 1.) 88.38 66.67 T
FMENDPAGE
%%EndPage: "8" 8
%%Page: "9" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 54 540 54 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(VPR and VP) 72 42.62 T
(ack User\325) 113.22 42.62 T
(s Manual \050V) 143.65 42.62 T
(ersion 4.22\051) 182.75 42.62 T
(February 17, 1999) 276.56 42.62 T
(9) 536 42.62 T
1 11 Q
0.38 (-b) 93.6 712.67 P
0.38 (b_factor <int>) 103.27 712.67 P
0 F
0.38 (: Sets the distance \050in channels\051 outside of the bounding box of its pins a route can) 171.49 712.67 P
0.51 (go. Lar) 72 695.67 P
0.51 (ger numbers slo) 104.08 695.67 P
0.51 (w the router some) 175.11 695.67 P
0.51 (what, b) 255.5 695.67 P
0.51 (ut allo) 288.18 695.67 P
0.51 (w for a more e) 316.23 695.67 P
0.51 (xhausti) 382.27 695.67 P
0.51 (v) 413.77 695.67 P
0.51 (e search of possible routes.) 419.11 695.67 P
(Def) 72 678.67 T
(ault: 3.) 88.38 678.67 T
1 F
0.13 (-base_cost_type [demand_only | delay_normalized | intrinsic_delay]:) 93.6 661.67 P
0 F
0.13 ( Sets the basic cost of using) 417.61 661.67 P
0.44 (a routing node \050resource\051.  Demand_only sets the basic cost of a node according to ho) 72 644.67 P
0.44 (w much demand is) 455.89 644.67 P
0.45 (e) 72 627.67 P
0.45 (xpected for that type of node.  Delay_normalized is similar) 76.72 627.67 P
0.45 (, b) 340.02 627.67 P
0.45 (ut normalizes all these basic costs to be of) 351.25 627.67 P
-0.09 (the same magnitude as the typical delay through a routing resource.  Intrinsic_delay sets the basic cost of a) 72 610.67 P
0.81 (node to its intrinsic delay) 72 593.67 P
0.81 (.  Def) 185.74 593.67 P
0.81 (ault: delay_normalized for the timing-dri) 211.98 593.67 P
0.81 (v) 395.19 593.67 P
0.81 (en router and demand_only for) 400.52 593.67 P
(the breadth-\336rst router) 72 576.67 T
(.) 170.37 576.67 T
1 F
0.44 (-bend_cost <\337oat>) 93.6 559.67 P
0 F
0.44 (: The cost of a bend. Lar) 180.83 559.67 P
0.44 (ger numbers will lead to routes with fe) 291.13 559.67 P
0.44 (wer bends, at the) 464.13 559.67 P
0.82 (cost of some increase in track count. If only global routing is being performed, routes with fe) 72 542.67 P
0.82 (wer bends) 494.27 542.67 P
0.26 (will be easier for a detailed router to subsequently route onto a se) 72 525.67 P
0.26 (gmented routing architecture. Def) 362.17 525.67 P
0.26 (ault: 1) 511.93 525.67 P
(if global routing is being performed, 0 if combined global/detailed routing is being performed.) 72 508.67 T
1 F
1.67 (-astar_fac <\337oat>:) 93.6 491.67 P
0 F
1.67 (  Rele) 182.04 491.67 P
1.67 (v) 210.78 491.67 P
1.67 (ant only to the timing-dri) 216 491.67 P
1.67 (v) 333.04 491.67 P
1.67 (en router) 338.37 491.67 P
1.67 (.  Sets ho) 378.84 491.67 P
1.67 (w aggressi) 423.92 491.67 P
1.67 (v) 472.06 491.67 P
1.67 (e the directed) 477.4 491.67 P
-0.16 (search used by the timing-dri) 72 474.67 P
-0.16 (v) 199.38 474.67 P
-0.16 (en router is.  V) 204.72 474.67 P
-0.16 (alues between 1 and 2 are reasonable, with higher v) 268.52 474.67 P
-0.16 (alues trad-) 494.04 474.67 P
(ing some quality for reduced CPU time.  Def) 72 457.67 T
(ault: 1.2.) 269.56 457.67 T
1 F
0.57 (-max_criticality <\337oat>:) 93.6 440.67 P
0 F
0.57 (  Rele) 208.44 440.67 P
0.57 (v) 234.98 440.67 P
0.57 (ant only to the timing-dri) 240.2 440.67 P
0.57 (v) 352.84 440.67 P
0.57 (en router) 358.17 440.67 P
0.57 (.  Sets the maximum fraction of) 397.54 440.67 P
0.63 (routing cost that can come from delay \050vs. coming from routability\051 for an) 72 423.67 P
0.63 (y net.  A v) 406 423.67 P
0.63 (alue of 0 means no) 454.38 423.67 P
1.49 (attention is paid to delay; a v) 72 406.67 P
1.49 (alue of 1 means nets on the critical path pay no attention to congestion.) 207.77 406.67 P
(Def) 72 389.67 T
(ault: 0.99.) 88.38 389.67 T
1 F
0.49 (-criticality_exp <\337oat>:) 93.6 372.67 P
0 F
0.49 (Rele) 211.16 372.67 P
0.49 (v) 231.05 372.67 P
0.49 (ant only to the timing-dri) 236.27 372.67 P
0.49 (v) 348.56 372.67 P
0.49 (en router) 353.89 372.67 P
0.49 (.  Controls the delay - routability) 393.17 372.67 P
0.47 (tradeof) 72 355.67 P
0.47 (f for nets as a function of their slack.  If this v) 102.88 355.67 P
0.47 (alue is 0, all nets are treated the same, re) 309.51 355.67 P
0.47 (g) 491.63 355.67 P
0.47 (ardless of) 497.07 355.67 P
1.04 (their slack.  If it is v) 72 338.67 P
1.04 (ery lar) 166.36 338.67 P
1.04 (ge, only nets on the critical path will be routed with attention paid to delay) 195.6 338.67 P
1.04 (.) 537.25 338.67 P
(Other v) 72 321.67 T
(alues produce more moderate tradeof) 105.02 321.67 T
(fs.  Def) 268.47 321.67 T
(ault: 1.) 301.04 321.67 T
1 15 Q
(6  File F) 72 287 T
(ormats) 123.71 287 T
0 11 Q
0.28 (In all the \336le format that follo) 93.6 264.67 P
0.28 (w) 225.75 264.67 P
0.28 (, a sharp \050#\051 character an) 232.98 264.67 P
0.28 (ywhere in a line indicates that the rest of the) 342.91 264.67 P
0.26 (line is a comment, while a backslash \050\134\051 at the end of a line \050and not in a comment\051 means that this line is) 72 247.67 P
(continued on the line belo) 72 230.67 T
(w) 185.99 230.67 T
(.) 193.22 230.67 T
1 13 Q
(6.1  Cir) 72 201.33 T
(cuit Netlist \050.net\051 F) 113.29 201.33 T
(ormat) 216.94 201.33 T
0 11 Q
0.04 (Three dif) 93.6 180.67 P
0.04 (ferent circuit elements are a) 133.98 180.67 P
0.04 (v) 256.09 180.67 P
0.04 (ailable: input pads, output pads, and logic blocks, and are spec-) 261.31 180.67 P
(i\336ed using the k) 72 163.67 T
(e) 142.48 163.67 T
(yw) 147.2 163.67 T
(ords .input, .output, and .clb, respecti) 160.53 163.67 T
(v) 323.71 163.67 T
(ely) 329.05 163.67 T
(. The format is sho) 341.77 163.67 T
(wn belo) 424.3 163.67 T
(w) 459.16 163.67 T
(.) 466.38 163.67 T
2 9 Q
(element_type_keyword) 72 148 T
4 F
(blockname) 190.8 148 T
2 F
(pinlist:) 88.2 137 T
4 F
(net_a  net_b  net_c ...) 136.8 137 T
2 F
(   subblock:) 72 126 T
4 F
(subblock_name pin_num1 pin_num2 ...  # Only needed if a clb) 142.2 126 T
0 11 Q
0.1 (A circuit element is created by specifying a k) 93.6 107.67 P
0.1 (e) 293.45 107.67 P
0.1 (yw) 298.17 107.67 P
0.1 (ord at the start of a line, follo) 311.5 107.67 P
0.1 (wed by the name to be) 440.23 107.67 P
0.32 (used to identify this block. The line immediately belo) 72 90.67 P
0.32 (w this k) 309.87 90.67 P
0.32 (e) 345.24 90.67 P
0.32 (yw) 349.96 90.67 P
0.32 (ord line starts with the identi\336er) 363.29 90.67 P
3 F
0.32 (pinlist:) 508.83 90.67 P
0 F
0.2 (and then lists the names of the nets connected to each pin of the logic block or pad. Input and output pads) 72 73.67 P
FMENDPAGE
%%EndPage: "9" 9
%%Page: "10" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 54 540 54 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(VPR and VP) 72 42.62 T
(ack User\325) 113.22 42.62 T
(s Manual \050V) 143.65 42.62 T
(ersion 4.22\051) 182.75 42.62 T
(February 17, 1999) 276.56 42.62 T
(10) 532 42.62 T
0 11 Q
0.64 (\050) 72 712.67 P
3 F
0.64 (.inputs) 75.66 712.67 P
0 F
0.64 ( and) 105.31 712.67 P
3 F
0.64 (.outputs) 127.98 712.67 P
0 F
0.64 (\051 ha) 163.13 712.67 P
0.64 (v) 180.35 712.67 P
0.64 (e only one pin, while logic blocks \050.) 185.68 712.67 P
3 F
0.64 (clbs) 348.16 712.67 P
0 F
0.64 (\051 ha) 365.88 712.67 P
0.64 (v) 383.11 712.67 P
0.64 (e as man) 388.44 712.67 P
0.64 (y pins as the architecture) 428.06 712.67 P
-0.17 (\336le used for this run of VPR speci\336es. The \336rst net listed in the pinlist connects to pin 0 of a clb, and so on.) 72 695.67 P
1.12 (If some pin of a clb is to be left unconnected, the corresponding entry in the pinlist should specify the) 72 678.67 P
(reserv) 72 661.67 T
(ed w) 98.71 661.67 T
(ord) 119.67 661.67 T
3 F
(open) 137.09 661.67 T
0 F
(instead of a net name.) 161.22 661.67 T
0.44 (Logic blocks \050.clbs\051 also ha) 93.6 644.67 P
0.44 (v) 216.43 644.67 P
0.44 (e to specify the internal contents of the logic block with) 221.77 644.67 P
3 F
0.44 (subbloc) 474.39 644.67 P
0.44 (k) 508.4 644.67 P
0 F
0.44 (lines.) 516.47 644.67 P
-0.14 (Each clb must ha) 72 627.67 P
-0.14 (v) 146.82 627.67 P
-0.14 (e at least one subblock line, and can ha) 152.15 627.67 P
-0.14 (v) 322.18 627.67 P
-0.14 (e up to) 327.51 627.67 P
3 F
-0.14 (subbloc) 359.78 627.67 P
-0.14 (ks_per_clb) 393.78 627.67 P
0 F
-0.14 ( subblock lines, where) 442.05 627.67 P
3 F
0.83 (subbloc) 72 610.67 P
0.83 (ks_per_clb) 106 610.67 P
0 F
0.83 (  is set in the architecture \336le.  A clb may ha) 154.27 610.67 P
0.83 (v) 358.02 610.67 P
0.83 (e less than) 363.36 610.67 P
3 F
0.83 (subbloc) 414.43 610.67 P
0.83 (ks_per_clb) 448.43 610.67 P
0 F
0.83 ( subblock) 496.7 610.67 P
0.62 (lines, since some of the subblocks in the clb may be unused.  Each subblock is a BLE -- a K-input LUT) 72 593.67 P
0.31 (\050where K is set via the) 72 576.67 P
3 F
0.31 (subbloc) 175.3 576.67 P
0.31 (k_lut_size) 209.3 576.67 P
0 F
0.31 (line in the architecture description \336le\051 and a \337ip \337op, as sho) 256.36 576.67 P
0.31 (wn) 526.56 576.67 P
-0.27 (in Figure 2.  The subblock line \336rst gi) 72 559.67 P
-0.27 (v) 236.1 559.67 P
-0.27 (es the name of the subblock, and then gi) 241.44 559.67 P
-0.27 (v) 415.9 559.67 P
-0.27 (es the clb pin or a subblock) 421.24 559.67 P
0.46 (output pin within this logic block to which each BLE pin is connected.  If a BLE pin is unconnected, the) 72 542.67 P
4.3 (corresponding pin entry should be set to the k) 72 525.67 P
4.3 (e) 307.3 525.67 P
4.3 (yw) 312.02 525.67 P
4.3 (ord open.  The order of the BLE pins is:) 325.35 525.67 P
3 F
(subbloc) 72 508.67 T
(k_lut_size) 106 508.67 T
0 F
( LUT input pins, the BLE output, and the clock input \050) 150 508.67 T
3 F
(subbloc) 389.86 508.67 T
(k_lut_size) 423.86 508.67 T
0 F
( + 2 pins total\051.) 467.86 508.67 T
-0.05 (Each of the subblock LUT input pins can be connected to an) 93.6 491.67 P
-0.05 (y of the clb \050logic block\051 input pins, or to) 358.97 491.67 P
-0.19 (the output of an) 72 474.67 P
-0.19 (y of the subblocks in this logic block.  A connection to a clb input pin is speci\336ed by gi) 140.61 474.67 P
-0.19 (ving) 520.44 474.67 P
0.22 (the number of the clb pin in the appropriate place, while a connection to a subblock output is speci\336ed by) 72 457.67 P
1.38 (\322ble_<subblock_number>\323.  F) 72 440.67 P
1.38 (or e) 208.91 440.67 P
1.38 (xample, to connect to clb pin 0, one lists 0 in the appropriate place,) 226.92 440.67 P
-0.02 (while to connect to the output of subblock 0, one lists ble_0 in the appropriate place.  Each subblock clock) 72 423.67 P
-0 (pin can similarly be connected to either a clb input pin or the output of a subblock in the same logic block.) 72 406.67 P
-0.16 (If the subblock clock pin is \322open\323 the BLE output is the unre) 72 389.67 P
-0.16 (gistered LUT output; otherwise the BLE out-) 342.39 389.67 P
0.33 (put is assumed to be re) 72 372.67 P
0.33 (gistered.  The entry corresponding to the subblock output pin speci\336es the number) 174 372.67 P
-0.05 (of the clb output pin to which it connects, or) 72 355.67 P
3 F
-0.05 (open) 269.23 355.67 P
0 F
-0.05 ( if this subblock output is doesn\325) 290.62 355.67 P
-0.05 (t connect to an) 433.77 355.67 P
-0.05 (y clb out-) 497.93 355.67 P
(put pin \050which happens when a subblock output is used only locally) 72 338.67 T
(, within a logic block\051.) 369.79 338.67 T
-0.03 (The only other k) 93.6 321.67 P
-0.03 (e) 166.43 321.67 P
-0.03 (yw) 171.15 321.67 P
-0.03 (ord is) 184.48 321.67 P
3 F
-0.03 (.global) 211.93 321.67 P
0 F
-0.03 (. Use .global lines to specify that a net or nets should not be consid-) 242.79 321.67 P
0.98 (ered by the placement cost function or routed. It is assumed that some global routing resources e) 72 304.67 P
0.98 (xist to) 511.82 304.67 P
(route these v) 72 287.67 T
(ery high f) 128.04 287.67 T
(anout signals \050generally clocks\051. The syntax of the .global statement is:) 170.7 287.67 T
2 9 Q
(.global) 72 272 T
4 F
(net_a net_b ...) 115.2 272 T
0 11 Q
(An e) 93.6 253.67 T
(xample netlist in which the logic block is a single BLE is gi) 114.51 253.67 T
(v) 377.02 253.67 T
(en belo) 382.35 253.67 T
(w) 414.15 253.67 T
(.) 421.38 253.67 T
2 9 Q
(#This netlist describes a small circuit with two inputs) 72 238 T
(#and one output. There is only one clb block, which is) 72 227 T
(#a 3-input BLE \050LUT+FF\051 that has one unconnected input.) 72 216 T
(#This netlist assumes that the architecture input file defines) 72 205 T
(#a clb as a 3-input BLE with pins 0, 1, and 2 being the LUT inputs,) 72 194 T
(#pin 3 being the LUT output, and pin 4 being the BLE clock.) 72 183 T
(.input a) 72 161 T
(#Input pad.) 180 161 T
(pinlist: a) 93.6 150 T
(#Blocks can have the same name as nets with no conflict.) 180 150 T
(.input bpad) 72 128 T
(pinlist: b) 93.6 117 T
(.clb simple) 72 95 T
(# Logic block.) 185.4 95 T
(pinlist: a b open and2 open         # 2 LUT inputs used, clock input unconnected.) 93.6 84 T
(subblock: sb_one 0 1 open 3 open    # Subblock line says the same thing.) 93.6 73 T
FMENDPAGE
%%EndPage: "10" 10
%%Page: "11" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 54 540 54 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(VPR and VP) 72 42.62 T
(ack User\325) 113.22 42.62 T
(s Manual \050V) 143.65 42.62 T
(ersion 4.22\051) 182.75 42.62 T
(February 17, 1999) 276.56 42.62 T
(11) 532 42.62 T
2 9 Q
(.output out_and2) 72 703 T
(#Output pad.) 180 703 T
(pinlist: and2) 93.6 692 T
0 11 Q
0.43 (In the netlist abo) 93.6 668.67 P
0.43 (v) 168.37 668.67 P
0.43 (e the subblock line adds no ne) 173.7 668.67 P
0.43 (w information -- since the logic block only contains) 308.62 668.67 P
0.2 (one BLE, which pins are hook) 72 651.67 P
0.2 (ed to this BLE is ob) 206.7 651.67 P
0.2 (vious.  Consider a netlist in which each logic block is a) 295.23 651.67 P
(cluster) 72 634.67 T
(-based logic block containing tw) 101.11 634.67 T
(o subblocks, or BLEs, ho) 244.59 634.67 T
(we) 355.54 634.67 T
(v) 368.09 634.67 T
(er) 373.42 634.67 T
(.) 381.36 634.67 T
2 9 Q
(.input a) 72 608 T
(pinlist: a) 93.6 597 T
(.input bpad) 72 575 T
(pinlist: b) 93.6 564 T
(.input c) 72 542 T
(pinlist: c) 93.6 531 T
(.input clk) 72 509 T
(pinlist: clk) 93.6 498 T
(.global clk       # Typical case:  clock needn\325t be routed, as there\325s a) 72 476 T
(                  # special network for it.) 72 465 T
(# Example logic block:  4 inputs, 2 outputs, 1 clock.) 72 443 T
(# Internally, the logic block contains two BLEs,) 72 432 T
(# each of which consists of a 3-LUT and a FF.) 72 421 T
(# Local routing allows subblock outputs to connect to subblock inputs in the same) 72 410 T
(# logic block.) 72 399 T
(.clb more_complex) 72 377 T
(pinlist:  a b c open out_1 out_2 clk) 93.6 366 T
(subblock: sb_zero 0 1 open 4 open   # BLE inputs are a and b, output) 93.6 355 T
(                                        # goes to out_1. Output isn\325t registered.) 72 344 T
(subblock: sb_one ble_0 1 2 5 6      # BLE inputs are the output of subblock 0,) 93.6 333 T
(                                        # and nets b and c. The output goes to out_2.) 72 322 T
(                                        # The output is registered.) 72 311 T
(.output opad_1) 72 289 T
(pinlist: out_1) 93.6 278 T
(.output opad_2) 72 256 T
(pinlist: out_2) 93.6 245 T
0 11 Q
0.02 (In the netlist abo) 93.6 221.67 P
0.02 (v) 167.14 221.67 P
0.02 (e, one needs the subblock statements to kno) 172.47 221.67 P
0.02 (w what connections are made internally) 364.84 221.67 P
1.79 (to the logic block by local routing.  Figure 4 sho) 72 204.67 P
1.79 (ws the connections this netlist describes for the clb) 302.01 204.67 P
-0.27 (\322more_comple) 72 187.67 P
-0.27 (x.) 137.21 187.67 P
-0.27 (\323  Note also that while the subblock lines describe the internal structure of a clb in terms of) 144.69 187.67 P
0.5 (BLEs, the BLE structure is general enough that the timing beha) 72 170.67 P
0.5 (viour of essentially arbitrary logic blocks) 356.33 170.67 P
-0 (can be described in terms of subblock lines.  VPR needs the subblock information in a netlist only for tim-) 72 153.67 P
(ing analysis.) 72 136.67 T
FMENDPAGE
%%EndPage: "11" 11
%%Page: "12" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 54 540 54 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(VPR and VP) 72 42.62 T
(ack User\325) 113.22 42.62 T
(s Manual \050V) 143.65 42.62 T
(ersion 4.22\051) 182.75 42.62 T
(February 17, 1999) 276.56 42.62 T
(12) 532 42.62 T
1 13 Q
(6.2  FPGA Ar) 72 523.48 T
(chitectur) 148.31 523.48 T
(e File \050.ar) 197.89 523.48 T
(ch\051 F) 250.72 523.48 T
(ormat) 278.92 523.48 T
0 11 Q
1.07 (Each line in an architecture \336le consists of a k) 93.6 502.81 P
1.07 (e) 305.65 502.81 P
1.07 (yw) 310.36 502.81 P
1.07 (ord follo) 323.7 502.81 P
1.07 (wed by one or more parameters. In the) 362.68 502.81 P
-0.15 (description belo) 72 485.81 P
-0.15 (w) 142.15 485.81 P
-0.15 (, strings between curly braces, {}, denote all the possible choices for an option. All of the) 149.38 485.81 P
(follo) 72 468.81 T
(wing k) 92.5 468.81 T
(e) 122.64 468.81 T
(yw) 127.36 468.81 T
(ords must be speci\336ed in the architecture \336le.) 140.7 468.81 T
1 F
0.35 (io_rat <int>:) 93.6 451.81 P
0 F
0.35 ( Sets the number of pads \050inputs or outputs\051 that \336t into the space occupied by one clb) 153.84 451.81 P
0.35 (.) 537.25 451.81 P
(This is the number of pads in each ro) 72 434.81 T
(w or column of the FPGA.) 234.87 434.81 T
1 12 Q
(6.2.1  Description of Relati) 72 405.14 T
(v) 207.86 405.14 T
(e Channel W) 213.74 405.14 T
(idths in the FPGA) 280.2 405.14 T
0 11 Q
-0.05 (The ne) 93.6 383.81 P
-0.05 (xt three k) 123.63 383.81 P
-0.05 (e) 164.97 383.81 P
-0.05 (yw) 169.69 383.81 P
-0.05 (ords are used to describe the relati) 183.02 383.81 P
-0.05 (v) 332.75 383.81 P
-0.05 (e widths of the v) 338.09 383.81 P
-0.05 (arious channels in the FPGA.) 410.95 383.81 P
-0.02 (If global routing is to be performed, channels in dif) 72 366.81 P
-0.02 (ferent directions and in dif) 297 366.81 P
-0.02 (ferent parts of the FPGA can) 413.33 366.81 P
0.46 (be set to dif) 72 349.81 P
0.46 (ferent relati) 124.75 349.81 P
0.46 (v) 175.95 349.81 P
0.46 (e widths.) 181.28 349.81 P
3 F
0.46 (If detailed r) 227.89 349.81 P
0.46 (outing is to be performed, howe) 280.27 349.81 P
0.46 (ver) 422.36 349.81 P
0.46 (, all the c) 435.18 349.81 P
0.46 (hannels in the) 477.35 349.81 P
(FPGA must have the same width.) 72 332.81 T
1 F
-0.09 (chan_width_io) 93.6 315.81 P
2 F
-0.2 ( <) 162.67 315.81 P
1 F
-0.09 (\337oat>:) 175.67 315.81 P
0 F
-0.09 (Width of the channels between the pads and core relative to the widest core) 209.04 315.81 P
(channel.) 72 298.81 T
1 F
0.35 (chan_width_x {gaussian | unif) 93.6 281.81 P
0.35 (orm | pulse | delta} peak <width> <xpeak> <dc>) 234.7 281.81 P
2 F
0.84 (:) 462.15 281.81 P
0 F
0.35 (The <> brack-) 476.19 281.81 P
0.17 (eted quantities are needed only for pulse, gaussian, and delta \050which doesn\325t need width\051. Most values are) 72 264.81 P
-0.08 (from 0 to 1. Sets the distribution of tracks for the x-directed channels -- the channels that run horizontally.) 72 247.81 P
0.22 (If uniform is speci\336ed, you simply specify one ar) 93.6 230.81 P
0.22 (gument, peak. This v) 311.76 230.81 P
0.22 (alue \050by con) 404.71 230.81 P
0.22 (v) 459.08 230.81 P
0.22 (ention between 0) 464.41 230.81 P
0.65 (and 1\051 sets the width of the x-directed core channels relati) 72 213.81 P
0.65 (v) 333.05 213.81 P
0.65 (e to the y-directed channels and the channels) 338.38 213.81 P
1.36 (between the pads and core. Figure 5 should mak) 72 196.81 P
1.36 (e the speci\336cation of uniform \050dashed line\051 and pulse) 295.1 196.81 P
0.32 (\050solid line\051 channel widths more clear) 72 179.81 P
0.32 (. The g) 239.49 179.81 P
0.32 (aussian k) 270.93 179.81 P
0.32 (e) 311.77 179.81 P
0.32 (yw) 316.49 179.81 P
0.32 (ord tak) 329.83 179.81 P
0.32 (es the same four parameters as the pulse) 360.89 179.81 P
0.31 (k) 72 162.81 P
0.31 (e) 77.39 162.81 P
0.31 (yw) 82.11 162.81 P
0.31 (ord, and the) 95.44 162.81 P
0.31 (y are all interpreted in e) 148.13 162.81 P
0.31 (xactly the same manner e) 254.27 162.81 P
0.31 (xcept that in the g) 367.13 162.81 P
0.31 (aussian case width is) 447.12 162.81 P
(the standard de) 72 145.81 T
(viation of the function.) 138.32 145.81 T
0.58 (The delta function is used to specify a channel width distrib) 93.6 128.81 P
0.58 (ution in which all the channels ha) 361.9 128.81 P
0.58 (v) 513.01 128.81 P
0.58 (e the) 518.35 128.81 P
-0.23 (same width e) 72 111.81 P
-0.23 (xcept one. The syntax is chan_width_x delta peak xpeak dc. Peak is the e) 129.43 111.81 P
-0.23 (xtra width of the sin-) 448.63 111.81 P
0.3 (gle wide channel. Xpeak is between 0 and 1 and speci\336es the location within the FPGA of the e) 72 94.81 P
0.3 (xtra-wide) 497.85 94.81 P
0.71 (channel -- it is the fractional distance across the FPGA at which this e) 72 77.81 P
0.71 (xtra-wide channel lies. Finally) 388.16 77.81 P
0.71 (, dc) 523.4 77.81 P
0 0 0 1 0 0 0 K
72 543.14 540 720 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(Figur) 77.47 564.52 T
(e 4:) 103.56 564.52 T
0 F
(Connections within logic block \322more_complex\323 specified by subblock lines of netlist above.) 123.1 564.52 T
174.29 587.71 333.57 714.86 R
0.5 H
2 Z
N
236.99 671.37 271.57 705.94 R
N
231.3 697.57 236.25 702.52 R
V
N
231.3 685.23 236.25 690.18 R
V
N
231.3 672.9 236.25 677.85 R
V
N
244.81 666.46 249.76 671.41 R
V
N
272.47 686.73 277.42 691.68 R
V
N
242.49 671.37 247.21 680.01 251.92 670.58 3 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
238.57 611.94 273.14 646.51 R
N
232.87 638.14 237.82 643.09 R
V
N
232.87 625.8 237.82 630.76 R
V
N
232.87 613.47 237.82 618.42 R
V
N
246.38 607.03 251.33 611.98 R
V
N
274.04 627.3 278.99 632.25 R
V
N
244.07 611.94 248.78 620.58 253.49 611.15 3 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
166.29 696.28 174.14 704.14 R
V
N
166.29 670.64 174.14 678.5 R
V
N
166.29 645 174.14 652.86 R
V
N
166.29 619.36 174.14 627.21 R
V
N
333.43 685.43 341.29 693.29 R
V
N
334.14 624.71 342 632.57 R
V
N
166.29 593.71 174.14 601.57 R
V
N
3 10 Q
(pin 0) 146.43 707 T
155.86 701.29 155.86 704.26 166.24 701.29 155.86 698.31 4 Y
0 Z
N
155.86 701.29 155.86 704.26 166.24 701.29 155.86 698.31 4 Y
V
113.57 701.29 155.61 701.29 2 L
2 Z
N
1 F
(a) 105.71 699.14 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(pin 1) 147.29 679.71 T
156.72 674 156.72 676.97 167.09 674 156.72 671.02 4 Y
0 Z
N
156.72 674 156.72 676.97 167.09 674 156.72 671.02 4 Y
V
114.43 674 156.47 674 2 L
2 Z
N
1 F
(b) 106.57 671.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(pin 2) 147.43 654.57 T
156.86 648.86 156.86 651.83 167.24 648.86 156.86 645.88 4 Y
0 Z
N
156.86 648.86 156.86 651.83 167.24 648.86 156.86 645.88 4 Y
V
114.57 648.86 156.61 648.86 2 L
2 Z
N
1 F
(c) 106.71 646.71 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(pin 3) 145.71 623.43 T
(pin 6) 147.57 603 T
157 597.29 157 600.26 167.38 597.29 157 594.31 4 Y
0 Z
N
157 597.29 157 600.26 167.38 597.29 157 594.31 4 Y
V
114.71 597.29 156.75 597.29 2 L
2 Z
N
1 F
(clk) 99.71 595.14 T
388 689.14 388 692.12 398.38 689.14 388 686.17 4 Y
0 Z
N
388 689.14 388 692.12 398.38 689.14 388 686.17 4 Y
V
341.43 689.14 387.75 689.14 2 L
2 Z
N
(out_1) 401.43 686.29 T
3 F
(pin 4) 340 697.71 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
389.58 628.29 389.58 631.26 399.95 628.29 389.58 625.31 4 Y
0 Z
N
389.58 628.29 389.58 631.26 399.95 628.29 389.58 625.31 4 Y
V
343 628.29 389.33 628.29 2 L
2 Z
N
1 F
(out_2) 403 625.43 T
3 F
(pin 5) 341.57 636.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
220.86 699.86 220.86 702.83 231.24 699.86 220.86 696.88 4 Y
0 Z
N
220.86 699.86 220.86 702.83 231.24 699.86 220.86 696.88 4 Y
V
175 699.86 220.61 699.86 2 L
2 Z
N
220.15 687 220.15 689.97 230.52 687 220.15 684.02 4 Y
0 Z
N
220.15 687 220.15 689.97 230.52 687 220.15 684.02 4 Y
V
175 674.14 210.27 674.14 210.27 687 219.9 687 4 L
2 Z
N
321.57 689.14 321.57 692.12 331.95 689.14 321.57 686.17 4 Y
0 Z
N
321.57 689.14 321.57 692.12 331.95 689.14 321.57 686.17 4 Y
V
276.43 689.14 321.32 689.14 2 L
2 Z
N
221.57 641.29 221.57 644.26 231.95 641.29 221.57 638.31 4 Y
0 Z
N
221.57 641.29 221.57 644.26 231.95 641.29 221.57 638.31 4 Y
V
295.72 689.14 295.72 652.71 217.14 652.71 217.14 641.29 221.32 641.29 5 L
2 Z
N
221.57 627.71 221.57 630.69 231.95 627.71 221.57 624.74 4 Y
0 Z
N
221.57 627.71 221.57 630.69 231.95 627.71 221.57 624.74 4 Y
V
210 673.43 210 627.71 221.32 627.71 3 L
2 Z
N
221.57 615.57 221.57 618.55 231.95 615.57 221.57 612.59 4 Y
0 Z
N
221.57 615.57 221.57 618.55 231.95 615.57 221.57 612.59 4 Y
V
174.29 648.43 195.71 648.43 195.71 615.57 221.32 615.57 4 L
2 Z
N
320.86 629.14 320.86 632.12 331.24 629.14 320.86 626.17 4 Y
0 Z
N
320.86 629.14 320.86 632.12 331.24 629.14 320.86 626.17 4 Y
V
279.29 629.14 320.61 629.14 2 L
2 Z
N
249.29 598.92 247.23 598.92 249.29 606.09 251.35 598.92 4 Y
0 Z
N
249.29 598.92 247.23 598.92 249.29 606.09 251.35 598.92 4 Y
V
175 597 249.29 597 249.29 598.67 3 L
2 Z
N
90 450 1.79 1.79 295.36 689.5 G
90 450 1.79 1.79 295.36 689.5 A
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "12" 12
%%Page: "13" 13
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 54 540 54 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(VPR and VP) 72 42.62 T
(ack User\325) 113.22 42.62 T
(s Manual \050V) 143.65 42.62 T
(ersion 4.22\051) 182.75 42.62 T
(February 17, 1999) 276.56 42.62 T
(13) 532 42.62 T
0 11 Q
0.13 (speci\336es the width of all the other channels. F) 72 526.94 P
0.13 (or e) 274.85 526.94 P
0.13 (xample, the statement) 291.62 526.94 P
3 F
0.13 (c) 391.01 526.94 P
0.13 (han_width_x delta 3 0.5 1) 395.73 526.94 P
0 F
0.13 ( speci-) 510.85 526.94 P
(\336es that the horizontal channel in the middle of the FPGA is four times as wide as the other channels.) 72 509.94 T
1 F
0.75 (chan_width_y [gaussian|unif) 93.6 492.94 P
0.75 (orm|pulse|delta] peak <width> <xpeak> <dc>) 228.21 492.94 P
0 F
0.75 (: Sets the distrib) 444.17 492.94 P
0.75 (ution) 517.38 492.94 P
(of tracks for the y-directed channels.) 72 475.94 T
1 12 Q
(6.2.2  Logic Block Description) 72 446.27 T
1 11 Q
0.38 (inpin class: integer [global] [top | bottom | left | right] [top | bottom | left | right] ...:) 93.6 424.94 P
0 F
0.38 (Declares an) 488.01 424.94 P
0.11 (input pin, determines the class to which this pin belongs, and sets the side\050s\051 of CLBs on which the ph) 72 407.94 P
0.11 (ysi-) 523.5 407.94 P
-0.23 (cal output pin connection\050s\051 is \050are\051. All pins with the same class number are logically equi) 72 390.94 P
-0.23 (v) 469.17 390.94 P
-0.23 (alent -- such as) 474.39 390.94 P
1.45 (all the inputs of a LUT) 72 373.94 P
1.45 (. Class numbers must start at zero and be consecuti) 178.96 373.94 P
1.45 (v) 415.98 373.94 P
1.45 (e.  The global k) 421.32 373.94 P
1.45 (e) 495.75 373.94 P
1.45 (yw) 500.47 373.94 P
1.45 (ord is) 513.8 373.94 P
1.74 (optional; if speci\336ed, it comes after the class number) 72 356.94 P
1.74 (.  Global input pins can connect only to signals) 317.8 356.94 P
-0.15 (mark) 72 339.94 P
-0.15 (ed as global in the netlist \050typically clocks\051.  Global input pins are not connected into the normal rout-) 94.5 339.94 P
(ing; it is assumed the) 72 322.94 T
(y connect to a special, dedicate resource used for special nets lik) 164.73 322.94 T
(e clocks.) 448.1 322.94 T
1 F
0.18 (outpin class: integer [top | bottom | left | right] [top | bottom | left | right]) 93.6 305.94 P
0.18 (...:) 436.59 305.94 P
0 F
0.18 ( All parameters ha) 448.5 305.94 P
0.18 (v) 529.78 305.94 P
0.18 (e) 535.11 305.94 P
(the same meanings as their counterparts in the inpin statement.) 72 288.94 T
3 F
0.13 (NO) 93.6 271.94 P
0.13 (TE: The or) 108.44 271.94 P
0.13 (der in whic) 156.57 271.94 P
0.13 (h your inpin and outpin statements appear must be the same as the or) 206.16 271.94 P
0.13 (der in) 513.9 271.94 P
0.05 (whic) 72 254.94 P
0.05 (h your netlist \050.net\051 \336le lists the connections to the clbs.) 92.61 254.94 P
0 F
0.05 (F) 339.11 254.94 P
0.05 (or e) 345.06 254.94 P
0.05 (xample, if the \336rst pin on each clb in the) 361.74 254.94 P
-0.04 (netlist \336le is the clock pin, your \336rst pin statement in the architecture \336le must be an inpin statement de\336n-) 72 237.94 P
(ing the clock pin.) 72 220.94 T
-0 (P) 93.6 203.94 P
-0 (ads are al) 99.55 203.94 P
-0 (w) 140.97 203.94 P
-0 (ays assumed to ha) 148.8 203.94 P
-0 (v) 228.3 203.94 P
-0 (e only one pin \050either an input or an output\051, and this pin is accessible) 233.64 203.94 P
(from the one channel bordering that pad. Hence no inpin or outpin statements are gi) 72 186.94 T
(v) 440.47 186.94 T
(en for pads.) 445.8 186.94 T
1 F
1.49 (sub) 93.6 169.94 P
1.49 (blocks_per_clb <int>:) 110 169.94 P
0 F
1.49 (Speci\336es the maximum number of subblocks, or BLEs, in each logic) 222.65 169.94 P
(block.  This information is used only for timing analysis.) 72 152.94 T
1 F
0.14 (sub) 93.6 135.94 P
0.14 (block_lut_size <int>:) 110 135.94 P
0 F
0.14 (The number of LUT inputs to each of the subblock BLEs \050i.e. K\051.  Ag) 214.31 135.94 P
0.14 (ain,) 523.81 135.94 P
-0.23 (this information is only needed for timing analysis.  Ev) 72 118.94 P
-0.23 (en if your logic block is not constructed from BLEs,) 312.34 118.94 P
0.61 (it is possible to describe the timing relations between inputs and outputs in terms of BLEs, as one of the) 72 101.94 P
(e) 72 84.94 T
(xamples belo) 76.72 84.94 T
(w illustrates.) 134.8 84.94 T
72 63 540 720 C
0 0 0 1 0 0 0 K
92.09 534.27 519.91 720 C
0 0 0 1 0 0 0 K
466.18 586.64 466.18 589.62 476.56 586.64 466.18 583.67 4 Y
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
466.18 586.64 466.18 589.62 476.56 586.64 466.18 583.67 4 Y
V
181.96 586.64 465.93 586.64 2 L
2 Z
N
182.71 705.11 179.74 705.11 182.71 715.48 185.69 705.11 4 Y
0 Z
N
182.71 705.11 179.74 705.11 182.71 715.48 185.69 705.11 4 Y
V
182.71 586.64 182.71 704.86 2 L
2 Z
N
0 10 Q
(Fractional Distance across FPGA) 248.93 572.16 T
(Channel) 140.71 651.66 T
(W) 142.96 640.11 T
(idth) 152.01 640.11 T
(Relati) 141.46 662.91 T
(v) 165.1 662.91 T
(e) 169.96 662.91 T
(0.) 169.96 582.66 T
(1.) 170.71 696.66 T
J
182.71 645.14 463.21 645.14 2 L
J
182.71 645.14 186.46 645.14 2 L
N
[7.514 6.512] 7.514 I
186.46 645.14 459.45 645.14 2 L
N
J
459.45 645.14 463.21 645.14 2 L
N
J
(1.) 456.46 575.91 T
1 F
(unif) 262.96 648.61 T
(orm) 279.94 648.61 T
0 F
(0.5) 300.71 648.61 T
183.46 618.89 235.96 618.89 235.96 687.89 355.96 687.89 355.96 619.64 462.46 619.64 6 L
N
1 F
(pulse) 276.46 692.91 T
0 F
(width) 276.46 675.66 T
344.67 678.89 344.68 681.87 355.05 678.89 344.68 675.91 4 Y
0 Z
N
344.67 678.89 344.68 681.87 355.05 678.89 344.68 675.91 4 Y
V
304.21 678.89 344.43 678.89 2 L
2 Z
N
247.25 678.89 247.25 675.91 236.87 678.89 247.25 681.87 4 Y
0 Z
N
247.25 678.89 247.25 675.91 236.87 678.89 247.25 681.87 4 Y
V
269.71 678.89 247.5 678.89 2 L
2 Z
N
367.96 675.86 364.98 675.86 367.96 686.23 370.94 675.86 4 Y
0 Z
N
367.96 675.86 364.98 675.86 367.96 686.23 370.94 675.86 4 Y
V
367.96 675.61 367.96 660.89 2 L
2 Z
N
369.46 630.93 372.44 630.93 369.46 620.55 366.48 630.93 4 Y
0 Z
N
369.46 630.93 372.44 630.93 369.46 620.55 366.48 630.93 4 Y
V
369.46 631.18 369.46 649.64 2 L
2 Z
N
(peak) 360.46 653.91 T
211.21 610.27 209.21 610.27 211.21 617.23 213.21 610.27 4 Y
0 Z
N
211.21 610.27 209.21 610.27 211.21 617.23 213.21 610.27 4 Y
V
211.21 610.02 211.21 608.39 2 L
2 Z
N
211.21 595.77 213.57 595.77 211.21 587.55 208.86 595.77 4 Y
0 Z
N
211.21 595.77 213.57 595.77 211.21 587.55 208.86 595.77 4 Y
V
211.21 596.02 211.21 597.89 2 L
2 Z
N
(dc) 204.46 600.66 T
307.84 692.32 309.01 689.58 298.3 688.25 306.68 695.05 4 Y
0 Z
N
307.84 692.32 309.01 689.58 298.3 688.25 306.68 695.05 4 Y
V
308.07 692.41 343.21 707.39 2 L
2 Z
N
(xpeak is pulse midpoint) 346.21 706.41 T
155.7 547.17 452.36 561.33 R
7 X
V
1 11 Q
0 X
(Figur) 192.47 554 T
(e 5:) 218.55 554 T
0 F
(Specification of relative channel widths.) 238.1 554 T
0 0 0 1 0 0 0 K
72 63 540 720 C
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "13" 13
%%Page: "14" 14
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 54 540 54 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(VPR and VP) 72 42.62 T
(ack User\325) 113.22 42.62 T
(s Manual \050V) 143.65 42.62 T
(ersion 4.22\051) 182.75 42.62 T
(February 17, 1999) 276.56 42.62 T
(14) 532 42.62 T
0 11 Q
0.16 (The listing belo) 93.6 712.67 P
0.16 (w is for an FPGA with all channels of the same width, and a clb compatible with that) 162.7 712.67 P
0.94 (produced by VP) 72 695.67 P
0.94 (ack with the -no_clustering option. This clb contains a 4-input LUT and a \337ip \337op; the) 145.2 695.67 P
0.76 (input pins are listed \336rst, follo) 72 678.67 P
0.76 (wed by the clb output pin, follo) 208.16 678.67 P
0.76 (wed by the clock pin. Notice that the four) 350.89 678.67 P
0.21 (inputs all ha) 72 661.67 P
0.21 (v) 125.97 661.67 P
0.21 (e the same pin class, indicating that the) 131.31 661.67 P
0.21 (y are logically equi) 304.9 661.67 P
0.21 (v) 389.86 661.67 P
0.21 (alent and the router may connect) 395.09 661.67 P
(nets to an) 72 644.67 T
(y one of them. Notice also that pins can be ph) 114 644.67 T
(ysically accessible from se) 315.28 644.67 T
(v) 432.61 644.67 T
(eral sides.) 437.95 644.67 T
2 9 Q
(# Uniform channel architecture, 4-input LUT and a FF \050one BLE\051 per clb.) 72 618 T
(io_rat 2                 #2 Pads per row or column.) 72 596 T
(chan_width_io 1          #Same as core channels.) 72 585 T
(chan_width_x uniform 1   #All same width) 72 574 T
(chan_width_y uniform 1) 72 563 T
(# 4-input LUT. LUT inputs first, then output, then clock.) 72 541 T
(inpin class: 0 bottom top     #Physical pins at both top and bottom of clb.) 72 530 T
(inpin class: 0 left right) 72 519 T
(inpin class: 0 bottom top) 72 508 T
(inpin class: 0 left right) 72 497 T
(outpin class: 1 top bottom) 72 486 T
(inpin class: 2 top           # Clock pin) 72 475 T
(# Class 0 is LUT inputs, class 1 is the output, class 2 is the clock) 72 453 T
(# in this case.) 72 442 T
(subblocks_per_clb 1          # One BLE in each logic block) 72 420 T
(subblock_lut_size 4          # The LUT in a BLE has 4 inputs) 72 409 T
0 11 Q
0.14 (As a second e) 93.6 385.67 P
0.14 (xample of an architecture \336le, consider a logic block consisting of a cluster) 154.65 385.67 P
0.14 (-based logic) 486.4 385.67 P
0.14 (block, where each logic block has 5 inputs for use by its BLEs, 2 outputs and one clock input.  Each logic) 72 368.67 P
0.18 (block contains tw) 72 351.67 P
0.18 (o separate BLEs, and each BLE consists of a 4-input LUT and a \337ip \337op.  If the .net \336le) 149.85 351.67 P
0.54 (w) 72 334.67 P
0.54 (as created with VP) 79.83 334.67 P
0.54 (ack, the pin ordering we need to match the .net \336le is:  inputs for use by BLEs, out-) 164.06 334.67 P
(puts, clock.) 72 317.67 T
2 9 Q
(# Uniform channel architecture, cluster-based logic block containing) 72 291 T
(# 2 BLEs.) 72 280 T
(io_rat 2                     #2 Pads per row or column.) 72 258 T
(chan_width_io 1              #Same as core channels.) 72 247 T
(chan_width_x uniform 1       #All same width) 72 236 T
(chan_width_y uniform 1) 72 225 T
(# Logic block with 2 BLEs.  5 Inputs for use by BLEs first, then two) 72 203 T
(# outputs, then the clock.) 72 192 T
(inpin class: 0 bottom) 72 170 T
(inpin class: 0 left) 72 159 T
(inpin class: 0 right) 72 148 T
(inpin class: 0 top) 72 137 T
(inpin class: 0 bottom) 72 126 T
(outpin class: 1 top bottom      #Output 1) 72 115 T
(outpin class: 1 left right      #Output 2) 72 104 T
(inpin class: 2 global top       #Clock -> accessible only by global nets in this case) 72 93 T
(# Class 0 is LUT inputs, class 1 is the output, class 2 is the clock) 72 71 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "14" 14
%%Page: "15" 15
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 54 540 54 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(VPR and VP) 72 42.62 T
(ack User\325) 113.22 42.62 T
(s Manual \050V) 143.65 42.62 T
(ersion 4.22\051) 182.75 42.62 T
(February 17, 1999) 276.56 42.62 T
(15) 532 42.62 T
2 9 Q
(# in this case.) 72 714 T
(subblocks_per_clb 2          # Two BLEs in each logic block) 72 692 T
(subblock_lut_size 4          # The LUT in a BLE has 4 inputs) 72 681 T
0 11 Q
0.16 (Notice that all the inputs are of the same class, indicating the) 93.6 651.67 P
0.16 (y are all logically equi) 362.84 651.67 P
0.16 (v) 461.58 651.67 P
0.16 (alent, and all the) 466.81 651.67 P
0.05 (outputs are of the same class, indicating the) 72 634.67 P
0.05 (y are also logically equi) 264.05 634.67 P
0.05 (v) 369.06 634.67 P
0.05 (alent.  This is true of all cluster) 374.29 634.67 P
0.05 (-based) 511.29 634.67 P
1.34 (logic blocks, as the local routing within the block pro) 72 617.67 P
1.34 (vides full connecti) 318.57 617.67 P
1.34 (vity) 402.25 617.67 P
1.34 (.  Ho) 418.65 617.67 P
1.34 (we) 442.76 617.67 P
1.34 (v) 455.31 617.67 P
1.34 (er) 460.64 617.67 P
1.34 (, for most logic) 468.75 617.67 P
-0.02 (blocks all the inputs and all the outputs are) 72 600.67 P
3 F
-0.02 (not) 262.75 600.67 P
0 F
-0.02 (logically equi) 279.54 600.67 P
-0.02 (v) 339.43 600.67 P
-0.02 (alent.  F) 344.66 600.67 P
-0.02 (or e) 380.2 600.67 P
-0.02 (xample, consider the logic block) 396.8 600.67 P
0.18 (in Figure 6, which consists of a 3-input and g) 72 583.67 P
0.18 (ate and a 2-input or g) 272.78 583.67 P
0.18 (ate.  In this case, the set {in1, in2, in3}) 367.41 583.67 P
0.31 (is logically equi) 72 566.67 P
0.31 (v) 142.62 566.67 P
0.31 (alent, and could all be made class 0.  Similarly) 147.84 566.67 P
0.31 (, the set {in4, in5} is logically equi) 354.9 566.67 P
0.31 (v) 510.64 566.67 P
0.31 (alent,) 515.86 566.67 P
-0.01 (and could be made class 1.  Out1 and out2 are ob) 72 549.67 P
-0.01 (viously not logically equi) 287.98 549.67 P
-0.01 (v) 399.81 549.67 P
-0.01 (alent, so each must be a dif) 405.03 549.67 P
-0.01 (fer-) 524.13 549.67 P
(ent class, say class 2 and class 3.) 72 532.67 T
2 9 Q
(inpin class: 0  top       #in1) 72 506 T
(inpin class: 0  left      #in2) 72 495 T
(inpin class: 0  right     #in3) 72 484 T
(inpin class: 1  bottom    #in4) 72 473 T
(inpin class: 1  right     #in5) 72 462 T
(outpin class: 2  left     #out1) 72 451 T
(outpin class: 3  top      #out2) 72 440 T
0 11 Q
0.96 (If we w) 93.6 416.67 P
0.96 (ant to perform timing analysis on the logic block of Figure 6, we must describe the timing) 129 416.67 P
0.89 (relationship between the inputs and outputs.  Clearly out1 depends only on in1, in2 and in3, while out2) 72 399.67 P
0.28 (depends only on in4 and in5.  Therefore we could model this logic block as consisting of tw) 72 382.67 P
0.28 (o BLEs, with) 481.08 382.67 P
(each BLE ha) 72 365.67 T
(ving 3 inputs.) 128.6 365.67 T
2 9 Q
(subblocks_per_clb 2) 72 350 T
(subblock_lut_size 3) 72 339 T
0 11 Q
(One line of a .net \336le of a circuit made out of such logic blocks might therefore be:) 93.6 315.67 T
2 9 Q
(.clb block_1) 72 300 T
(pinlist:  in1 in2 in3 in4 in5  out1  out2) 93.6 289 T
(subblock: and_gate 0 1 2 5 open     # out1 depends on in1, in2 and in3,) 93.6 278 T
(                                        # and is not registered.) 72 267 T
(subblock: or_gate 3 4 open 6 open   # out2 depends on in4 and in5) 93.6 256 T
(                                        # and is not registered.) 72 245 T
72 63 540 720 C
0 0 0 1 0 0 0 K
90 63 522 211.31 C
0 0 0 1 0 0 0 K
247 87.58 347.84 190.08 R
6 X
0 0 0 1 0 0 0 K
V
0.5 H
2 Z
0 X
N
7 X
0 90 41 18 279 114.59 G
0 X
0 90 41 18 279 114.59 A
7 X
270 360 41 18 279 114.59 G
0 X
270 360 41 18 279 114.59 A
279.81 132.59 M
 294.67 124.84 295.88 106.36 279.5 97.58 D
7 X
V
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 X
90 450 18.64 18 271.36 115.31 G
1 11 Q
0 X
(Figur) 136.93 69.65 T
(e 6:) 163.01 69.65 T
0 F
(Example logic block where many pins are not logically equivalent.) 182.56 69.65 T
303.67 184.26 276.67 184.26 276.67 148.26 303.67 148.26 4 L
7 X
V
0 X
N
7 X
0 90 18 18 303.67 166.26 G
0 X
0 90 18 18 303.67 166.26 A
7 X
270 360 19 18 302.67 166.26 G
0 X
270 360 19 18 302.67 166.26 A
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
277 178.41 231.17 178.41 2 L
N
275.83 166.24 230.33 166.24 2 L
N
277.17 154.08 229.5 154.08 2 L
N
287 125.08 233.67 125.08 2 L
N
287 105.08 231.17 105.08 2 L
N
320.33 114.24 362.83 114.24 2 L
N
322 165.91 363.67 165.91 2 L
N
0 10 Q
(in1) 213.67 175.91 T
(in2) 213.67 163.41 T
(in3) 212.83 151.74 T
(in4) 215.33 123.41 T
(in5) 214.5 101.74 T
(out1) 367 161.74 T
(out2) 367.83 111.74 T
0 0 0 1 0 0 0 K
J
72 63 540 720 C
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "15" 15
%%Page: "16" 16
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 54 540 54 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(VPR and VP) 72 42.62 T
(ack User\325) 113.22 42.62 T
(s Manual \050V) 143.65 42.62 T
(ersion 4.22\051) 182.75 42.62 T
(February 17, 1999) 276.56 42.62 T
(16) 532 42.62 T
1 12 Q
(6.2.3  Detailed Routing Ar) 72 712 T
(chitectur) 205.78 712 T
(e Description) 251.54 712 T
0 11 Q
0.43 (The follo) 93.6 690.67 P
0.43 (wing information is only required to be in the architecture description \336le if combined glo-) 134.39 690.67 P
0.71 (bal/detailed routing is to be performed.  Note that currently combined global/detailed routing is possible) 72 673.67 P
(only when all channels ha) 72 656.67 T
(v) 186.04 656.67 T
(e been speci\336ed to ha) 191.37 656.67 T
(v) 285.85 656.67 T
(e the same width.) 291.19 656.67 T
1 F
1.04 (switch_block_type {subset | wilton | uni) 93.6 639.67 P
1.04 (v) 282.35 639.67 P
1.04 (ersal}:) 287.74 639.67 P
0 F
1.04 (All the switch blocks [9] ha) 325.92 639.67 P
1.04 (v) 452.8 639.67 P
1.04 (e F) 458.14 639.67 P
0 8.8 Q
0.83 (s) 472.93 636.92 P
0 11 Q
1.04 ( = 3.  That is,) 476.35 639.67 P
-0.26 (whene) 72 622.67 P
-0.26 (v) 100.43 622.67 P
-0.26 (er horizontal and v) 105.77 622.67 P
-0.26 (ertical channels intersect, each wire se) 187.61 622.67 P
-0.26 (gment can connect to three other wire se) 354.74 622.67 P
-0.26 (g-) 530.84 622.67 P
0.84 (ments.  The e) 72 605.67 P
0.84 (xact topology of which wire se) 133.61 605.67 P
0.84 (gment connects to which can be one of three choices.  The) 273.58 605.67 P
3 F
0.21 (subset) 72 588.67 P
0 F
0.21 ( switch box is the planar or domain-based switch box used in the Xilinx 4000 FPGAs -- a wire se) 99.5 588.67 P
0.21 (g-) 530.84 588.67 P
0.74 (ment in track 0 can only connect to other wire se) 72 571.67 P
0.74 (gments in track 0 and so on.  The) 293.7 571.67 P
3 F
0.74 (wilton) 449.46 571.67 P
0 F
0.74 (switch box is) 480.46 571.67 P
-0.09 (described in [10], while the) 72 554.67 P
3 F
-0.09 (univer) 194.97 554.67 P
-0.09 (sal) 222.96 554.67 P
0 F
-0.09 ( switch box is described in [11].  T) 235.8 554.67 P
-0.09 (o see the topology of a switch box,) 387.26 554.67 P
0.5 (simply hit the \322T) 72 537.67 P
0.5 (oggle RR\323 b) 147.5 537.67 P
0.5 (utton when a completed routing is on screen in VPR.  In general the wilton) 203.29 537.67 P
(switch box is the best of these three topologies and leads to the most routable FPGAs.) 72 520.67 T
1 F
1.28 (Fc_type {absolute | fractional}:) 93.6 503.67 P
0 F
1.28 (Indicates whether the three F) 250.72 503.67 P
0 8.8 Q
1.03 (c) 383.54 500.92 P
0 11 Q
1.28 ( [9] v) 387.45 503.67 P
1.28 (alues \050see belo) 413.56 503.67 P
1.28 (w\051 should be) 480.61 503.67 P
1 (interpreted as the number of tracks to which each pin connects \050) 72 486.67 P
3 F
1 (absolute) 364.36 486.67 P
0 F
1 (\051, or the fraction of tracks in a) 401.64 486.67 P
(channel to which each pin connects \050) 72 469.67 T
3 F
(fr) 234.51 469.67 T
(actional\051) 241.69 469.67 T
0 F
(.) 281.41 469.67 T
1 F
0.81 (Fc_input <\337oat>:) 93.6 452.67 P
0 F
0.81 (Sets the number of tracks to which each logic block input pin connects in each) 183.44 452.67 P
0.45 (channel bordering the pin.  The F) 72 435.67 P
0 8.8 Q
0.36 (c) 221.64 432.92 P
0 11 Q
0.45 ( v) 225.54 435.67 P
0.45 (alue used is al) 233.97 435.67 P
0.45 (w) 297.22 435.67 P
0.45 (ays the minimum of the speci\336ed F) 305.05 435.67 P
0 8.8 Q
0.36 (c) 462.96 432.92 P
0 11 Q
0.45 ( and the channel) 466.87 435.67 P
(width, W) 72 418.67 T
(, so you can set F) 111.93 418.67 T
0 8.8 Q
(c) 188.31 415.92 T
0 11 Q
( to be huge if you w) 192.22 418.67 T
(ant F) 280.1 418.67 T
0 8.8 Q
(c) 302.41 415.92 T
0 11 Q
( to al) 306.32 418.67 T
(w) 328.2 418.67 T
(ays be W) 336.04 418.67 T
(.) 375.96 418.67 T
1 F
0.13 (Fc_output <\337oat>:) 93.6 401.67 P
0 F
0.13 (Sets the number of tracks to which each logic block output pin connects in each) 187.49 401.67 P
(channel bordering the pin.) 72 384.67 T
1 F
0.2 (Fc_pad <\337oat>:) 93.6 367.67 P
0 F
0.2 (Sets the number of tracks to which each I/O pad connects in the channel bordering) 174.27 367.67 P
(the pad.) 72 350.67 T
1 F
1.23 (segment fr) 97.58 333.67 P
1.23 (equency: <\337oat>  length: <int | longline>  wir) 148.39 333.67 P
1.23 (e_switch: <int>  opin_switch: <int>) 369.46 333.67 P
(Frac_cb: <\337oat>  Frac_sb: <\337oat>  Rmetal: <\337oat>  Cmetal: <\337oat>) 72 316.67 T
0 F
0.44 (Describes a type of se) 72 299.67 P
0.44 (gment.  Y) 170.13 299.67 P
0.44 (ou can specify as man) 213.5 299.67 P
0.44 (y types of se) 312.24 299.67 P
0.44 (gments as you lik) 368.7 299.67 P
0.44 (e -- just use one se) 447.23 299.67 P
0.44 (g-) 530.84 299.67 P
(ment line for each.  The meaning of each v) 72 282.67 T
(alue is:) 260.51 282.67 T
(\245) 93.6 265.67 T
3 F
-0.13 (fr) 104.4 265.67 P
-0.13 (equency:) 111.33 265.67 P
0 F
-0.13 (  The fraction \050from 0 to 1\051 of routing tracks composed of this type of se) 151.03 265.67 P
-0.13 (gment.  The sum) 466.46 265.67 P
0.9 (of the frequenc) 104.4 248.67 P
0.9 (y v) 172.62 248.67 P
0.9 (alues for all the se) 187 248.67 P
0.9 (gment lines must be 1 -- i. e. 100% of the tracks ha) 270.49 248.67 P
0.9 (v) 505.36 248.67 P
0.9 (e been) 510.69 248.67 P
(described.) 104.4 231.67 T
(\245) 93.6 214.67 T
3 F
-0.2 (length:) 104.4 214.67 P
0 F
-0.2 (  Either the number of logic blocks spanned by each se) 135.56 214.67 P
-0.2 (gment, or the k) 373.58 214.67 P
-0.2 (e) 439.46 214.67 P
-0.2 (yw) 444.18 214.67 P
-0.2 (ord) 457.51 214.67 P
3 F
-0.2 (longline) 474.72 214.67 P
0 F
-0.2 (.  Lon-) 510.77 214.67 P
(gline means se) 104.4 197.67 T
(gments of this  type span the entire FPGA array) 169 197.67 T
(.) 378.18 197.67 T
(\245) 93.6 180.67 T
3 F
0.11 (wir) 104.4 180.67 P
0.11 (e_switc) 118.67 180.67 P
0.11 (h:) 151.5 180.67 P
0 F
0.11 (  The inde) 160.66 180.67 P
0.11 (x of the switch type used by other wiring se) 205.14 180.67 P
0.11 (gments to dri) 398.16 180.67 P
0.11 (v) 456.17 180.67 P
0.11 (e this type of se) 461.5 180.67 P
0.11 (g-) 530.84 180.67 P
1.23 (ment.  That is, switches going) 104.4 163.67 P
6 F
1.23 (to) 246.2 163.67 P
0 F
1.23 ( this se) 254.76 163.67 P
1.23 (gment from other pieces of wiring will use this type of) 287.6 163.67 P
(switch.) 104.4 146.67 T
(\245) 93.6 129.67 T
3 F
-0.17 (opin_switc) 104.4 129.67 P
-0.17 (h:) 151.91 129.67 P
0 F
-0.17 (The inde) 166.23 129.67 P
-0.17 (x of the switch type used by clb and pad output pins to dri) 204.69 129.67 P
-0.17 (v) 457.31 129.67 P
-0.17 (e this type of se) 462.64 129.67 P
-0.17 (g-) 530.84 129.67 P
(ment.) 104.4 112.67 T
(\245) 93.6 95.67 T
3 F
0.9 (F) 104.4 95.67 P
0.9 (r) 110.52 95.67 P
0.9 (ac_cb:) 114.63 95.67 P
0 F
0.9 (  Describes the internal population of the se) 144.56 95.67 P
0.9 (gment for connection box) 342.87 95.67 P
0.9 (es \050connections to) 458.76 95.67 P
0.25 (logic blocks\051.  This number gi) 104.4 78.67 P
0.25 (v) 237.98 78.67 P
0.25 (es the fraction \050from 0 to 1\051 of logic blocks passed by this se) 243.32 78.67 P
0.25 (gment) 512.5 78.67 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "16" 16
%%Page: "17" 17
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 54 540 54 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(VPR and VP) 72 42.62 T
(ack User\325) 113.22 42.62 T
(s Manual \050V) 143.65 42.62 T
(ersion 4.22\051) 182.75 42.62 T
(February 17, 1999) 276.56 42.62 T
(17) 532 42.62 T
0 11 Q
0.09 (to which it will ha) 104.4 570.8 P
0.09 (v) 184.59 570.8 P
0.09 (e a connection box.  A switch e) 189.93 570.8 P
0.09 (xists from a se) 328.46 570.8 P
0.09 (gment to a logic block pin only if) 392.41 570.8 P
0.35 (\0501\051 the se) 104.4 553.8 P
0.35 (gment w) 145.87 553.8 P
0.35 (ants a connection box to that logic block and \0502\051 the logic block connection box) 184.31 553.8 P
(pattern for that pin w) 104.4 536.8 T
(ants a connection to that se) 197.16 536.8 T
(gment.) 315.84 536.8 T
(\245) 93.6 519.8 T
3 F
0.47 (F) 104.4 519.8 P
0.47 (r) 110.52 519.8 P
0.47 (ac_sb:) 114.63 519.8 P
0 F
0.47 (  Describes the internal population of the se) 143.96 519.8 P
0.47 (gment for switch box) 338.78 519.8 P
0.47 (es \050connections to other) 433.81 519.8 P
0.05 (routing tracks\051.  This number gi) 104.4 502.8 P
0.05 (v) 244.29 502.8 P
0.05 (es the fraction \050from 0 to 1\051 of the length + 1 switch blocks which) 249.62 502.8 P
0.77 (could e) 104.4 485.8 P
0.77 (xist along the se) 137.08 485.8 P
0.77 (gment that do in f) 210.41 485.8 P
0.77 (act e) 291.59 485.8 P
0.77 (xist.  So, a se) 312.65 485.8 P
0.77 (gment of length 9 that had a Frac_sb) 373.62 485.8 P
0.19 (v) 104.4 468.8 P
0.19 (alue of 0.5 w) 109.62 468.8 P
0.19 (ould ha) 167.51 468.8 P
0.19 (v) 200.17 468.8 P
0.19 (e 5 switch box) 205.5 468.8 P
0.19 (es along its length.  Exactly which tracks a se) 269.75 468.8 P
0.19 (gment connects) 471.07 468.8 P
(to at each switch box is determined by the) 104.4 451.8 T
3 F
(switc) 292.29 451.8 T
(h_box_type) 314.74 451.8 T
0 F
( parameter) 365.45 451.8 T
(.) 411.58 451.8 T
(\245) 93.6 434.8 T
3 F
0.79 (Rmetal:) 104.4 434.8 P
0 F
0.79 (  Resistance per unit length \050in terms of logic blocks\051 of this wiring track, in Ohms.  F) 139.23 434.8 P
0.79 (or) 530.84 434.8 P
0.9 (e) 104.4 417.8 P
0.9 (xample, a se) 109.12 417.8 P
0.9 (gment of length 5 with Rmetal = 10 Ohms / logic block w) 165.44 417.8 P
0.9 (ould ha) 431.07 417.8 P
0.9 (v) 464.44 417.8 P
0.9 (e an end-to-end) 469.78 417.8 P
(resistance of 50 Ohms.) 104.4 400.8 T
(\245) 93.6 383.8 T
3 F
0.22 (Cmetal:) 104.4 383.8 P
0 F
0.22 (  Capacitance per unit length \050in terms of logic blocks\051 of this wiring track, in F) 139.84 383.8 P
0.22 (arads.  F) 492.99 383.8 P
0.22 (or) 530.84 383.8 P
-0.19 (e) 104.4 366.8 P
-0.19 (xample, a se) 109.12 366.8 P
-0.19 (gment of length 5 with Cmetal = 2e-14 F / logic block w) 163.26 366.8 P
-0.19 (ould ha) 409.67 366.8 P
-0.19 (v) 441.96 366.8 P
-0.19 (e a total metal capac-) 447.29 366.8 P
(itance of 10e-13F) 104.4 349.8 T
(.) 181.11 349.8 T
(F) 93.6 332.8 T
(or e) 99.55 332.8 T
(xample, let\325) 116.18 332.8 T
(s say an architecture \336le describes tw) 168.12 332.8 T
(o types of se) 331.75 332.8 T
(gments.) 386.88 332.8 T
2 9 Q
(segment frequency: 0.5  length: 2  wire_switch: 0  opin_switch: 0  Frac_cb: 1. \134) 72 306.13 T
(                   Frac_sb: 0.666  Rmetal: 5  Cmetal: 5e-15) 72 295.13 T
(segment frequency: 0.5  length: 4  wire_switch: 0  opin_switch: 0  Frac_cb: 0.5 \134) 72 284.13 T
(                   Frac_sb: 1.  Rmetal: 3  Cmetal: 2e-15) 72 273.13 T
0 11 Q
0.25 (If the FPGA you wish to route has a channel width of 4, one channel will look as sho) 93.6 249.8 P
0.25 (wn in Figure 7.) 472.04 249.8 P
0.05 (Notice that 2 tracks \05050% of the tracks\051 are se) 72 232.8 P
0.05 (gments of length 2, and 2 tracks are se) 273.55 232.8 P
0.05 (gments of length four) 442.7 232.8 P
0.05 (.) 537.25 232.8 P
1.16 (Also notice that the number of switch box) 72 215.8 P
1.16 (es and connection box) 264.79 215.8 P
1.16 (es along each se) 366.17 215.8 P
1.16 (gment has been set in) 440.65 215.8 P
(accordance with the Frac_sb and Frac_cb v) 72 198.8 T
(alues for each se) 262.33 198.8 T
(gment type.) 335.16 198.8 T
1 F
(switch <int>  b) 93.6 181.8 T
(uffer) 163.07 181.8 T
(ed: { y) 186.08 181.8 T
(es | no }  R: <\337oat>  Cin: <\337oat>  Cout: <\337oat>  Tdel: <\337oat>) 215.96 181.8 T
0 F
-0.03 (Describes a a type of switch.  This statement de\336nes what a certain type of switch is -- se) 72 164.8 P
-0.03 (gment statements) 463.33 164.8 P
0.68 (refer to a switch types by their number \050the number right after the switch k) 72 147.8 P
0.68 (e) 410.11 147.8 P
0.68 (yw) 414.83 147.8 P
0.68 (ord\051.  The v) 428.16 147.8 P
0.68 (arious v) 481.86 147.8 P
0.68 (alues) 517.4 147.8 P
(are:) 72 130.8 T
(\245) 93.6 113.8 T
3 F
(b) 104.4 113.8 T
(uf) 109.68 113.8 T
(fer) 118.04 113.8 T
(ed:) 129.85 113.8 T
0 F
(  yes, if this switch is a tri-state b) 143.9 113.8 T
(uf) 288.51 113.8 T
(fer) 297.39 113.8 T
(, no if this switch is a pass transistor) 309.17 113.8 T
(.) 467.75 113.8 T
(\245) 93.6 96.8 T
3 F
(R:) 104.4 96.8 T
0 F
(  resistance of the switch.) 114.78 96.8 T
(\245) 93.6 79.8 T
3 F
(Cin:) 104.4 79.8 T
0 F
(  Input capacitance of the switch.) 123.96 79.8 T
72 63 540 720 C
0 0 0 1 0 0 0 K
72 578.13 540 720 C
0 0 0 1 0 0 0 K
101.43 689.29 128.43 716.29 R
6 X
0 0 0 1 0 0 0 K
V
0.5 H
2 Z
0 X
N
151.57 689.29 178.57 716.29 R
6 X
V
0 X
N
201.71 689.29 228.71 716.29 R
6 X
V
0 X
N
251.86 689.29 278.86 716.29 R
6 X
V
0 X
N
302 689.29 329 716.29 R
6 X
V
0 X
N
352.14 689.29 379.14 716.29 R
6 X
V
0 X
N
102.14 675.57 178.57 675.57 2 L
2 H
N
202.29 675.57 278.71 675.57 2 L
N
303.14 675.57 379.57 675.57 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
153 658.97 229.43 658.97 2 L
N
253.14 658.97 329.57 658.97 2 L
N
354 658.97 400 658.97 2 L
N
82 658.97 128 658.97 2 L
N
103.57 641.31 278.57 641.31 2 L
N
304.43 641.31 400 641.31 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
380.86 625 205.86 625 2 L
N
180 625 84.43 625 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
180 671.57 201.43 680.85 R
0.5 H
N
180 680.85 201.43 671.57 2 L
N
201.43 680.85 180 671.57 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
280.14 671.42 301.57 680.71 R
N
280.14 680.71 301.57 671.42 2 L
N
301.57 680.71 280.14 671.42 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
380.29 671.28 401.72 680.57 R
N
380.29 680.57 401.72 671.28 2 L
N
401.72 680.57 380.29 671.28 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
129.14 654.83 150.57 664.12 R
N
129.14 664.12 150.57 654.83 2 L
N
150.57 664.12 129.14 654.83 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
230.71 653.97 252.14 663.26 R
N
230.71 663.26 252.14 653.97 2 L
N
252.14 663.26 230.71 653.97 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
330.14 654.54 351.57 663.83 R
N
330.14 663.83 351.57 654.54 2 L
N
351.57 663.83 330.14 654.54 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
436.72 687 458.15 696.28 R
N
436.72 696.28 458.14 687 2 L
N
458.14 696.28 436.72 687 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
280.43 637.73 301.86 647.02 R
N
280.43 647.02 301.86 637.73 2 L
N
301.86 647.02 280.43 637.73 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
80.57 636.88 102 646.16 R
N
80.57 646.16 102 636.88 2 L
N
102 646.16 80.57 636.88 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
182.14 620.85 203.57 630.14 R
N
182.14 630.14 203.57 620.85 2 L
N
203.57 630.14 182.14 620.85 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
380.86 620 402.29 629.28 R
N
380.86 629.28 402.29 620 2 L
N
402.29 629.28 380.86 620 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
79 671.85 100.43 681.14 R
N
79 681.14 100.43 671.85 2 L
N
100.43 681.14 79 671.85 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
230.86 620 252.29 629.28 R
N
230.86 629.28 252.29 620 2 L
N
252.29 629.28 230.86 620 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
281.71 619.85 303.14 629.14 R
N
281.71 629.14 303.14 619.85 2 L
N
303.14 629.14 281.71 619.85 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
330.43 620.43 351.86 629.71 R
N
330.43 629.71 351.86 620.43 2 L
N
351.86 629.71 330.43 620.43 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
129.86 620.28 151.29 629.57 R
N
129.86 629.57 151.29 620.28 2 L
N
151.29 629.57 129.86 620.28 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
80.71 620.14 102.14 629.43 R
N
80.71 629.43 102.14 620.14 2 L
N
102.14 629.43 80.71 620.14 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
182.29 638.02 203.71 647.31 R
N
182.29 647.31 203.71 638.02 2 L
N
203.71 647.31 182.29 638.02 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
231 637.16 252.43 646.45 R
N
231 646.45 252.43 637.16 2 L
N
252.43 646.45 231 637.16 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
130 637.45 151.43 646.73 R
N
130 646.73 151.43 637.45 2 L
N
151.43 646.73 130 637.45 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
380.29 636.45 401.72 645.73 R
N
380.29 645.73 401.72 636.45 2 L
N
401.72 645.73 380.29 636.45 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
329.86 637.59 351.29 646.88 R
N
329.86 646.88 351.29 637.59 2 L
N
351.29 646.88 329.86 637.59 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
90 450 4.64 4.64 115.5 676.07 A
112.4 678.39 118.6 672.97 2 L
N
117.82 678.39 113.18 673.75 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
90 450 4.64 4.64 164.93 675.92 A
161.83 678.25 168.02 672.83 2 L
N
167.25 678.25 162.61 673.6 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
90 450 4.64 4.64 215.79 676.5 A
212.69 678.82 218.88 673.4 2 L
N
218.11 678.82 213.46 674.18 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
90 450 4.64 4.64 265.21 676.35 A
262.12 678.68 268.31 673.26 2 L
N
267.54 678.68 262.89 674.03 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
90 450 4.64 4.64 316.79 676.92 A
313.69 679.25 319.88 673.83 2 L
N
319.11 679.25 314.46 674.6 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
90 450 4.64 4.64 366.22 676.07 A
363.12 678.39 369.31 672.97 2 L
N
368.54 678.39 363.89 673.75 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
90 450 4.64 4.64 366.36 658.78 A
363.26 661.1 369.45 655.69 2 L
N
368.68 661.1 364.04 656.46 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
90 450 4.64 4.64 316.5 658.64 A
313.41 660.96 319.6 655.54 2 L
N
318.82 660.96 314.18 656.32 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
90 450 4.64 4.64 265.93 659.21 A
262.83 661.53 269.02 656.12 2 L
N
268.25 661.53 263.61 656.89 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
90 450 4.64 4.64 215.36 658.35 A
212.26 660.68 218.45 655.26 2 L
N
217.68 660.68 213.04 656.03 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
90 450 4.64 4.64 164.79 658.21 A
161.69 660.53 167.88 655.12 2 L
N
167.11 660.53 162.46 655.89 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
90 450 4.64 4.64 115.64 658.78 A
112.55 661.1 118.74 655.69 2 L
N
117.96 661.1 113.32 656.46 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
90 450 4.64 4.64 316.5 641.5 A
313.41 643.82 319.6 638.4 2 L
N
318.82 643.82 314.18 639.18 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
90 450 4.64 4.64 265.93 642.07 A
262.83 644.39 269.02 638.97 2 L
N
268.25 644.39 263.61 639.75 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
90 450 4.64 4.64 116 642 A
112.9 644.32 119.09 638.9 2 L
N
118.32 644.32 113.68 639.68 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
90 450 4.64 4.64 166.14 625.43 A
163.05 627.75 169.24 622.33 2 L
N
168.46 627.75 163.82 623.11 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
90 450 4.64 4.64 215.57 625.28 A
212.48 627.61 218.67 622.19 2 L
N
217.89 627.61 213.25 622.96 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
90 450 4.64 4.64 367.86 625.14 A
364.76 627.46 370.95 622.05 2 L
N
370.18 627.46 365.54 622.82 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
90 450 4.64 4.64 448.43 673.14 A
445.33 675.46 451.52 670.05 2 L
N
450.75 675.46 446.11 670.82 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(Switch Box) 466.43 688.71 T
(Connection Box) 462.14 670.14 T
1 11 Q
(Figur) 126.69 597.81 T
(e 7:) 152.77 597.81 T
0 F
(Example of a segmented routing channel with four tracks per channel.) 172.32 597.81 T
0 0 0 1 0 0 0 K
72 63 540 720 C
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "17" 17
%%Page: "18" 18
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 54 540 54 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(VPR and VP) 72 42.62 T
(ack User\325) 113.22 42.62 T
(s Manual \050V) 143.65 42.62 T
(ersion 4.22\051) 182.75 42.62 T
(February 17, 1999) 276.56 42.62 T
(18) 532 42.62 T
0 11 Q
(\245) 93.6 712.67 T
3 F
(Cout:) 104.4 712.67 T
0 F
( Output capacitance of the switch.) 132.21 712.67 T
(\245) 93.6 695.67 T
3 F
0.06 (Tdel:) 104.4 695.67 P
0 F
0.06 (  Intrinsic delay through the switch.  If this switch w) 127.62 695.67 P
0.06 (as dri) 357.95 695.67 P
0.06 (v) 381.88 695.67 P
0.06 (en by a zero resistance source, and) 387.21 695.67 P
(dro) 104.4 678.67 T
(v) 118.9 678.67 T
(e a zero capacitance load, its delay w) 124.23 678.67 T
(ould be Tdel + R * Cout.) 287.23 678.67 T
1 F
0.37 (R_minW_nmos <\337oat>) 93.6 650.67 P
0 F
0.37 (:  The resistance of minimum-width nmos transistor) 203.38 650.67 P
0.37 (.  This data is used only) 433.59 650.67 P
(by the area model b) 72 633.67 T
(uilt into VPR.) 158.54 633.67 T
1 F
0.37 (R_minW_pmos <\337oat>) 93.6 616.67 P
0 F
0.37 (:  The resistance of minimum-width pmos transistor) 203.38 616.67 P
0.37 (.  This data is used only) 433.59 616.67 P
(by the area model b) 72 599.67 T
(uilt into VPR.) 158.54 599.67 T
(The lines belo) 93.6 571.67 T
(w gi) 155.65 571.67 T
(v) 174.63 571.67 T
(e an e) 179.96 571.67 T
(xample of a detailed routing description from a .arch \336le.) 205.45 571.67 T
2 9 Q
(switch_block_type planar   # Uses the fewest switches on a segmented architecture.) 72 545 T
(Fc_type fractional         # Fc values below are in terms of fraction of W.) 72 534 T
(Fc_output 1.    # clb output pins connect to all W tracks in adjacent channels) 72 512 T
(                # \050if each of those tracks wants a connection box there\051.) 72 501 T
(Fc_input  0.5   # clb input pins connect to half \0500.5 * W\051 of adjacent tracks) 72 479 T
(                # \050if each of those tracks wants a connection box there\051.) 72 468 T
(Fc_pad    0.7   # I/O pads connect to 70% \0500.7 * W\051 of adjacent tracks) 72 446 T
(                # \050if each of those tracks wants a connection box there\051.) 72 435 T
(# 50% of segments are length 2, 50% are length 4.  Length two segments are driven by) 72 413 T
(# type 1 switches when the connection is coming from another wire, and are driven) 72 402 T
(# by type 0 switches when the connection comes from a clb output pin.) 72 391 T
(# The length four segments are always driven by type 0 switches.) 72 380 T
(segment frequency: 0.5 length: 2 wire_switch: 1  opin_switch: 0  Frac_cb: 1. \134) 72 358 T
(                    Frac_sb: 0.666  Rmetal: 5  Cmetal: 5e-15) 72 347 T
(segment frequency: 0.5 length: 4  Frac_cb: 0.5 Frac_sb: 1. Rmetal: 3 \134) 72 336 T
(                    Cmetal: 2e-15) 72 325 T
(# In this case, type 1 switches are pass transistors, while type 0 switches are) 72 303 T
(# tri-state buffers.) 72 292 T
(switch 1  buffered: no  R: 100 Cin: 2e-15  Cout: 2e-15 Tdel: 0      # Pass transistor) 72 270 T
(switch 0  buffered: yes  R: 50 Cin: .5e-15  Cout: 4e-15 Tdel: 1e-11 # Tri-state buffer) 72 259 T
(R_minW_nmos 100     # Used by area model.  Min-width transistor resistances.) 72 237 T
(R_minW_pmos 200) 72 226 T
1 12 Q
(6.2.4  T) 72 190 T
(iming Analysis P) 109.79 190 T
(arameters) 195.68 190 T
0 11 Q
0.27 (The follo) 93.6 168.67 P
0.27 (wing parameters are required if timing analysis is to be performed on the placed and routed) 134.23 168.67 P
(circuit, or the timing-dri) 72 151.67 T
(v) 178.05 151.67 T
(en router is to be used.) 183.39 151.67 T
1 F
-0.05 (C_ipin_cblock <\337oat>:  I) 93.6 134.67 P
0 F
-0.05 (nput capacitance of the b) 210.81 134.67 P
-0.05 (uf) 320.36 134.67 P
-0.05 (fer isolating a routing track from the connection) 329.25 134.67 P
-0.11 (box) 72 117.67 P
-0.11 (es \050multiple) 88.33 117.67 P
-0.11 (x) 140.31 117.67 P
-0.11 (ers\051 that select the signal to be connected to an logic block input pin.  One of these b) 145.64 117.67 P
-0.11 (uf) 514.62 117.67 P
-0.11 (fers) 523.51 117.67 P
-0.16 (is inserted in the FPGA for each track at each location at which it connects to a connection box.  F) 72 100.67 P
-0.16 (or e) 500.92 100.67 P
-0.16 (xam-) 517.4 100.67 P
-0.04 (ple, a routing se) 72 83.67 P
-0.04 (gment that spans three logic blocks, and connects to logic blocks at tw) 141.99 83.67 P
-0.04 (o of these three pos-) 450.95 83.67 P
1.26 (sible locations w) 72 66.67 P
1.26 (ould ha) 148.36 66.67 P
1.26 (v) 182.09 66.67 P
1.26 (e tw) 187.43 66.67 P
1.26 (o isolation b) 207.22 66.67 P
1.26 (uf) 263.92 66.67 P
1.26 (fers attached to it.  If a routing track connects to the logic) 272.81 66.67 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "18" 18
%%Page: "19" 19
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 54 540 54 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(VPR and VP) 72 42.62 T
(ack User\325) 113.22 42.62 T
(s Manual \050V) 143.65 42.62 T
(ersion 4.22\051) 182.75 42.62 T
(February 17, 1999) 276.56 42.62 T
(19) 532 42.62 T
0 11 Q
0.72 (blocks both abo) 72 527.99 P
0.72 (v) 142.95 527.99 P
0.72 (e and belo) 148.28 527.99 P
0.72 (w it at some point, only one isolation b) 194.66 527.99 P
0.72 (uf) 371.65 527.99 P
0.72 (fer is inserted at that point.  If your) 380.54 527.99 P
1.57 (connection from routing track to connection block does not include a b) 72 510.99 P
1.57 (uf) 400.92 510.99 P
1.57 (fer) 409.81 510.99 P
1.57 (, set this parameter to the) 421.58 510.99 P
(capaciti) 72 493.99 T
(v) 105.93 493.99 T
(e loading a track w) 111.27 493.99 T
(ould see at each point where it connects to a logic block or blocks.) 194.86 493.99 T
1 F
0.28 (T_ipin_cblock <\337oat>:) 93.6 476.99 P
0 F
0.28 ( Delay to go from a routing track, through the isolation b) 200.85 476.99 P
0.28 (uf) 453.62 476.99 P
0.28 (fer \050if your archi-) 462.51 476.99 P
(tecture contains these\051 and a connection block \050typically a multiple) 72 459.99 T
(x) 366.65 459.99 T
(er\051 to a logic block input pin.) 371.98 459.99 T
1 F
(T_ipad <\337oat>:) 93.6 442.99 T
0 F
( Delay through an input pad.) 169.71 442.99 T
1 F
(T_opad <\337oat>:) 93.6 425.99 T
0 F
(Delay through an output pad.) 172.15 425.99 T
1 F
-0 (T_clb_ipin_to_sblk_ipin <\337oat>:) 93.6 408.99 P
0 F
-0 (Delay from an input pin of a clb \050logic block\051 to an input pin of a) 253.15 408.99 P
1.12 (subblock within that clb) 72 391.99 P
1.12 (.  F) 180.95 391.99 P
1.12 (or architectures without local routing \050i.e. clb input pins connect directly to) 197.4 391.99 P
(some logic element, lik) 72 374.99 T
(e a LUT or multiple) 174.55 374.99 T
(x) 262.38 374.99 T
(er\051 this delay is essentially zero.) 267.71 374.99 T
1 F
-0.19 (T_sblk_opin_to_sblk_ipin <\337oat>:) 93.6 357.99 P
0 F
-0.19 (  Delay from the output of a subblock to the input of another sub-) 255.42 357.99 P
-0.02 (block within the same clb) 72 340.99 P
-0.02 (.  F) 184.52 340.99 P
-0.02 (or architectures without local routing \050e.g. the output of one subblock is hard-) 198.68 340.99 P
(wired to the input of another\051 this delay is essentially zero.) 72 323.99 T
1 F
-0 (T_sblk_opin_to_clb_opin <\337oat>:) 93.6 306.99 P
0 F
-0 (Delay from the output of a subblock to a clb \050logic block\051 output) 255.28 306.99 P
-0.03 (pin.  F) 72 289.99 P
-0.03 (or architectures without local routing \050e.g. the output of a LUT is hardwired to each logic block out-) 100.21 289.99 P
(put\051, this delay is essentially zero.) 72 272.99 T
72 63 540 720 C
0 0 0 1 0 0 0 K
72 535.32 540 720 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(Figur) 176.1 556.09 T
(e 8:) 202.18 556.09 T
0 F
(Routing track to logic block connection structure.) 221.73 556.09 T
198.72 626.18 403.29 626.18 2 L
2 H
2 Z
N
295 678 333.57 716.57 R
6 X
V
0.5 H
0 X
N
300.43 631.71 304.71 642.18 309 631.71 3 Y
N
304.43 626.76 304.43 631.9 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
198.72 604.07 403.29 604.07 2 L
2 H
N
307.86 609.59 312.14 620.07 316.43 609.59 3 Y
0.5 H
N
311.86 604.64 311.86 609.78 2 L
N
198.72 581.96 403.29 581.96 2 L
2 H
N
315.28 587.48 319.57 597.96 323.86 587.48 3 Y
0.5 H
N
319.28 582.53 319.28 587.67 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
298.64 649.64 327.79 649.64 323.79 660.5 303.22 660.5 4 Y
N
312.14 673 317.14 678 R
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
305 641.14 305 649.71 2 L
N
312.14 620.43 312.14 649.71 2 L
N
319.29 597.57 319.29 649.71 2 L
N
201.57 678 240.14 716.57 R
6 X
V
0 X
N
218.71 673 223.71 678 R
V
N
376 678 414.57 716.57 R
6 X
V
0 X
N
393.14 673 398.14 678 R
V
N
314.29 660.43 314.29 674 2 L
N
339.09 655.81 339.38 652.85 328.76 654.8 338.8 658.77 4 Y
0 Z
N
339.09 655.81 339.38 652.85 328.76 654.8 338.8 658.77 4 Y
V
339.34 655.83 452.14 666.85 2 L
2 Z
N
0 10 Q
(Connection) 455 670.43 T
(Block) 462.14 660.43 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
203.72 694.83 203.75 697.8 214.09 694.72 203.69 691.85 4 Y
0 Z
N
203.72 694.83 203.75 697.8 214.09 694.72 203.69 691.85 4 Y
V
203.47 694.83 145.71 695.43 2 L
2 Z
N
(Logic Block) 90.71 692.57 T
181.75 605.25 182.26 608.18 191.96 603.44 181.23 602.32 4 Y
0 Z
N
181.75 605.25 182.26 608.18 191.96 603.44 181.23 602.32 4 Y
V
181.5 605.3 136.43 613.28 2 L
2 Z
N
(Routing T) 75.71 611.14 T
(rack) 116.21 611.14 T
339.11 592.7 339.33 589.73 328.76 591.92 338.89 595.67 4 Y
0 Z
N
339.11 592.7 339.33 589.73 328.76 591.92 338.89 595.67 4 Y
V
339.36 592.72 442.14 600.43 2 L
2 Z
N
(Isolation Buf) 451.43 599 T
(fer) 503.68 599 T
0 0 0 1 0 0 0 K
72 63 540 720 C
0 0 612 792 C
72 63 540 720 C
72 63 540 256.31 C
0 0 0 1 0 0 0 K
184.72 84.32 428.81 238.17 R
7 X
0 0 0 1 0 0 0 K
V
0.5 H
2 Z
0 X
N
176.86 187.07 185.1 196.06 R
V
N
176.86 156.54 185.1 165.53 R
V
N
176.86 126.01 185.1 135 R
V
N
176.86 95.48 185.1 104.47 R
V
N
176.86 217.6 185.1 226.59 R
V
N
429.47 126.45 437.71 135.44 R
V
N
429.47 183.23 437.71 192.22 R
V
N
0 10 Q
(CLB) 140 166.74 T
(Inputs) 137.14 152.46 T
(CLB) 444.29 172.46 T
(Outputs) 438.57 161.03 T
269.14 200.76 276.33 207.05 R
V
N
269.14 185.3 276.33 191.59 R
V
N
269.14 169.84 276.33 176.13 R
V
N
324.86 185.12 332.06 191.41 R
V
N
269.14 142.93 276.33 149.22 R
V
N
269.14 127.46 276.33 133.76 R
V
N
269.14 112 276.33 118.29 R
V
N
324.86 127.28 332.06 133.58 R
V
N
418 188.33 418 191.3 428.38 188.33 418 185.35 4 Y
0 Z
N
418 188.33 418 191.3 428.38 188.33 418 185.35 4 Y
V
327.16 188.33 417.75 188.33 2 L
2 Z
N
275.92 167.5 325.27 210.65 R
6 X
V
0 X
N
275.92 109.66 325.27 152.82 R
6 X
V
0 X
N
(Subblock) 279.8 191.74 T
(0) 296.14 181.74 T
(Subblock) 279.96 133.74 T
(1) 296.3 123.74 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
257.08 114.6 257.08 117.57 267.45 114.6 257.08 111.62 4 Y
0 Z
N
257.08 114.6 257.08 117.57 267.45 114.6 257.08 111.62 4 Y
V
185.04 222.46 217.58 222.46 217.58 114.6 256.83 114.6 4 L
2 Z
N
257.89 203.17 257.89 206.15 268.27 203.17 257.89 200.19 4 Y
0 Z
N
257.89 203.17 257.89 206.15 268.27 203.17 257.89 200.19 4 Y
V
217.72 203.17 257.64 203.17 2 L
2 Z
N
259.53 172.46 259.53 175.43 269.91 172.46 259.53 169.48 4 Y
0 Z
N
259.53 172.46 259.53 175.43 269.91 172.46 259.53 169.48 4 Y
V
185.04 161.03 242.22 161.03 242.22 172.46 259.28 172.46 4 L
2 Z
N
418 131.03 418 134 428.38 131.03 418 128.05 4 Y
0 Z
N
418 131.03 418 134 428.38 131.03 418 128.05 4 Y
V
331.26 131.03 417.75 131.03 2 L
2 Z
N
0 8 Q
(T_sblk_opin_to_clb_opin) 333.57 122.46 T
(T_clb_ipin_to_sblk_ipin) 191.43 105.31 T
258.72 131.03 258.72 134 269.09 131.03 258.72 128.05 4 Y
0 Z
N
258.72 131.03 258.72 134 269.09 131.03 258.72 128.05 4 Y
V
185.71 131.03 258.47 131.03 2 L
2 Z
N
258 187.46 258 190.43 268.38 187.46 258 184.48 4 Y
0 Z
N
258 187.46 258 190.43 268.38 187.46 258 184.48 4 Y
V
364.29 188.17 364.29 224.6 238.57 224.6 238.57 187.46 257.75 187.46 5 L
2 Z
N
90 450 2.14 2.14 363.93 188.53 G
90 450 2.14 2.14 363.93 188.53 A
90 450 2.14 2.14 217.64 203.38 G
90 450 2.14 2.14 217.64 203.38 A
(T_sblk_opin_to_sblk_ipin) 255.71 228.88 T
1 11 Q
(Figur) 176.78 67.98 T
(e 9:) 202.86 67.98 T
0 F
(Local routing delays within a logic block \050CLB\051.) 222.41 67.98 T
0 0 0 1 0 0 0 K
72 63 540 720 C
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "19" 19
%%Page: "20" 20
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 54 540 54 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(VPR and VP) 72 42.62 T
(ack User\325) 113.22 42.62 T
(s Manual \050V) 143.65 42.62 T
(ersion 4.22\051) 182.75 42.62 T
(February 17, 1999) 276.56 42.62 T
(20) 532 42.62 T
1 11 Q
(T_sub) 93.6 712.67 T
(block  T_comb: <\337oat>  T_seq_in: <\337oat>  T_seq_out: <\337oat>) 122.84 712.67 T
0 F
1.15 (Describes the delays within a subblock.  There must be one T_subblock line for each subblock a logic) 72 695.67 P
-0.22 (block can contain -- i.e. there must be subblocks_per_clb of these T_subblock lines.  The \336rst line speci\336es) 72 678.67 P
-0.05 (the delays of subblock zero, which is the \336rst subblock listed in each clb in the circuit netlist \336le.  The sec-) 72 661.67 P
0.82 (ond T_subblock line speci\336es the delay of subblock one, \050the second subblock in each clb in the circuit) 72 644.67 P
0.62 (netlist \336le\051, and so on.) 72 627.67 P
3 F
0.62 (If the subbloc) 178.98 627.67 P
0.62 (ks within a clb have dif) 239.88 627.67 P
0.62 (fer) 344.51 627.67 P
0.62 (ent delays then, you must list them in the) 356.33 627.67 P
(same or) 72 610.67 T
(der in the ar) 106.73 610.67 T
(c) 161.01 610.67 T
(hitectur) 165.73 610.67 T
(e and netlist \336les) 199.54 610.67 T
0 F
(.) 273.8 610.67 T
(\245) 93.6 593.67 T
3 F
0.24 (T_comb:) 104.4 593.67 P
0 F
0.24 (  The delay from an) 143.51 593.67 P
0.24 (y subblock input to the subblock output when this subblock is used in) 230.98 593.67 P
0.51 (combinational mode.  A subblock is used in combinational mode when the netlist lea) 104.4 576.67 P
0.51 (v) 484.76 576.67 P
0.51 (es its clock) 490.1 576.67 P
(pin OPEN.) 104.4 559.67 T
(\245) 93.6 542.67 T
3 F
0.17 (T_seq_in:) 104.4 542.67 P
0 F
0.17 (  The delay from an) 148.4 542.67 P
0.17 (y subblock input pin to the FF storage element when this subblock is) 235.51 542.67 P
0.64 (used in sequential mode.  A subblock is used in sequential mode when the netlist hooks its clock) 104.4 525.67 P
0.17 (pin to some signal.  If this subblock w) 104.4 508.67 P
0.17 (as a simple \337ip \337op, for e) 273.4 508.67 P
0.17 (xample, then T_seq_in is the setup) 386.38 508.67 P
0.24 (time.  If this subblock corresponds to, say) 104.4 491.67 P
0.24 (, a LUT feeding into a \337ip \337op, then T_seq_in should be) 288.98 491.67 P
(set to the LUT delay plus the setup time.) 104.4 474.67 T
(\245) 93.6 457.67 T
3 F
-0.2 (T_seq_out:) 104.4 457.67 P
0 F
-0.2 (  The delay from the subblock storage element \050FF\051 to the subblock output pin when this) 153.9 457.67 P
0.01 (block is used in sequential mode.  A subblock is used in sequential mode when the netlist hooks its) 104.4 440.67 P
-0.07 (clock pin to some signal.  If this subblock had a \337ip \337op hook) 104.4 423.67 P
-0.07 (ed to its output pin, for e) 375.35 423.67 P
-0.07 (xample, then) 483.24 423.67 P
(T_seq_out w) 104.4 406.67 T
(ould be the clock-to-Q delay of the \337ip \337op.) 161.42 406.67 T
1 13 Q
(6.3  Placement File F) 72 377.33 T
(ormat:) 187.57 377.33 T
0 11 Q
-0.18 (The \336rst line of the placement \336le lists the netlist \050.net\051 and architecture \050.arch\051 \336les used to create this) 93.6 356.67 P
-0.13 (placement. This information is used to ensure you are w) 72 339.67 P
-0.13 (arned if you accidentally route this placement with) 317.58 339.67 P
-0.08 (a dif) 72 322.67 P
-0.08 (ferent architecture or netlist \336le later) 91.5 322.67 P
-0.08 (.  The second line of the \336le gi) 251.46 322.67 P
-0.08 (v) 384.64 322.67 P
-0.08 (es the size of the logic block array) 389.98 322.67 P
(used by this placement.) 72 305.67 T
(All the follo) 93.6 288.67 T
(wing lines ha) 147.1 288.67 T
(v) 205.55 288.67 T
(e the format:) 210.88 288.67 T
(block_name    x        y   subblock_number) 93.6 271.67 T
0.32 (The block name is the name of this block, as gi) 93.6 254.67 P
0.32 (v) 304.02 254.67 P
0.32 (en in the input netlist.  X and y are the ro) 309.36 254.67 P
0.32 (w and col-) 492.92 254.67 P
0.62 (umn in which the block is placed, respecti) 72 237.67 P
0.62 (v) 261.22 237.67 P
0.62 (ely) 266.56 237.67 P
0.62 (. The subblock number is meaningful only for pads. Since) 279.29 237.67 P
0.31 (we can ha) 72 220.67 P
0.31 (v) 116.37 220.67 P
0.31 (e more than one pad in a ro) 121.71 220.67 P
0.31 (w or column when io_rat is set to be greater than 1 in the architec-) 243.64 220.67 P
0.16 (ture \336le, the subblock number speci\336es which of the se) 72 203.67 P
0.16 (v) 315.09 203.67 P
0.16 (eral possible pad locations in ro) 320.43 203.67 P
0.16 (w x and column y) 460.55 203.67 P
0.01 (contains this pad. Note that the \336rst pads occupied at some \050x, y\051 location are al) 72 186.67 P
0.01 (w) 421.81 186.67 P
0.01 (ays those with the lo) 429.64 186.67 P
0.01 (west) 519.84 186.67 P
0.13 (subblock numbers -- i.e. if only one pad at \050x, y\051 is used, the subblock number of the I/O placed there will) 72 169.67 P
(be zero.  F) 72 152.67 T
(or clbs, the subblock number is al) 118.27 152.67 T
(w) 266.34 152.67 T
(ays zero.) 274.17 152.67 T
0.08 (The placement \336les output by VPR also include \050as a comment\051 a \336fth \336eld:  the block number) 93.6 135.67 P
0.08 (.  This) 512.03 135.67 P
-0.04 (is the internal inde) 72 118.67 P
-0.04 (x used by VPR to identify a block -- it may be useful to kno) 153.28 118.67 P
-0.04 (w this inde) 415.77 118.67 P
-0.04 (x if you are mod-) 463.8 118.67 P
(ifying VPR and trying to deb) 72 101.67 T
(ug something.) 199.81 101.67 T
-0.09 (Figure 10 sho) 93.6 84.67 P
-0.09 (ws the coordinate system used by VPR via a small 2 x 2 clb FPGA.  The number of clbs) 153.65 84.67 P
0.39 (in the x and y directions are denoted by nx and n) 72 67.67 P
0.39 (y) 290.31 67.67 P
0.39 (, respecti) 295.1 67.67 P
0.39 (v) 334.92 67.67 P
0.39 (ely) 340.26 67.67 P
0.39 (.  Clbs all go in the area with x between 1) 352.98 67.67 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "20" 20
%%Page: "21" 21
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 54 540 54 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(VPR and VP) 72 42.62 T
(ack User\325) 113.22 42.62 T
(s Manual \050V) 143.65 42.62 T
(ersion 4.22\051) 182.75 42.62 T
(February 17, 1999) 276.56 42.62 T
(21) 532 42.62 T
0 11 Q
-0.14 (and nx and y between 1 and n) 72 387.71 P
-0.14 (y) 201.93 387.71 P
-0.14 (, inclusi) 206.71 387.71 P
-0.14 (v) 241.13 387.71 P
-0.14 (e. All pads either ha) 246.47 387.71 P
-0.14 (v) 333.98 387.71 P
-0.14 (e x equal to 0 or nx + 1 or y equal to 0 or n) 339.32 387.71 P
-0.14 (y +) 525.68 387.71 P
(1.) 72 370.71 T
(An e) 93.6 353.71 T
(xample placement \336le is gi) 114.51 353.71 T
(v) 232.78 353.71 T
(en belo) 238.12 353.71 T
(w) 269.92 353.71 T
(.) 277.15 353.71 T
2 9 Q
(Netlist file: xor5.net   Architecture file: sample.arch) 72 327.04 T
(Array size: 2 x 2 logic blocks) 72 316.04 T
(#block name) 72 294.04 T
(x) 144 294.04 T
(y) 180 294.04 T
(subblk) 216 294.04 T
(block number) 288 294.04 T
(#----------) 72 283.04 T
(--) 144 283.04 T
(--) 180 283.04 T
(------) 216 283.04 T
(------------) 288 283.04 T
(a) 72 272.04 T
(0) 144 272.04 T
(1) 180 272.04 T
(0) 216 272.04 T
(#0  -- NB: block number is a comment.) 288 272.04 T
(b) 72 261.04 T
(1) 144 261.04 T
(0) 180 261.04 T
(0) 216 261.04 T
(#1) 288 261.04 T
(c) 72 250.04 T
(0) 144 250.04 T
(2) 180 250.04 T
(1) 216 250.04 T
(#2) 288 250.04 T
(d) 72 239.04 T
(1) 144 239.04 T
(3) 180 239.04 T
(0) 216 239.04 T
(#3) 288 239.04 T
(e) 72 228.04 T
(1) 144 228.04 T
(3) 180 228.04 T
(1) 216 228.04 T
(#4) 288 228.04 T
(out:xor5) 72 217.04 T
(0) 144 217.04 T
(2) 180 217.04 T
(0) 216 217.04 T
(#5) 288 217.04 T
(xor5) 72 206.04 T
(1) 144 206.04 T
(2) 180 206.04 T
(0) 216 206.04 T
(#6) 288 206.04 T
([1]) 72 195.04 T
(1) 144 195.04 T
(1) 180 195.04 T
(0) 216 195.04 T
(#7) 288 195.04 T
0 11 Q
1.25 (Note that this ne) 93.6 171.71 P
1.25 (w v) 169.47 171.71 P
1.25 (ersion of VPR allo) 186.74 171.71 P
1.25 (ws the blocks in a placement \336le to be listed in an) 272.39 171.71 P
1.25 (y order) 504.98 171.71 P
1.25 (,) 537.25 171.71 P
(unlik) 72 154.71 T
(e the old v) 94.51 154.71 T
(ersion.) 140.48 154.71 T
1 13 Q
(6.4   Routing File F) 72 125.38 T
(ormat) 177.85 125.38 T
0 11 Q
-0.12 (The \336rst line of the routing \336le gi) 93.6 104.71 P
-0.12 (v) 239.46 104.71 P
-0.12 (es the array size, nx x n) 244.8 104.71 P
-0.12 (y) 347.47 104.71 P
-0.12 (.  The remainder of the routing \336le lists the) 352.26 104.71 P
0.03 (global or the detailed routing for each net, one by one. Each routing be) 72 87.71 P
0.03 (gins with the w) 383.48 87.71 P
0.03 (ord net, follo) 450.98 87.71 P
0.03 (wed by) 507.9 87.71 P
0.42 (the net inde) 72 70.71 P
0.42 (x used internally by VPR to identify the net and, in brack) 124.01 70.71 P
0.42 (ets, the name of the net gi) 380.32 70.71 P
0.42 (v) 495.93 70.71 P
0.42 (en in the) 501.27 70.71 P
72 63 540 720 C
0 0 0 1 0 0 0 K
105.01 395.04 506.99 720 C
0 0 0 1 0 0 0 K
189.51 405.9 442.84 420.9 R
7 X
0 0 0 1 0 0 0 K
V
1 11 Q
0 X
(Figur) 217.74 413.57 T
(e 10:) 243.82 413.57 T
0 F
(Coordinate system used by VPR.) 268.87 413.57 T
164.65 509.72 212.54 557.61 R
7 X
V
0.5 H
2 Z
0 X
N
244.48 509.72 292.37 557.61 R
7 X
V
0 X
N
324.3 509.72 372.2 557.61 R
7 X
V
0 X
N
404.13 509.72 452.04 557.61 R
7 X
V
0 X
N
164.65 589.55 212.54 637.44 R
7 X
V
0 X
N
244.48 589.55 292.37 637.44 R
7 X
V
0 X
N
324.3 589.55 372.2 637.44 R
7 X
V
0 X
N
404.13 589.55 452.04 637.44 R
7 X
V
0 X
N
244.48 429.88 292.37 477.79 R
7 X
V
0 X
N
324.3 429.88 372.2 477.79 R
7 X
V
0 X
N
244.48 669.37 292.37 717.27 R
7 X
V
0 X
N
324.3 669.37 372.2 717.27 R
7 X
V
0 X
N
0 10 Q
(P) 258.88 695.69 T
(ad) 264.29 695.69 T
(\0501,3\051) 256.38 683.77 T
(P) 340.37 695.69 T
(ad) 345.78 695.69 T
(\0502,3\051) 338.7 684.6 T
(P) 180.66 615.83 T
(ad) 186.07 615.83 T
(\0500,2\051) 178.99 603.91 T
(P) 179.82 540.47 T
(ad) 185.23 540.47 T
(\0500,1\051) 178.16 526.88 T
(P) 421.06 616.84 T
(ad) 426.47 616.84 T
(\0503,2\051) 420.22 604.92 T
(P) 420.66 539.85 T
(ad) 426.07 539.85 T
(\0503,1\051) 419.83 527.1 T
(P) 259.5 457.75 T
(ad) 264.91 457.75 T
(\0501,0\051) 257.83 444.99 T
(P) 341.02 457.75 T
(ad) 346.43 457.75 T
(\0502,0\051) 338.52 444.99 T
(Clb) 259.28 614.6 T
(\0501,2\051) 255.95 601.84 T
(Clb) 340.4 616.05 T
(\0502,2\051) 338.74 603.29 T
(Clb) 259.1 535.76 T
(\0501,1\051) 256.6 523.84 T
(Clb) 340.58 537.17 T
(\0502,1\051) 338.08 525.25 T
(Chanx) 253.99 495.94 T
(\0501,0\051) 257.25 484.42 T
(Chanx) 334.21 495.5 T
(\0502,0\051) 336.71 484.42 T
(Chanx) 251.09 578.04 T
(\0501,1\051) 254.43 566.12 T
(Chanx) 334.82 576.19 T
(\0502,1\051) 337.32 564.27 T
(Chanx) 253.99 655.87 T
(\0501,2\051) 256.49 643.95 T
(Chanx) 333.41 656.08 T
(\0502,2\051) 337.58 643.33 T
(Chan) 215.58 616.84 T
(y) 236.54 616.84 T
(\0500,2\051) 219.03 603.91 T
(Chan) 215.37 538 T
(y) 236.33 538 T
(\0500,1\051) 218.01 525.47 T
(Chan) 295.22 536.16 T
(y) 316.18 536.16 T
(\0501,1\051) 298.48 524.23 T
(Chan) 293.56 615.61 T
(y) 314.52 615.61 T
(\0501,2\051) 298.48 603.29 T
(Chan) 375.3 618.91 T
(y) 396.26 618.91 T
(\0502,2\051) 379.39 606.99 T
(Chan) 374.68 538.62 T
(y) 395.64 538.62 T
(\0502,1\051) 378.77 525.03 T
0 0 0 1 0 0 0 K
72 63 540 720 C
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "21" 21
%%Page: "22" 22
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 54 540 54 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(VPR and VP) 72 42.62 T
(ack User\325) 113.22 42.62 T
(s Manual \050V) 143.65 42.62 T
(ersion 4.22\051) 182.75 42.62 T
(February 17, 1999) 276.56 42.62 T
(22) 532 42.62 T
0 11 Q
0.48 (netlist \336le. The follo) 72 712.67 P
0.48 (wing lines de\336ne the routing of the net. Each be) 163.01 712.67 P
0.48 (gins with a k) 378 712.67 P
0.48 (e) 435.87 712.67 P
0.48 (yw) 440.58 712.67 P
0.48 (ord that identi\336es a) 453.92 712.67 P
0.8 (type of routing se) 72 695.67 P
0.8 (gment. The possible k) 151.52 695.67 P
0.8 (e) 250.96 695.67 P
0.8 (yw) 255.68 695.67 P
0.8 (ords are SOURCE \050the source of a certain output pin class\051,) 269.01 695.67 P
1.31 (SINK \050the sink of a certain input pin class\051, OPIN \050output pin\051, IPIN \050input pin\051, CHANX \050horizontal) 72 678.67 P
1.26 (channel\051, and CHANY \050v) 72 661.67 P
1.26 (ertical channel\051. Each routing be) 188.64 661.67 P
1.26 (gins on a SOURCE and ends on a SINK. In) 336.78 661.67 P
0.9 (brack) 72 644.67 P
0.9 (ets after the k) 96.32 644.67 P
0.9 (e) 158.47 644.67 P
0.9 (yw) 163.19 644.67 P
0.9 (ord is the \050x, y\051 location of this routing resource. Finally) 176.52 644.67 P
0.9 (, the pad number \050if the) 432.26 644.67 P
0.11 (SOURCE, SINK, IPIN or OPIN w) 72 627.67 P
0.11 (as on an I/O pad\051, pin number \050if the IPIN or OPIN w) 224.9 627.67 P
0.11 (as on a clb\051, class) 462.27 627.67 P
1.02 (number \050if the SOURCE or SINK w) 72 610.67 P
1.02 (as on a clb\051 or track number \050for CHANX or CHANY\051 is listed --) 238.09 610.67 P
0.05 (whiche) 72 593.67 P
0.05 (v) 103.49 593.67 P
0.05 (er one is appropriate.  The meaning of these numbers should be f) 108.83 593.67 P
0.05 (airly ob) 395 593.67 P
0.05 (vious in each case.  If we) 428.8 593.67 P
-0.21 (are attaching to a pad, the pad number gi) 72 576.67 P
-0.21 (v) 249.38 576.67 P
-0.21 (en for a resource is the subblock number de\336ning to which pad at) 254.72 576.67 P
0.32 (location \050x, y\051 we are attached.  See Figure 10 for a diagram of the coordinate system used by VPR.  In a) 72 559.67 P
0.17 (horizontal channel \050CHANX\051 track 0 is the bottommost track, while in a v) 72 542.67 P
0.17 (ertical channel \050CHANY\051 track) 401.11 542.67 P
0.75 (0 is the leftmost track.  Note that if only global routing w) 72 525.67 P
0.75 (as performed the track number for each of the) 332.38 525.67 P
0.25 (CHANX and CHANY resources listed in the routing will be 0, as global routing does not assign tracks to) 72 508.67 P
(the v) 72 491.67 T
(arious nets.) 93.42 491.67 T
0.81 (F) 93.6 474.67 P
0.81 (or an N-pin net, we need N-1 distinct wiring \322paths\323 to connect all the pins. The \336rst wiring path) 99.55 474.67 P
0.24 (will al) 72 457.67 P
0.24 (w) 99.94 457.67 P
0.24 (ays go from a SOURCE to a SINK. The routing se) 107.77 457.67 P
0.24 (gment listed immediately after the SINK is the) 332.71 457.67 P
0.1 (part of the e) 72 440.67 P
0.1 (xisting routing to which the ne) 124.98 440.67 P
0.1 (w path attaches.) 259.95 440.67 P
3 F
0.1 (It is important to r) 336.41 440.67 P
0.1 (ealize that the \336r) 417.69 440.67 P
0.1 (st pin after) 492.13 440.67 P
0.13 (a SINK is the connection into the alr) 72 423.67 P
0.13 (eady speci\336ed r) 233.55 423.67 P
0.13 (outing tr) 302.35 423.67 P
0.13 (ee; when computing r) 340.28 423.67 P
0.13 (outing statistics be sur) 435.81 423.67 P
0.13 (e) 535.11 423.67 P
-0.05 (that you do not count the same se) 72 406.67 P
-0.05 (gment se) 218.16 406.67 P
-0.05 (ver) 256.75 406.67 P
-0.05 (al times by ignoring this fact.) 270.63 406.67 P
0 F
-0.05 (An e) 402.03 406.67 P
-0.05 (xample routing for one net) 422.89 406.67 P
(is listed belo) 72 389.67 T
(w) 127.34 389.67 T
(.) 134.57 389.67 T
2 9 Q
(Net 5 \050xor5\051) 72 357 T
(SOURCE \0501,2\051  Class: 1        # Source for pins of class 1.) 72 335 T
(  OPIN \0501,2\051  Pin: 4) 72 324 T
( CHANX \0501,1\051  Track: 1) 72 313 T
( CHANX \0502,1\051  Track: 1) 72 302 T
(  IPIN \0502,2\051  Pin: 0) 72 291 T
(  SINK \0502,2\051  Class: 0        # Sink for pins of class 0 on a clb.) 72 280 T
( CHANX \0501,1\051  Track: 1        # Note:  Connection to existing routing!) 72 269 T
( CHANY \0501,2\051  Track: 1) 72 258 T
( CHANX \0502,2\051  Track: 1) 72 247 T
( CHANX \0501,2\051  Track: 1) 72 236 T
(  IPIN \0501,3\051  Pad: 1) 72 225 T
(  SINK \0501,3\051  Pad: 1       # This sink is an output pad at \0501,3\051, subblock 1.) 72 214 T
0 11 Q
0.02 (Nets which are speci\336ed to be global in the netlist \336le \050generally clocks\051 are not routed. Instead, a list) 93.6 190.67 P
0.74 (of the blocks \050name and internal inde) 72 173.67 P
0.74 (x\051 which this net must connect is printed out. The location of each) 240 173.67 P
-0.19 (block and the class of the pin to which the net must connect at each block is also printed. F) 72 156.67 P
-0.19 (or clbs, the class) 467.86 156.67 P
0.87 (is simply whate) 72 139.67 P
0.87 (v) 142.52 139.67 P
0.87 (er class w) 147.85 139.67 P
0.87 (as speci\336ed for that pin in the architecture input \336le. F) 192.85 139.67 P
0.87 (or pads the pinclass is) 439.98 139.67 P
0.04 (al) 72 122.67 P
0.04 (w) 79.83 122.67 P
0.04 (ays -1; since pads do not ha) 87.66 122.67 P
0.04 (v) 209.29 122.67 P
0.04 (e logically-equi) 214.62 122.67 P
0.04 (v) 283.13 122.67 P
0.04 (alent pins, pin classes are not needed. An e) 288.35 122.67 P
0.04 (xample listing) 477.31 122.67 P
(for a global net is gi) 72 105.67 T
(v) 160.02 105.67 T
(en belo) 165.36 105.67 T
(w) 197.16 105.67 T
(.) 204.38 105.67 T
2 9 Q
(Net 146 \050pclk\051: global net connecting:) 72 90 T
(Block pclk \050#146\051 at \0501, 0\051, pinclass -1.) 72 79 T
(Block pksi_17_ \050#431\051 at \0503, 26\051, pinclass 2.) 72 68 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "22" 22
%%Page: "23" 23
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 54 540 54 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(VPR and VP) 72 42.62 T
(ack User\325) 113.22 42.62 T
(s Manual \050V) 143.65 42.62 T
(ersion 4.22\051) 182.75 42.62 T
(February 17, 1999) 276.56 42.62 T
(23) 532 42.62 T
2 9 Q
(Block pksi_185_ \050#432\051 at \0505, 48\051, pinclass 2.) 72 714 T
(Block n_n2879 \050#433\051 at \05049, 23\051, pinclass 2.) 72 703 T
1 15 Q
(7  Deb) 72 673 T
(ugging Aids) 112.53 673 T
0 11 Q
0.08 (After parsing the netlist and architecture \336les, VPR dumps out an image of its internal data structures) 93.6 650.67 P
0.49 (into net.echo and arch.echo. These \336les can be e) 72 633.67 P
0.49 (xamined to be sure that VPR is parsing the input \336les as) 288.05 633.67 P
(you e) 72 616.67 T
(xpect. The critical_path.echo \336le lists details about the critical path of a circuit, and is v) 95.97 616.67 T
(ery useful for) 480.74 616.67 T
1.41 (determining wh) 72 599.67 P
1.41 (y your circuit is so f) 142.71 599.67 P
1.41 (ast or so slo) 237.94 599.67 P
1.41 (w) 294.14 599.67 P
1.41 (.  V) 301.37 599.67 P
1.41 (arious other data structures can be output if you) 319.16 599.67 P
0.91 (uncomment the calls to the output routines; search the code for) 72 582.67 P
3 F
0.91 (ec) 361.51 582.67 P
0.91 (ho) 371.11 582.67 P
0 F
0.91 ( to see the v) 382.11 582.67 P
0.91 (arious data that can be) 438.01 582.67 P
(dumped.) 72 565.67 T
1.39 (If the preprocessor \337ag DEB) 93.6 548.67 P
1.39 (UG is de\336ned in vpr_types.h, some additional sanity checks are per-) 225.51 548.67 P
0.19 (formed during a run. I normally lea) 72 531.67 P
0.19 (v) 228.45 531.67 P
0.19 (e DEB) 233.78 531.67 P
0.19 (UG on all the time, as it only slo) 263.5 531.67 P
0.19 (ws e) 408.09 531.67 P
0.19 (x) 427.98 531.67 P
0.19 (ecution by 1 to 2%. The) 433.31 531.67 P
0.22 (major sanity checks are al) 72 514.67 P
0.22 (w) 187 514.67 P
0.22 (ays enabled, re) 194.83 514.67 P
0.22 (g) 260.77 514.67 P
0.22 (ardless of the state of DEB) 266.21 514.67 P
0.22 (UG. Finally) 385.41 514.67 P
0.22 (, if VERBOSE is set in) 437.47 514.67 P
-0.01 (vpr_types.h, a great deal of intermediate data will be printed to the screen as VPR runs. If you set v) 72 497.67 P
-0.01 (erbose,) 508.54 497.67 P
(you may w) 72 480.67 T
(ant to redirect screen output to a \336le.) 120.77 480.67 T
0.4 (The initial and \336nal placement costs pro) 93.6 463.67 P
0.4 (vide useful numbers for re) 272.41 463.67 P
0.4 (gression testing the netlist parsers) 389.92 463.67 P
-0.26 (and the placer) 72 446.67 P
-0.26 (, respecti) 132.74 446.67 P
-0.26 (v) 171.92 446.67 P
-0.26 (ely) 177.25 446.67 P
-0.26 (. I generate and print out a routing serial number to allo) 189.98 446.67 P
-0.26 (w easy re) 430.65 446.67 P
-0.26 (gression testing) 471.51 446.67 P
(of the router) 72 429.67 T
(.) 125.77 429.67 T
-0.07 (Finally) 93.6 412.67 P
-0.07 (, if you need to route an FPGA whose routing architecture cannot be described in VPR\325) 124.06 412.67 P
-0.07 (s archi-) 507.39 412.67 P
0.1 (tecture description \336le, don\325) 72 395.67 P
0.1 (t despair!  The router) 196.15 395.67 P
0.1 (, graphics, sanity check) 289 395.67 P
0.1 (er) 392.15 395.67 P
0.1 (, and statistics routines all w) 400.26 395.67 P
0.1 (ork) 525.34 395.67 P
0.15 (only with a graph that de\336nes all the a) 72 378.67 P
0.15 (v) 241.04 378.67 P
0.15 (ailable routing resources in the FPGA and the permissible connec-) 246.26 378.67 P
0.32 (tions between them.  If you change the routines that b) 72 361.67 P
0.32 (uild this graph \050in rr_graph*.c\051 so that the) 311.18 361.67 P
0.32 (y create a) 497.21 361.67 P
1.33 (graph describing your FPGA, you should be able to route your FPGA.  If you w) 72 344.67 P
1.33 (ant to read a te) 443.42 344.67 P
1.33 (xt \336le) 513.31 344.67 P
(describing  the entire routing resource graph, call the dump_rr_graph subroutine.) 72 327.67 T
1 15 Q
(8  Refer) 72 293 T
(ences) 122.54 293 T
0 11 Q
([1]) 72 270.67 T
0.07 (E. M. Sento) 100.8 270.67 P
0.07 (vich et al, \322SIS: A System for Sequential Circuit Analysis,) 153.33 270.67 P
0.07 (\323) 410.74 270.67 P
3 F
0.07 (T) 418.45 270.67 P
0.07 (ec) 423.55 270.67 P
0.07 (h. Report No. UCB/ERL) 433.15 270.67 P
(M92/41) 100.8 257.67 T
0 F
(, Uni) 135.02 257.67 T
(v) 156.75 257.67 T
(ersity of California, Berk) 162.08 257.67 T
(ele) 272.57 257.67 T
(y) 285.23 257.67 T
(, 1992.) 290.01 257.67 T
([2]) 72 240.67 T
0.13 (J. Cong and Y) 100.8 240.67 P
0.13 (. Ding, \322Flo) 162.71 240.67 P
0.13 (wMap: An Optimal T) 215.26 240.67 P
0.13 (echnology Mapping Algorithm for Delay Optimiza-) 310.51 240.67 P
(tion in Lookup-T) 100.8 227.67 T
(able Based FPGA Designs,) 175.7 227.67 T
(\323) 294.7 227.67 T
3 F
(IEEE T) 302.33 227.67 T
(r) 334.42 227.67 T
(ans. CAD) 338.53 227.67 T
0 F
(, Jan. 1994, pp. 1 - 12.) 381.31 227.67 T
([3]) 72 210.67 T
1.46 (V) 100.8 210.67 P
1.46 (. Betz, J. Rose and A. Marquardt,) 107.32 210.67 P
3 F
1.46 (Ar) 267.23 210.67 P
1.46 (c) 277.83 210.67 P
1.46 (hitectur) 282.55 210.67 P
1.46 (e and CAD for Deep-Submicr) 316.36 210.67 P
1.46 (on FPGAs) 452.46 210.67 P
0 F
1.46 (, Kluwer) 500.05 210.67 P
(Academic Publishers, 1999.) 100.8 197.67 T
([4]) 72 180.67 T
0.5 (V) 100.8 180.67 P
0.5 (. Betz, \322) 107.32 180.67 P
0.5 (Architecture and CAD for the Speed and Area Optimization of FPGAs,) 143.48 180.67 P
0.5 (\323) 462.02 180.67 P
3 F
0.5 (Ph.D. Disserta-) 470.15 180.67 P
(tion) 100.8 167.67 T
0 F
(, Uni) 117.92 167.67 T
(v) 139.64 167.67 T
(ersity of T) 144.98 167.67 T
(oronto, 1998.) 189.92 167.67 T
([5]) 72 150.67 T
0.88 (V) 100.8 150.67 P
0.88 (. Betz and J. Rose, \322Cluster) 107.32 150.67 P
0.88 (-Based Logic Blocks for FPGAs:  Area-Ef) 232.5 150.67 P
0.88 (\336cienc) 424.48 150.67 P
0.88 (y vs. Input Sharing) 453.64 150.67 P
(and Size,) 100.8 137.67 T
(\323) 140.36 137.67 T
3 F
(CICC,) 147.99 137.67 T
0 F
(1997, pp. 551 - 554.) 179.16 137.67 T
([6]) 72 120.67 T
1.6 (V) 100.8 120.67 P
1.6 (. Betz and J. Rose, \322Directional Bias and Non-Uniformity in FPGA Global Routing Architec-) 107.32 120.67 P
(tures,) 100.8 107.67 T
(\323) 124.16 107.67 T
3 F
(ICCAD) 131.8 107.67 T
0 F
(, 1996, pp. 652 - 659.) 164.8 107.67 T
([7]) 72 90.67 T
0.79 (V) 100.8 90.67 P
0.79 (. Betz and J. Rose, \322On Biased and Non-Uniform Global Routing Architectures and CAD T) 107.32 90.67 P
0.79 (ools) 521.66 90.67 P
1.55 (for FPGAs,) 100.8 77.67 P
1.55 (\323) 152.3 77.67 P
3 F
1.55 (CSRI T) 161.49 77.67 P
1.55 (ec) 194.12 77.67 P
1.55 (hnical Report #358) 203.73 77.67 P
0 F
1.55 (, Department of Electrical and Computer Engineering,) 291.78 77.67 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "23" 23
%%Page: "24" 24
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 54 540 54 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(VPR and VP) 72 42.62 T
(ack User\325) 113.22 42.62 T
(s Manual \050V) 143.65 42.62 T
(ersion 4.22\051) 182.75 42.62 T
(February 17, 1999) 276.56 42.62 T
(24) 532 42.62 T
0 11 Q
0.77 (Uni) 100.8 712.67 P
0.77 (v) 117.03 712.67 P
0.77 (ersity of T) 122.36 712.67 P
0.77 (oronto, 1996.) 168.84 712.67 P
3 F
0.77 (\050A) 235.62 712.67 P
0.77 (vailable for download fr) 245.4 712.67 P
0.77 (om http://www) 354.48 712.67 P
0.77 (.eecg) 419.53 712.67 P
0.77 (.tor) 442.27 712.67 P
0.77 (onto.edu/~vaughn/) 457.36 712.67 P
(paper) 100.8 699.67 T
(s/tec) 126.35 699.67 T
(hr) 146.35 699.67 T
(ep.ps.Z\051.) 155.72 699.67 T
0 F
([8]) 72 682.67 T
-0.26 (V) 100.8 682.67 P
-0.26 (. Betz and J. Rose, \322VPR:  A Ne) 107.32 682.67 P
-0.26 (w P) 247.66 682.67 P
-0.26 (acking, Placement and Routing T) 264.04 682.67 P
-0.26 (ool for FPGA Research,) 409.09 682.67 P
-0.26 (\323) 513.86 682.67 P
3 F
-0.26 (Se) 521.23 682.67 P
-0.26 (v-) 531.45 682.67 P
(enth International W) 100.8 669.67 T
(orkshop on F) 191.45 669.67 T
(ield-Pr) 249.62 669.67 T
(o) 280.29 669.67 T
(gr) 285.68 669.67 T
(ammable Lo) 295.29 669.67 T
(gic and Applications) 349.87 669.67 T
0 F
(, 1997, pp. 213 - 222.) 440.93 669.67 T
([9]) 72 652.67 T
1.34 (S. Bro) 100.8 652.67 P
1.34 (wn, R. Francis, J. Rose, and Z. Vranesic,) 129.99 652.67 P
3 F
1.34 (F) 323.13 652.67 P
1.34 (ield-Pr) 329.35 652.67 P
1.34 (o) 360.02 652.67 P
1.34 (gr) 365.41 652.67 P
1.34 (ammable Gate Arr) 375.02 652.67 P
1.34 (ays) 460.04 652.67 P
0 F
1.34 (, Kluwer Aca-) 474.7 652.67 P
(demic Publishers, 1992.) 100.8 639.67 T
([10]) 72 622.67 T
1.95 (S. W) 100.8 622.67 P
1.95 (ilton, \322) 124.31 622.67 P
1.95 (Architectures and Algorithms for Field-Programmable Gate Arrays with Embedded) 155.94 622.67 P
0.5 (Memories,) 100.8 609.67 P
0.5 (\323) 147.38 609.67 P
3 F
0.5 (Ph.D. Dissertation) 155.52 609.67 P
0 F
0.5 (, Uni) 238.84 609.67 P
0.5 (v) 261.07 609.67 P
0.5 (ersity of T) 266.4 609.67 P
0.5 (oronto, 1997.) 312.36 609.67 P
3 F
0.5 (\050A) 378.35 609.67 P
0.5 (vailable for download fr) 388.13 609.67 P
0.5 (om http://) 496.41 609.67 P
(www) 100.8 596.67 T
(.ee) 122 596.67 T
(.ubc.ca/~ste) 134.35 596.67 T
(ve) 187.18 596.67 T
(w/publications.html\051.) 196.79 596.67 T
0 F
([11]) 72 579.67 T
0.71 (Y) 100.8 579.67 P
0.71 (. W) 107.32 579.67 P
0.71 (. Chang, D. F) 122.9 579.67 P
0.71 (. W) 183.43 579.67 P
0.71 (ong, and C. K. W) 199.15 579.67 P
0.71 (ong, \322Uni) 278.4 579.67 P
0.71 (v) 322.22 579.67 P
0.71 (ersal Switch Modules for FPGA Design,) 327.56 579.67 P
0.71 (\323) 508.77 579.67 P
3 F
0.71 (A) 517.11 579.67 P
0.71 (CM) 523.5 579.67 P
(T) 100.8 566.67 T
(r) 106.31 566.67 T
(ans. on Design A) 110.43 566.67 T
(utomation of Electr) 185.37 566.67 T
(onic Systems) 270.43 566.67 T
0 F
(, Jan. 1996, pp. 80 - 101.) 326.95 566.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "24" 24
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 24
%%DocumentFonts: Times-Roman
%%+ Times-Bold
%%+ Courier
%%+ Times-Italic
%%+ Courier-Oblique
%%+ Symbol
%%+ Times-BoldItalic
%%EOF
