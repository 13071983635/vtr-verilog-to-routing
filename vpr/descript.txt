Version 3.99

- Added D. F. Wong's Universal switch block as one of the switch blocks
  supported.

- Code cleanup.  Put the placer options in a placer_opts structure, and 
  moved the input and output code from place.c to read_place.c.

- Added the ability to read in the location of the IO pads and force the
  placer to keep them there.

- Changed the placement output format slightly.  Block numbers are now
  only in comments.  The placement input parser was completely rewritten.
  Comments and line continuation are now allowed in placement files.  More
  importantly, the order of the blocks is now irrelevant; the file can list
  the blocks in any order.  This should be a lot more convenient for people
  using VPR to route placements generated by other tools.  The error 
  checking has been beefed up too -- I think every possible error in a 
  placement file will be caught now and the user will get an informative
  error message.  In particular, the "non-consecutive subblock" error that
  tripped up Russ and Ivan will be caught right away.

- Moved all hash table logic out of read_netlist.c and into a new module,
  hash.c.  I can use this general hash table stuff all over now.

- Changed defaults to be 30 routing iterations and detailed routing.

- Changed VPR to use a graph-based model of the routing resources available.
  This allows VPR to perform either global or detailed routing now.  Also
  added new graphics options to view the routing resources available.
  Took the routing checker out of route.c and put it in check_route.c.
  Also moved some code from route.c to stats.c.

- Converted some defined constants to enumerated types so I can see the
  symbolic names in gdb.

- Cleaned up some of the placer code.  Centralized allocation of the temporary
  placement data structures.  Changed the standard deviation computation
  so that the old_costs array wasn't needed anymore.

Version 3.98a

- Made a minor change to the graphics package.  Descenders (e.g. "g")
  are now considered in the vertical text centering routines.

- Changed the placer inner_loop so that the frequency with which recompute
  cost is called is variable.  Recomputing the cost from time to time
  from scratch stops round offs from accumulating.  The change didn't make
  VPR significantly faster.

- Made -inner_num a float to allow small inner nums to be tried.

- Code cleanup.  Converted the annealing schedule parameters from 
  global variables to a structure that is passed around.  Converted the
  graphics state from global variables to static variables in draw.c set
  via a call to set_graphics_state.

- Added -verify_binary_search option.  Makes the router try routings
  with channel widths of best-2 and best-3 (in addition to the best-1
  tried by the binary search).  If one of these additional routings
  succeeds, the router keeps trying routings until two in a row (e.g.
  width = 9 and width = 8) fail.  The binary search usually finds the
  min. channel width, but due to router flukiness it will occassionally
  happen that a width = 19 routing fails, but width = 18 succeeds and
  so on.
 
Version 3.98

- Changed initial routing channel width guess to clb_size (# of pins
  on a clb).  Should give slightly faster run times for big clbs.

- Fixed a bug where VPR would wrongly think it had an error and 
  terminate itself if two outputs were made logically equivalent.
  Bug noticed by Varghese George of UC Berkeley.

- Altered VPR to use the new netlist format of blifmap (cluster-based).
  In this process I fixed a minor netlist parsing bug where VPR would
  refuse to accept a netlist with a comment between a .clb and a .pinlist
  line.  The new information on what's in a cluster is in the .subblock
  lines following each .clb line (after the .pinlist line).

Version 3.23

NB:  May want to add check in read_place for subblock numbers that have
  gaps (not consecutive starting at zero).  Russ Tessier's suggestion.
  (I did this on March 22, 1997 -- Version 3.99).

- Updated graphics again -- made all internal functions static so that
  graphics.c is a true component without name space conflicts with user
  programs.  Also moved the toggle_nets function to draw.c, as this 
  cleaned up the code dependencies a bit.

- Corrected RISA reference in the source code to point to ICCAD (pointed
  out by Russ Tessier of MIT).

- Rewrote large parts of graphics package.  It should now be faster for
  zoomed in graphics, as it preclips them based on their bounding box. 
  This will also make zoomed-in postscript much smaller.  The PostScript
  driver has been rewritten; output file sizes are about 50% smaller now
  if all graphics are on-screen.  When zoomed-in the clipping makes an
  even bigger difference.  Also added the ability to specify the font size
  for text and the line width for geometry (I demand-load the fonts
  for maximum efficiency while hiding details like font loading from the
  calling program).  Finally, I removed the global drawscreen function
  and replaced it with a callback function to clean up the code a bit.
  

Version 3.22

- Changed some code in util.c that HP's C compiler didn't like. 
  Turned on all warning options in gcc and fixed all warnings, 
  unused variables, etc.  Also slightly altered the header structure
  of the program to better check function definitions against 
  function declarations in util.c and graphics.c.  Someday I should
  make all local functions static and put declarations for all functions
  called across modules in header files.  Added an ARCH_TYPE flag
  to the makefile so that machine dependent code (random number 
  generator right now) is altered merely by changing the makefile.
  This version should now work fine on both SUN and HP.

- Fixed a minor error message bug Guy found.

- When there is only 1 location for a clb (nx = ny = 1, with 1 clb) 
  the placer goes into an infinite loop trying to move the block.
  Added a check for this so it now just refuses to place the circuit.

- Added an option to specify FPGA size (-nx and -ny) on the command line
  for Guy.  ny can now be bigger than nx, so I had to change a couple
  of things in the range limiter routines.

- Added -aspect_ratio option to allow simulation of nonsquare FPGAs.
  Cleaned up a few bits of ugly code I found while checking that I always
  used nx and ny properly.  Had to change the range limiter routine to
  make nonsquare FPGAs work properly.

Version 3.21

- Added delta channel width description function.  Makes only one channel
  extra wide (or narrow).

- Changed channel width code so that io channel widths are no longer 
  tied to the maximum channel width in the rest of the array.

- Added -fixed_pins option to lock the pins in their initial random
  positions.

Version 3.20

- Added nonlinear congestion option to the placer.  Can either replace
  the circuit for every channel width or just place once to a suggested
  width.

- Changed the router so that it only resets the pathcost element of 
  channel segments that were reached in the last routing phase.  This only
  sped up the router by 5% -- rather disappointing.

- Added code to recompute the cost (quickly) after each placement temp.
  is finished so the check_cost checks won't fail due to round off
  accumulation.


Version 3.13

- Fixed bug in netlist parser that went into an infinite loop if a global
  net was not the first item in it's hash table entry.

- Added -place_cost_exp option to set the exponent to which we take the
  average number of tracks per channel factor in the cost function.  Setting
  this option to be greater than 1 allows more sever penalization of narrow
  channels during placement.

- Made Pathfinder algorithm with init_pres_fac = 0.5 and acc_fac_mult
  = 0.2 the default for the router.  Gives about 9% better results than 
  the old router options.

- Changed the -pin_block_update_type option to -block_update_type and
  allowed it to take a value of "pathfinder".  This invokes a true
  Pathfinder algorithm, where some costs are updated immediately and
  others are updated after all nets are routed.  This Pathfinder 
  algorithm is new this version.

- Fixed a minor bug in the placer cost function that led to incorrect
  bounding boxes (and hence costs) of nets that had more than one pin
  connected to the same block.  The initial bounding box set up
  overcounted the number of blocks on the bb edges.  This bug caused
  an error message in Mike's big run of vpr on all mcnc circuits.


Version 3.12

- Added a new option, -pin_block_update_type, to allow selection of a
  mixed Pathfinder, immediate-update algorithm where pin costs are updated
  immediately and channel costs are updated in the Pathfinder manner.

- Now computes and prints out routed wirelength statistics (requested by 
  Mike). 

- Fixed a minor bug in the routine that counted the number of bends in
  the routed circuit.  The bug counted an extra bend in rare cases 
  (specifically when wires came out of an OPIN into more than one channel),
  causing the bend numbers to be about 1% higher than they should have 
  been.
  

Version 3.11

- Added a few more routing options.  Set a couple of defaults to what
  I've determined to be better values.  I compute statistics on how
  many bends there are per net.  This version is going to Jonathan.


Version 3.10

- Changed the bounding box update method so that large nets have their
  bounding boxes incrementally updated whenever possible.  This has
  sped up the bounding box calculation for bigkey_mod by a 
  factor of about 34.  For other netlists with fewer high fanout nets
  the improvement is smaller, but still significant.

- Changed the cost function calculation so that as much data as possible
  is precomputed.  This and the bounding box change together speed 
  up placement of small circuits (e64) by 2x, and large circuits (alu4)
  by 15x.

- Added more options to allow more control over the router.


Code maintenance changes:

  Restructured the options parser to make it more modular.  Added checks
  to determine that the parameters supplied for each option are of the
  correct (integer, float or string) type.

 
Version 3.02

- Changed the cost function's for the router.  Pins that are not 
  oversubscribed now have a cost of 0., not 1.  The costs of all pins
  should be 1 less than in version 3.01.  Channels are penalized for
  overuse via formulae like cost = 1. + (chan_occ - chan_width) * fac
  rather than the old cost = 1. + (chan_occ / chan_width - 1.) * fac.
  This new cost penalizes absolute rather than relative overuse, and
  should be faster to compute and lead to larger penalties (regardless
  of channel width) with smaller penalty factors, fac.  It's magnitude
  should be more in line with that of the pin overuse cost.

  The one drawback is that the relative overuse cost considered using
  11 tracks in a 10 track channel to be less severe than using 2 tracks
  in a 1 track channel, which is probably the way it should be.


Version 3.01

- Allocated small chunks of memory with calls to my_small_malloc instead
  of my_malloc.  My_small_malloc is my custom memory handler that 
  avoids the 8-byte or so storage overhead of malloc, at the cost of not
  keeping enough information to free the data structures.

- Removed the temporary code from the routing serial number generator, 
  routing print routine, and channel cost and occupancy dumping routine
  that allowed direct comparison with Version 2.22a's results.  All 
  information is now printed with the true (new) pin numbering scheme.

- Removed temporary code that set CLB's opin cost to 0.  Now it is 1;
  it shouldn't make much difference.


Version 3.00

This version evolved from Version 2.22, not 2.22a.  The changes are:

- Input netlist format changed from blif to that produced by blifmap (.net).

- Architecture description file is changed to allow the definition of more
  arbitrary clbs, with general classes of logically equivalent pins.

- The entire program has been altered to place and route general clbs rather
  than just LUTs with one output.

- The program allows global nets to be flagged via .global statements in the
  input netlist file.  These nets are ignored in all subsequent place and 
  route steps by the program, but the blocks they must connect are listed
  in the final routing output.

- The routing output now goes to a file, which is specified on the command
  line.

- Added two new command line options -route_only and -place_only.  If 
  -route_only is specified, an existing placement is read in from the
  place_file and is routed.  If -place_only is specified, the program
  quits after writing out the final placement of a circuit (no routing is
  done).


Bug Fixes and minor alterations:

- Changed the chan_y.occ vs. chan_width_y check in check_routing.  It 
  had the wrong subscript (this would have been bad!).

- Changed the placement output file to include subblock information for IOs.

- Increased the input buffer size for all parsers and added a check for 
  lines so long that they overflow the input buffer (motivated by J.P.).

- Changed binary search for minimum necessary track width so that tiny 
  circuits that succeed with a width_factor of 0 are properly handled 
  (motivated by J.P.).

- Fixed minor mistake drawing to the OPINs of IO blocks.

- Partially fixed the inaccurate drawing problem caused by X Windows' 
  apparent inability to handle coordinates outside the range -15000 to 
  15000.  I clip point by point to the -15000 to 15000 range.  This means
  drawrect, fillrect and drawtext will always work properly.  Drawline
  (fillpoly) will always work for horizontal or vertical lines (polygon edges)
  but will be incorrect for extremely zoomed diagonal ones.  Drawarc will
  also be incorrect at extreme zooms.  The PostScript output always looks
  correct.  The only complete fix for this problem is for me to write my
  own clipping routines.  This is a lot of code, and will hurt performance
  since I'll be duplicating X Windows' own checks.  I don't think it's 
  worthwhile to overcome a problem that only shows up when people zoom
  in on the graphics absurdly (like a bored Steve, who found the inaccurate
  drawing).

- Routing serial number generator now only considers the pin numbers of 
  traceback segments that are of type OPIN or IPIN.


Version 2.22a

Made some minor changes to Version 2.22 to allow this program's output to
be compared to that of Version 3.0 in order to be sure the programs work
the same way.  Fixed a nasty bug in check_routing where the chan_width_y
not exceeded check was incorrect.  Changed the serial number generation
to avoid taking the pin numbers of things that were not IPINS or OPINs.

Version 2.22

Same as version 2.21 with a few changes to make util.c and util.h a bit
more modular.


Version 2.21

Updated the router graphics, and fixed the unsaved routing bug, and
the improper abort sequence when the PostScript file can't be opened.
This version is fully functional, but can handle only clbs with 1 LUT
in them.


Version 2.20

This version correctly routes nets and updates the cost functions.  It
is a complete place and route tool.  The router graphics have now been
implemented, and all graphics allow a text message and selection of clbs. 


