%!
%%BoundingBox: (atend)
%%Pages: (atend)
%%DocumentFonts: (atend)
%%EndComments
%
% FrameMaker PostScript Prolog 3.0, for use with FrameMaker 3.0
% Copyright (c) 1986,87,89,90,91 by Frame Technology Corporation.
% All rights reserved.
%
% Known Problems:
%	Due to bugs in Transcript, the 'PS-Adobe-' is omitted from line 1
/FMversion (3.0) def 
% Set up Color vs. Black-and-White
	/FMPrintInColor systemdict /colorimage known
		systemdict /currentcolortransfer known or def
% Uncomment this line to force b&w on color printer
%   /FMPrintInColor false def
/FrameDict 195 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} def
	} if
/FMVERSION {
	FMversion ne {
		/Times-Roman findfont 18 scalefont setfont
		100 100 moveto
		(FrameMaker version does not match postscript_prolog!)
		dup =
		show showpage
		} if
	} def 
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/organgle FMLOCAL
	/orgfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne dup {setmanualfeed} if
	/manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	/yscale exch def
	/xscale exch def
	currenttransfer cvlit /orgxfer exch def
	currentscreen cvlit /orgproc exch def
	/organgle exch def /orgfreq exch def
	setpapername 
	manualfeed {true} {papersize} ifelse 
	{manualpapersize} {false} ifelse 
	{desperatepapersize} if
	end 
	} def 
	/pagesave FMLOCAL
	/orgmatrix FMLOCAL
	/landscape FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch neg translate pop 
		}
		{pop pop}
		ifelse
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
	} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin
	array /fillvals exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fy translate 
	rotate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	} bind def
/FMENDEPSF {
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	/FMdicttop countdictstack 1 add def 
	statusdict begin stopped end 
	countdictstack -1 FMdicttop {pop end} for 
	} def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped pop 
		end
		} if
	} def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
/freq dpi 18.75 div 8 div round dup 0 eq {pop 1} if 8 mul dpi exch div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setpattern {
	 /bwidth  exch def
	 /bpside  exch def
	 /bstring exch def
	 /onbits 0 def  /offbits 0 def
	 freq sangle landscape {90 add} if 
		{/y exch def
		 /x exch def
		 /xindex x 1 add 2 div bpside mul cvi def
		 /yindex y 1 add 2 div bpside mul cvi def
		 bstring yindex bwidth mul xindex 8 idiv add get
		 1 7 xindex 8 mod sub bitshift and 0 ne
		 {/onbits  onbits  1 add def 1}
		 {/offbits offbits 1 add def 0}
		 ifelse
		}
		setscreen
	 {} settransfer
	 offbits offbits onbits add div FMsetgray
	/graymode false def
	} bind def
/grayness {
	FMsetgray
	graymode not {
		/graymode true def
		orgxfer cvx settransfer
		orgfreq organgle orgproc cvx setscreen
		} if
	} bind def
	/HUE FMLOCAL
	/SAT FMLOCAL
	/BRIGHT FMLOCAL
	/Colors FMLOCAL
FMPrintInColor 
	
	{
	/HUE 0 def
	/SAT 0 def
	/BRIGHT 0 def
	% array of arrays Hue and Sat values for the separations [HUE BRIGHT]
	/Colors   
	[[0    0  ]    % black
	 [0    0  ]    % white
	 [0.00 1.0]    % red
	 [0.37 1.0]    % green
	 [0.60 1.0]    % blue
	 [0.50 1.0]    % cyan
	 [0.83 1.0]    % magenta
	 [0.16 1.0]    % comment / yellow
	 ] def
      
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/K { 
		Colors exch get dup
		0 get /HUE exch store 
		1 get /BRIGHT exch store
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} def
	/FMsetgray { 
		/SAT exch 1.0 exch sub store 
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} bind def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/FMsetgray {setgray} bind def
	/K { 
		pop
		} def
	}
ifelse
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setpattern} 
	{grayness}
	ifelse
	} bind def
/V { 
	gsave eofill grestore
	} bind def
/N { 
	stroke
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
	/rad FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	newpath
	x1 y1 rad add moveto
	x1 y2 x2 y2 rad arcto
	x2 y2 x2 y1 rad arcto
	x2 y1 x1 y1 rad arcto
	x1 y1 x1 y2 rad arcto
	closepath
	16 {pop} repeat
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath fill
	grestore
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	stroke
	grestore
	} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 4 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
	dup 
	8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
	/proc1 FMLOCAL
	/proc2 FMLOCAL
	/newproc FMLOCAL
/Fmcc {
    /proc2 exch cvlit def
    /proc1 exch cvlit def
    /newproc proc1 length proc2 length add array def
    newproc 0 proc1 putinterval
    newproc proc1 length proc2 putinterval
    newproc cvx
} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch Fmcc settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	colorsetup
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} {is} {is} true 3 colorimage 
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	colorsetup
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} {is} {is} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip} {gip} {bip} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip gip bip w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
%%EndProlog
%%BeginSetup
(3.0) FMVERSION
1 1 612 792 0 1 11 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /Times-Bold FMFONTDEFINE
2 0 /Times-Italic FMFONTDEFINE
3 0 /Helvetica FMFONTDEFINE
4 0 /Courier FMFONTDEFINE
5 1 /Symbol FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 .1 FMFILL
2 .3 FMFILL
3 .5 FMFILL
4 .7 FMFILL
5 .9 FMFILL
6 .97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 .9 FMFILL
18 .7 FMFILL
19 .5 FMFILL
20 .3 FMFILL
21 .1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
108 54 540 54 2 L
0.25 H
2 Z
0 X
0 K
N
0 8 Q
(VPR User) 108 42.62 T
(\325) 140.94 42.62 T
(s Manual) 143.16 42.62 T
(June 10, 1996) 301.68 42.62 T
(1) 536 42.62 T
0 24 Q
(VPR User) 226.95 704 T
(\325) 325.77 704 T
(s Manual) 332.44 704 T
1 12 Q
(V) 219.14 664 T
(aughn Betz \050vaughn@eecg.tor) 226.7 664 T
(onto.edu\051) 380.55 664 T
(June 10, 1996) 289.18 648 T
1 16 Q
(Overview) 108 605.33 T
0 12 Q
-0 (VPR \050V) 129.6 578 P
-0 (ersatile Place and Route\051 is an FPGA placement and global routing tool. VPR) 167.25 578 P
(has four required and many optional parameters; it is invoked by typing:) 108 560 T
(vpr) 129.6 530 T
2 F
(netlist.net ar) 148.59 530 T
(chitectur) 208.78 530 T
(e.ar) 250.97 530 T
(ch placement.p r) 269.52 530 T
(outing.r) 349.34 530 T
([-options]) 390.66 530 T
0 F
0.28 (Netlist.net is the netlist describing the circuit to be placed and/or routed, while archi-) 129.6 500 P
-0.13 (tecture.arch describes the architecture of the FPGA in which the circuit is to be realized. If) 108 482 P
-0.23 (VPR is placing a circuit, the \336nal placement will be written to placement.p; if VPR is rout-) 108 464 P
0.38 (ing a previously placed circuit, the placement is read from placement.p. The \336nal routing) 108 446 P
0.35 (of a circuit is written to \336le routing.r) 108 428 P
0.35 (. The format of each of these \336les is described in the) 285.01 428 P
(sections below) 108 410 T
(.) 178.17 410 T
0.91 (VPR places a circuit on an FPGA and then repeatedly attempts to global route it in) 129.6 380 P
0.51 (order to \336nd the minimum number of tracks required by the speci\336ed FPGA architecture) 108 362 P
1.02 (to route this circuit. If a routing is unsuccessful, VPR increases the number of tracks in) 108 344 P
0.05 (each routing channel and tries again; if a routing is successful, VPR decreases the number) 108 326 P
0.55 (of tracks before trying to route it again. Once the minimum number of tracks required to) 108 308 P
(globally route the circuit is found, VPR exits.) 108 290 T
0.62 (If one requires a circuit to be detail-routed, the output global routing of VPR can be) 129.6 260 P
0.49 (used as input to the SEGA FPGA detailed router developed at the University of T) 108 242 P
0.49 (oronto.) 505.69 242 P
0.35 (Contact the author of this document for further details on how to obtain SEGA and inter-) 108 224 P
(face it to VPR.) 108 206 T
0.52 (T) 129.6 176 P
0.52 (yping VPR with no parameters will print out a list of all its command line parame-) 136.09 176 P
(ters.) 108 158 T
1 16 Q
(Compiling VPR) 108 113.33 T
0 12 Q
-0.14 (If your compiler of choice is gcc and you are running on a Sparcstation, you can com-) 129.6 86 P
-0.17 (pile VPR simply by typing) 108 68 P
2 F
-0.17 (make) 238.76 68 P
0 F
-0.17 ( in the directory containing VPR\325) 264.07 68 P
-0.17 (s source code and make-) 422.79 68 P
FMENDPAGE
%%EndPage: "1" 2
%%Page: "2" 2
612 792 0 FMBEGINPAGE
108 54 540 54 2 L
0.25 H
2 Z
0 X
0 K
N
0 8 Q
(VPR User) 108 42.62 T
(\325) 140.94 42.62 T
(s Manual) 143.16 42.62 T
(June 10, 1996) 301.68 42.62 T
(2) 536 42.62 T
0 12 Q
0.67 (\336le. If your compiler and/or architecture are dif) 108 712 P
0.67 (ferent, however) 339.61 712 P
0.67 (, you will have to make a) 415.06 712 P
-0.16 (couple of small modi\336cations to the make\336le. First, change the CC = gcc line in the make-) 108 694 P
3.25 (\336le so that CC is set to the name of your desired compiler) 108 676 P
3.25 (. Secondly) 422.79 676 P
3.25 (, change the) 475.89 676 P
1.23 (ARCH_TYPE = SP) 108 658 P
1.23 (ARC line so that ARCH_TYPE is set to the name of your machine) 204.75 658 P
1.05 (\050e.g. SP) 108 640 P
1.05 (ARC, HP) 145.6 640 P
1.05 (, SGI, IBM, etc.\051. This ARCH_TYPE \337ag is only needed to determine) 191.3 640 P
0.86 (which random number generator should be called by VPR, as not all machines have the) 108 622 P
-0 (same random number libraries. Finally) 108 604 P
-0 (, you may want to change the line FLAGS = -O2 to) 293.42 604 P
0.98 (set FLAGS to the value that gives the highest level of optimization with your compiler) 108 586 P
0.98 (,) 537 586 P
1.66 (and it may be necessary to give the linker dif) 108 568 P
1.66 (ferent options so it \336nds all the relevant) 338.19 568 P
(libraries on your machine.) 108 550 T
0.83 (If you are using blifmap to translate SIS output to VPR\325) 129.6 520 P
0.83 (s netlist format, you should) 405.75 520 P
(make similar modi\336cations to blifmap\325) 108 502 T
(s make\336le.) 294.57 502 T
1 16 Q
(File Formats) 108 457.33 T
1 14 Q
(Cir) 108 422.67 T
(cuit Netlist \050.net\051 Format) 127.95 422.67 T
0 12 Q
0.85 (A sharp \050#\051 character anywhere in a line indicates that the rest of the line is a com-) 129.6 396 P
0.82 (ment. A backslash \050\134\051 at the end of a line \050and not in a comment\051 means that this line is) 108 378 P
-0.23 (continued on the line below) 108 360 P
-0.23 (. Three dif) 239.54 360 P
-0.23 (ferent circuit elements are available: input pads, out-) 289.15 360 P
0.5 (put pads, and logic blocks, and are speci\336ed using the keywords .input, .output, and .clb,) 108 342 P
(respectively) 108 324 T
(. The format is shown below) 165.17 324 T
(.) 301.63 324 T
(element_type_keyword blockname) 129.6 294 T
(pinlist:) 129.6 264 T
2 F
( net_a net_b net_c ...) 162.93 264 T
0 F
-0.1 (A circuit element is created by specifying a keyword at the start of a line, followed by) 129.6 234 P
0.46 (the name to be used to identify this block. The line immediately below this keyword line) 108 216 P
0.27 (starts with the identi\336er pinlist: and then lists the names of the nets connected to each pin) 108 198 P
0.47 (of the logic block or pad. Input and output pads \050.inputs and .outputs\051 have only one pin,) 108 180 P
1.04 (while logic blocks \050.clbs\051 have as many pins as the architecture \336le used for this run of) 108 162 P
1 (VPR speci\336es. The \336rst net listed in the pinlist connects to pin 0 of a clb, and so on. If) 108 144 P
0.7 (some pin of a clb is to be left unconnected, the corresponding entry in the pinlist should) 108 126 P
(specify the reserved word) 108 108 T
2 F
(open) 234.55 108 T
0 F
(instead of a net name.) 260.87 108 T
FMENDPAGE
%%EndPage: "2" 3
%%Page: "3" 3
612 792 0 FMBEGINPAGE
108 54 540 54 2 L
0.25 H
2 Z
0 X
0 K
N
0 8 Q
(VPR User) 108 42.62 T
(\325) 140.94 42.62 T
(s Manual) 143.16 42.62 T
(June 10, 1996) 301.68 42.62 T
(3) 536 42.62 T
0 12 Q
1.96 (The only other keyword is .global. Use .global lines to specify that a net or nets) 129.6 712 P
-0.16 (should not be considered by the placement cost function or routed. It is assumed that some) 108 694 P
1 (global routing resources exist to route these very high fanout signals \050generally clocks\051.) 108 676 P
(The syntax of the .global statement is:) 108 658 T
(.global) 129.6 628 T
2 F
(net_a net_b ...) 165.58 628 T
0 F
(An example netlist is given below) 129.6 598 T
(.) 292.39 598 T
3 11 Q
(#This netlist describes a small circuit with two inputs) 108 574.67 T
(#and one output. There is only one clb block, which is) 108 561.67 T
(#a 3-input LUT that has one unconnected input.) 108 548.67 T
(#This netlist assumes that the architecture input \336le de\336nes) 108 535.67 T
(#a clb as a 3 LUT with its pins 0, 1, and 2 being its inputs and) 108 522.67 T
(#pin 3 being its output.) 108 509.67 T
(.input a) 108 483.67 T
(pinlist: a) 129.6 470.67 T
(#Blocks can have the same name as nets with no con\337ict.) 216 470.67 T
(.input bpad) 108 457.67 T
(pinlist: b) 129.6 444.67 T
(.clb and2) 108 431.67 T
(pinlist: a b open and2) 129.6 418.67 T
(.output out_and2) 108 405.67 T
(pinlist: and2) 129.6 392.67 T
1 14 Q
(Blif to Net Conversion) 108 346.67 T
0 12 Q
0.95 (The blifmap program can be used to convert either combinational or sequential blif) 129.6 320 P
(circuit netlists into .net format netlists. Its usage is:) 108 302 T
(blifmap) 129.6 272 T
2 F
(input.blif output.net) 169.91 272 T
0 F
( -lut_size) 264.87 272 T
2 F
(num_lut_inputs) 312.18 272 T
0 F
([-global]) 389.81 272 T
-0.15 (The -lut_size parameter is required -- specify the number of inputs to the LUT in your) 129.6 242 P
1.2 (logic block. If you do not want clock nets to be routed by VPR \050because, say) 108 224 P
1.2 (, a global) 493.3 224 P
0.76 (clock routing network will be used for clocks\051, you should specify the -global option on) 108 206 P
1.74 (the command line. All nets which feed into the clock inputs of \337ip \337ops will then be) 108 188 P
(marked as .global nets in the output netlist and will not be routed by VPR.) 108 170 T
0.38 (In the output netlist, blifmap lists the num_lut_inputs inputs to the clb \336rst, followed) 129.6 140 P
0.73 (by the clb output, followed by the clock input. Y) 108 122 P
0.73 (ou must therefore be sure to list the clb) 346.93 122 P
0.1 (pins in the architectural description input to VPR in the same order if you used blifmap to) 108 104 P
(generate the .net \336le. The clb structure assumed by blifmap is shown in Figure 1.) 108 86 T
FMENDPAGE
%%EndPage: "3" 4
%%Page: "4" 4
612 792 0 FMBEGINPAGE
108 54 540 54 2 L
0.25 H
2 Z
0 X
0 K
N
0 8 Q
(VPR User) 108 42.62 T
(\325) 140.94 42.62 T
(s Manual) 143.16 42.62 T
(June 10, 1996) 301.68 42.62 T
(4) 536 42.62 T
0 12 Q
(\324) 129.6 712 T
1 14 Q
(FPGA Ar) 108 539.5 T
(chitectur) 165.65 539.5 T
(e File \050.ar) 219.01 539.5 T
(ch\051 Format) 275.88 539.5 T
0 12 Q
0.02 (As in the .net \336le, a sharp \050#\051 denotes a comment to the end of line, while a backslash) 129.6 512.83 P
0.1 (\050\134\051 means that a line is continued on the next line. Each line in an architecture \336le consists) 108 494.83 P
2.47 (of a keyword followed by one or more parameters. In the description below) 108 476.83 P
2.47 (, strings) 499.55 476.83 P
0.41 (between curly braces, {}, denote all the possible choices for an option. All of the follow-) 108 458.83 P
(ing keywords must be speci\336ed in the architecture \336le.) 108 440.83 T
1 F
1.71 (io_rat integer:) 129.6 410.83 P
0 F
1.71 ( Sets the number of pads \050inputs or outputs\051 that \336t into the space) 204.92 410.83 P
(occupied by one clb. This is the number of pads in each row or column of the FPGA.) 108 392.83 T
1 F
0.88 (chan_width_io) 129.6 362.83 P
0.88 (\337oat:) 214.22 362.83 P
0 F
0.88 (Width of the channels between the pads and core relative to) 244.75 362.83 P
(the widest core channel.) 108 344.83 T
1 F
0.34 (chan_width_x {gaussian|uniform|pulse|delta} peak <width> <xpeak> <dc>) 129.6 314.83 P
4 F
0.83 (:) 511.25 314.83 P
0 F
0.34 (<>) 526.47 314.83 P
2.91 (bracketed quantities needed only for pulse, gaussian, and delta \050which doesn\325t need) 108 296.83 P
-0.02 (width\051. Most values are from 0 to 1. Sets the distribution of tracks for the x-directed chan-) 108 278.83 P
(nels -- the channels that run horizontally.) 108 260.83 T
0.72 (If uniform is specified, you simply specify one argument, peak. This value \050by con-) 129.6 230.83 P
0.56 (vention between 0 and 1\051 sets the width of the x-directed core channels relative to the y-) 108 212.83 P
0.57 (directed channels and the channels between the pads and core. Figure 2 should make the) 108 194.83 P
-0.28 (specification of uniform and pulse channel widths more clear. The gaussian keyword takes) 108 176.83 P
0.33 (the same four parameters as the pulse keyword, and they are all interpreted in exactly the) 108 158.83 P
108 63 540 720 C
114.75 572.83 533.25 708 C
177.75 614.83 240.75 677.83 R
7 X
0 K
V
0.5 H
2 Z
0 X
N
0 12 Q
(N - input) 192.1 660.83 T
(LUT) 202.09 646.83 T
166.21 672.14 177.75 668.83 166.21 665.53 166.21 668.83 4 Y
V
150.75 668.83 166.21 668.83 2 L
N
166.21 657.14 177.75 653.83 166.21 650.53 166.21 653.83 4 Y
V
150.75 653.83 166.21 653.83 2 L
N
166.21 642.14 177.75 638.83 166.21 635.53 166.21 638.83 4 Y
V
150.75 638.83 166.21 638.83 2 L
N
166.21 627.14 177.75 623.83 166.21 620.53 166.21 623.83 4 Y
V
150.75 623.83 166.21 623.83 2 L
N
240.75 650.83 303.75 650.83 2 L
N
276.75 650.83 276.75 695.83 411.75 695.83 411.75 659.83 429.75 659.83 5 L
N
303.75 605.83 357.75 659.83 R
N
(D Flip) 315.26 642.83 T
(Flop) 319.75 628.83 T
303.75 620.33 312.75 614.33 303.75 608.33 3 L
N
292.46 617.64 304 614.33 292.46 611.03 292.46 614.33 4 Y
V
292.46 614.33 279 614.33 2 L
N
250 604.33 278 620.33 R
7 X
V
0 X
(clock) 251.01 612.33 T
358.33 642.83 430 642.83 2 L
N
430.83 677 430.83 626.16 448.33 637 448.33 664.5 4 Y
N
459.3 652.81 470.83 649.5 459.3 646.19 459.3 649.5 4 Y
V
448.33 649.5 459.3 649.5 2 L
N
472.17 639.67 500.17 655.67 R
7 X
V
0 X
(Out) 477.17 647.67 T
139.17 578.33 417.5 593.33 R
7 X
V
1 F
0 X
(Figure 1: Clb structure assumed by blifmap.) 139.17 585.33 T
0 F
(Inputs) 120 654.85 T
108 63 540 720 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "4" 5
%%Page: "5" 5
612 792 0 FMBEGINPAGE
108 54 540 54 2 L
0.25 H
2 Z
0 X
0 K
N
0 8 Q
(VPR User) 108 42.62 T
(\325) 140.94 42.62 T
(s Manual) 143.16 42.62 T
(June 10, 1996) 301.68 42.62 T
(5) 536 42.62 T
0 12 Q
0.4 (same manner except that in the gaussian case width is the standard deviation of the func-) 108 712 P
(tion.) 108 694 T
1.57 (The delta function is used to specify a channel width distribution in which all the) 129.6 456.17 P
0.74 (channels have the same width except one. The syntax is chan_width_x delta peak xpeak) 108 438.17 P
-0.09 (dc. Peak is the extra width of the single wide channel. Xpeak is between 0 and 1 and spec-) 108 420.17 P
0.09 (ifies the location within the FPGA of the extra-wide channel -- it is the fractional distance) 108 402.17 P
0.64 (across the FPGA at which this extra-wide channel lies. Finally, dc specifies the width of) 108 384.17 P
1.2 (all the other channels. For example, the statement) 108 366.17 P
2 F
1.2 (chan_width_x delta 3 0.5 1) 358.77 366.17 P
0 F
1.2 ( specifies) 493.83 366.17 P
0.78 (that the horizontal channel in the middle of the FPGA is four times as wide as the other) 108 348.17 P
(channels.) 108 330.17 T
1 F
0.94 (chan_width_y [gaussian|uniform|pulse|delta] peak <width> <xpeak> <dc>) 129.6 300.17 P
0 F
0.94 (: Sets) 512.74 300.17 P
(the distribution of tracks for the y-directed channels.) 108 282.17 T
1 F
0.5 (outpin class: integer [top|bottom|left|right] [top|bottom|left|right] ...:) 129.6 252.17 P
0 F
0.5 (Declares an) 483.22 252.17 P
0.06 (output pin, determines the class to which this pin belongs, and sets the side\050s\051 of CLBs on) 108 234.17 P
0.38 (which the physical output pin connection\050s\051 is \050are\051. All pins with the same class number) 108 216.17 P
-0.22 (are logically equivalent -- such as all the inputs of a LUT. Class numbers must start at zero) 108 198.17 P
(and be consecutive.) 108 180.17 T
1 F
1.26 (inpin class: integer [top|bottom|left|right] [top|bottom|left|right]) 129.6 150.17 P
1.26 (...:) 463.87 150.17 P
0 F
1.26 ( All parame-) 476.86 150.17 P
(ters have the same meanings as their counterparts in the outpin statement.) 108 132.17 T
2 F
-0.11 (NOTE: The or) 129.6 102.17 P
-0.11 (der in which your inpin and outpin statements appear must be the same) 198.23 102.17 P
0.31 (as the or) 108 84.17 P
0.31 (der in which your netlist \050.net\051 \336le lists the connections to the clbs.) 150.16 84.17 P
0 F
0.31 (For example,) 476.39 84.17 P
108 63 540 720 C
110.08 482.17 537.92 690 C
502.63 538.64 514.17 535.33 502.63 532.02 502.63 535.33 4 Y
0 X
0 K
V
185.83 535.33 502.63 535.33 2 L
0.5 H
2 Z
N
183.36 667.96 186.67 679.5 189.98 667.96 186.67 667.96 4 Y
V
186.67 535.33 186.67 667.96 2 L
N
0 12 Q
(Fractional Distance across FPGA) 215 519.5 T
(Channel) 136.67 607 T
(W) 136.67 595 T
(idth) 147.51 595 T
(Relative) 136.67 618.66 T
(0.) 172.5 531.17 T
(1.) 173.33 657.83 T
186.67 600.33 498.33 600.33 2 L
N
(1.) 490.83 523.67 T
1 F
(uniform) 269.17 604.5 T
0 F
( 0.5) 311.14 604.5 T
187.5 571.16 245.83 571.16 245.83 647.83 379.17 647.83 379.17 572 497.5 572 6 L
N
1 F
(pulse) 289.17 652.83 T
0 F
(width) 288.33 634.5 T
367.63 641.14 379.17 637.83 367.63 634.53 367.63 637.83 4 Y
V
321.67 637.83 367.63 637.83 2 L
N
257.37 634.53 245.83 637.83 257.37 641.14 257.37 637.83 4 Y
V
283.33 637.83 257.37 637.83 2 L
N
389.19 635.46 392.5 647 395.81 635.46 392.5 635.46 4 Y
V
392.5 635.46 392.5 617.83 2 L
N
397.48 583.53 394.17 572 390.86 583.53 394.17 583.53 4 Y
V
394.17 583.53 394.17 605.33 2 L
N
(peak) 385 611.16 T
215.23 559.5 218.33 570.33 221.44 559.5 218.33 559.5 4 Y
V
218.33 559.5 218.33 559.5 2 L
N
221.64 546.87 218.33 535.33 215.03 546.87 218.33 546.87 4 Y
V
218.33 546.87 218.33 547.83 2 L
N
(dc) 210.83 551.16 T
326.14 648.59 314.16 647.83 323.91 654.83 325.02 651.71 4 Y
V
325.03 651.71 365.83 666.17 2 L
N
(xpeak is pulse midpoint) 376.67 663.67 T
130.83 492.17 427.5 506.33 R
7 X
V
1 F
0 X
(Figure 2: Specification of relative channel widths.) 130.83 498.33 T
108 63 540 720 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "5" 6
%%Page: "6" 6
612 792 0 FMBEGINPAGE
108 54 540 54 2 L
0.25 H
2 Z
0 X
0 K
N
0 8 Q
(VPR User) 108 42.62 T
(\325) 140.94 42.62 T
(s Manual) 143.16 42.62 T
(June 10, 1996) 301.68 42.62 T
(6) 536 42.62 T
0 12 Q
0.2 (if the first pin on each clb in the netlist file is the clock pin, your first pin statement in the) 108 712 P
(architecture file must be an inpin statement defining the clock pin.) 108 694 T
0.23 (Pads are always assumed to have only one pin \050either an input or an output\051, and this) 129.6 664 P
0.24 (pin is accessible from the one channel bordering that pad. Hence no inpin or outpin state-) 108 646 P
(ments are given for pads.) 108 628 T
0.04 (The listing below is for an FPGA with all channels of the same width, and a clb com-) 129.6 598 P
-0.05 (patible with that produced by blifmap. This clb contains a 4-input LUT and a flip flop; the) 108 580 P
-0.13 (input pins are listed first, followed by the clb output pin, followed by the clock pin. Notice) 108 562 P
-0.25 (that the four inputs all have the same pin class, indicating that they are logically equivalent) 108 544 P
-0.26 (and the router may connect nets to any one of them. Notice also that pins can be physically) 108 526 P
(accessible from several sides.) 108 508 T
3 11 Q
(# Uniform channel architecture, 4-input LUT and a FF per clb.) 108 454.67 T
(io_rat 2 #2 Pads per row or column.) 108 428.67 T
(chan_width_io 1 #Same as core channels.) 108 415.67 T
(chan_width_x uniform 1 #All same width) 108 402.67 T
(chan_width_y uniform 1) 108 389.67 T
(# 4-input LUT) 108 363.67 T
(. LUT inputs \336rst, then output, then clock.) 173.34 363.67 T
(inpin class: 0 bottom top #Physical pins at both top and bottom of clb.) 108 350.67 T
(inpin class: 0 left right) 108 337.67 T
(inpin class: 0 bottom top) 108 324.67 T
(inpin class: 0 left right) 108 311.67 T
(outpin class: 1 top bottom) 108 298.67 T
(inpin class: 2 bottom top) 108 285.67 T
(# Class 0 is LUT inputs, class 1 is the output, class 2 is the clock in this case.) 108 259.67 T
1 14 Q
(Placement File Format:) 108 226.67 T
0 12 Q
0.67 (The \336rst line of the placement \336le lists the netlist \050.net\051 and architecture \050.arch\051 \336les) 129.6 200 P
1.29 (used to create this placement. This information is used to ensure you can't accidentally) 108 182 P
(route this placement with a dif) 108 164 T
(ferent architecture or netlist \336le later) 254.02 164 T
(.) 428.88 164 T
(All the following lines have the format:) 129.6 134 T
(block_number    x        y      block_name   subblock_number) 129.6 104 T
FMENDPAGE
%%EndPage: "6" 7
%%Page: "7" 7
612 792 0 FMBEGINPAGE
108 54 540 54 2 L
0.25 H
2 Z
0 X
0 K
N
0 8 Q
(VPR User) 108 42.62 T
(\325) 140.94 42.62 T
(s Manual) 143.16 42.62 T
(June 10, 1996) 301.68 42.62 T
(7) 536 42.62 T
0 12 Q
0.12 (The block number is an index used internally to refer to the block \050clb or pad\051. X and) 129.6 712 P
-0.09 (y are the row and column in which the block is placed. The block name is the name of this) 108 694 P
1.52 (block, as given in the input netlist. The subblock number is meaningful only for pads.) 108 676 P
0.35 (Since we can have more than one pad in a row or column when io_rat is set to be greater) 108 658 P
0.09 (than 1 in the architecture \336le, the subblock number speci\336es which of the several possible) 108 640 P
0.68 (pad locations in row x and column y contains this pad. For clbs, the subblock number is) 108 622 P
(always zero.) 108 604 T
0.04 (Figure 3 shows the coordinate system used by VPR via a small 2 x 2 clb FPGA. VPR) 129.6 574 P
-0.12 (always places and routes a circuit into the smallest square FPGA that can accommodate it;) 108 556 P
0.56 (the number of clbs in the x and y directions are denoted by nx and ny) 108 538 P
0.56 (, respectively) 447.72 538 P
0.56 (. Clbs) 511.45 538 P
0.21 (all go in the area with x between 1 and nx and y between 1 and ny) 108 520 P
0.21 (. All pads either have x) 427.69 520 P
(equal to 0 or nx + 1 or y equal to 0 or ny + 1.) 108 502 T
(An example placement \336le is given below) 129.6 472 T
(.) 330.68 472 T
3 11 Q
(Netlist \336le: net/xor5.net   Architecture \336le: arch/uniform.arch) 108 448.67 T
(block) 108 435.67 T
(x) 180 435.67 T
( y) 216 435.67 T
(name) 252 435.67 T
(subblock) 288 435.67 T
108 63 540 720 C
123.01 63 524.99 423 C
130.01 67 383.34 82 R
7 X
0 K
V
1 12 Q
0 X
(Figure 3: Coordinate system used by VPR.) 130.01 74 T
163.05 182.1 217.48 236.53 R
7 X
V
0.5 H
2 Z
0 X
N
253.77 182.1 308.2 236.53 R
7 X
V
0 X
N
344.48 182.1 398.91 236.53 R
7 X
V
0 X
N
435.2 182.1 489.64 236.53 R
7 X
V
0 X
N
163.05 272.81 217.48 327.24 R
7 X
V
0 X
N
253.77 272.81 308.2 327.24 R
7 X
V
0 X
N
344.48 272.81 398.91 327.24 R
7 X
V
0 X
N
435.2 272.81 489.64 327.24 R
7 X
V
0 X
N
253.77 91.37 308.2 145.81 R
7 X
V
0 X
N
344.48 91.37 398.91 145.81 R
7 X
V
0 X
N
253.77 363.53 308.2 417.96 R
7 X
V
0 X
N
344.48 363.53 398.91 417.96 R
7 X
V
0 X
N
(Pad) 268.24 393.75 T
(\0501,3\051) 268.24 381.15 T
(Pad) 362.74 393.75 T
(\0502,3\051) 362.74 381.15 T
(Pad) 179.35 302.06 T
(\0500,2\051) 179.35 289.46 T
(Pad) 179.35 217.36 T
(\0500,1\051) 179.35 204.76 T
(Pad) 454.44 304.16 T
(\0503,2\051) 454.44 291.56 T
(Pad) 453.04 216.66 T
(\0503,1\051) 453.04 204.06 T
(Pad) 268.94 121.46 T
(\0501,0\051) 268.94 108.86 T
(Pad) 360.64 121.46 T
(\0502,0\051) 360.64 108.86 T
(Clb) 269.64 300.66 T
(\0501,2\051) 269.64 288.06 T
(Clb) 359.94 301.36 T
(\0502,2\051) 359.94 288.76 T
(Clb) 267.54 211.06 T
(\0501,1\051) 267.54 198.46 T
(Clb) 362.04 214.56 T
(\0502,1\051) 362.04 201.96 T
(Chanx) 259.85 164.86 T
(\0501,0\051) 265.45 153.66 T
(Chanx) 355.74 166.26 T
(\0502,0\051) 355.74 153.66 T
(Chanx) 258.45 260.06 T
(\0501,1\051) 258.45 247.46 T
(Chanx) 356.44 257.96 T
(\0502,1\051) 356.44 245.36 T
(Chanx) 259.85 347.55 T
(\0501,2\051) 259.85 334.95 T
(Chanx) 352.94 346.85 T
(\0502,2\051) 352.94 334.26 T
(Chany) 217.15 304.16 T
(\0500,2\051) 224.85 289.46 T
(Chany) 217.85 214.56 T
(\0500,1\051) 222.75 201.26 T
(Chany) 309.54 212.46 T
(\0501,1\051) 315.14 199.86 T
(Chany) 309.54 302.76 T
(\0501,2\051) 315.14 288.76 T
(Chany) 400.54 305.56 T
(\0502,2\051) 406.14 292.96 T
(Chany) 399.84 215.26 T
(\0502,1\051) 405.44 202.66 T
108 63 540 720 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "7" 8
%%Page: "8" 8
612 792 0 FMBEGINPAGE
108 54 540 54 2 L
0.25 H
2 Z
0 X
0 K
N
0 8 Q
(VPR User) 108 42.62 T
(\325) 140.94 42.62 T
(s Manual) 143.16 42.62 T
(June 10, 1996) 301.68 42.62 T
(8) 536 42.62 T
3 11 Q
(0) 108 712.67 T
(0) 180 712.67 T
(1) 216 712.67 T
(a) 252 712.67 T
(0) 288 712.67 T
(1) 108 699.67 T
(1) 180 699.67 T
(0) 216 699.67 T
(b) 252 699.67 T
(0) 288 699.67 T
(2) 108 686.67 T
(0) 180 686.67 T
(2) 216 686.67 T
(c) 252 686.67 T
(1) 288 686.67 T
(3) 108 673.67 T
(1) 180 673.67 T
(3) 216 673.67 T
(d) 252 673.67 T
(0) 288 673.67 T
(4) 108 660.67 T
(1) 180 660.67 T
(3) 216 660.67 T
(e) 252 660.67 T
(1) 288 660.67 T
(5) 108 647.67 T
(0) 180 647.67 T
(2) 216 647.67 T
(out:xor5 0) 252 647.67 T
(6) 108 634.67 T
(1) 180 634.67 T
(2) 216 634.67 T
(xor5) 252 634.67 T
(0) 288 634.67 T
(7) 108 621.67 T
(1) 180 621.67 T
(1) 216 621.67 T
([1]) 252 621.67 T
(0) 288 621.67 T
1 14 Q
( Routing File Format) 108 575.67 T
0 12 Q
0.33 (The routing \336le lists the global routing for each net, one by one. Each routing begins) 129.6 549 P
1 (with the word net, followed by the net index used internally by VPR to identify the net) 108 531 P
-0.1 (and, in brackets, the name of the net given in the netlist \336le. The following lines de\336ne the) 108 513 P
0.71 (routing of the net. Each begins with a keyword that identi\336es a type of routing segment.) 108 495 P
2.3 (The possible keywords are OPIN \050output pin\051, IPIN \050input pin\051, CHANX \050horizontal) 108 477 P
-0.17 (channel\051, and CHANY \050vertical channel\051. Each routing begins on an OPIN and ends on an) 108 459 P
0.23 (IPIN. In brackets after the keyword is the x, y location of this routing resource. Finally) 108 441 P
0.23 (, if) 526.44 441 P
-0.23 (the keyword was IPIN or OPIN, the pin number is listed. In the case of a clb, this is simply) 108 423 P
0.16 (the number of the IPIN or OPIN, as de\336ned in the architecture input \336le. If we are attach-) 108 405 P
-0.29 (ing to a pad, however) 108 387 P
-0.29 (, the pin number is in fact the subblock number de\336ning to which pad) 209.96 387 P
-0.27 (at location \050x, y\051 we are attached. See Figure 3 for a diagram of the coordinate system used) 108 369 P
(by VPR.) 108 351 T
-0.17 (For an N-pin net, we need N-1 distinct wiring \322paths\323 to connect all the pins. The \336rst) 129.6 321 P
0.11 (wiring path will always go from an OPIN to an IPIN. The routing segment listed immedi-) 108 303 P
1.66 (ately after the IPIN is the part of the existing routing to which the new path attaches.) 108 285 P
0.2 (Therefore it can be of type OPIN, CHANX, or CHANY) 108 267 P
0.2 (.) 377.08 267 P
2 F
0.2 (It is important to r) 383.29 267 P
0.2 (ealize that the) 472.29 267 P
0.13 (\336rst pin after an IPIN is the connection into the alr) 108 249 P
0.13 (eady speci\336ed r) 353.38 249 P
0.13 (outing tr) 428.47 249 P
0.13 (ee; when com-) 469.81 249 P
0.54 (puting r) 108 231 P
0.54 (outing statistics be sur) 146.42 231 P
0.54 (e that you do not count the same segment several times by) 255.89 231 P
(ignoring this fact.) 108 213 T
0 F
(An example routing for one net is listed below) 196.63 213 T
(.) 419.04 213 T
3 11 Q
(Net 0 \050a\051) 108 189.67 T
( OPIN \0500,1\051    Pin number: 0) 108 176.67 T
(CHANY \0500,1\051) 108 163.67 T
(CHANY \0500,2\051) 108 150.67 T
( IPIN \0501,2\051      Pin number: 3) 108 137.67 T
(CHANY \0500,1\051                   # NOTE: Connection to existing routing!) 108 124.67 T
(CHANX \0501,1\051) 108 111.67 T
(CHANX \0502,1\051) 108 98.67 T
( IPIN \0502,1\051  Pin number: 1) 108 85.67 T
FMENDPAGE
%%EndPage: "8" 9
%%Page: "9" 9
612 792 0 FMBEGINPAGE
108 54 540 54 2 L
0.25 H
2 Z
0 X
0 K
N
0 8 Q
(VPR User) 108 42.62 T
(\325) 140.94 42.62 T
(s Manual) 143.16 42.62 T
(June 10, 1996) 301.68 42.62 T
(9) 536 42.62 T
0 12 Q
1.95 (Nets which are speci\336ed to be global in the netlist \336le \050generally clocks\051 are not) 129.6 712 P
0.22 (routed. Instead, a list of the blocks \050name and internal index\051 which this net must connect) 108 694 P
0.85 (is printed out. The location of each block and the class of the pin to which the net must) 108 676 P
-0.23 (connect at each block is also printed. For clbs, the class is simply whatever class was spec-) 108 658 P
-0.26 (i\336ed for that pin in the architecture input \336le. For pads the pinclass is always -1; since pads) 108 640 P
0.07 (do not have logically-equivalent pins, pin classes are not needed. An example listing for a) 108 622 P
(global net is given below) 108 604 T
(.) 227.81 604 T
3 11 Q
(Net 146 \050pclk\051: global net connecting:) 108 580.67 T
(Block pclk \050#146\051 at \0501, 0\051, pinclass -1.) 108 567.67 T
(Block pksi_17_ \050#431\051 at \0503, 26\051, pinclass 2.) 108 554.67 T
(Block pksi_185_ \050#432\051 at \0505, 48\051, pinclass 2.) 108 541.67 T
(Block n_n2879 \050#433\051 at \05049, 23\051, pinclass 2.) 108 528.67 T
1 16 Q
(VPR options) 108 488.33 T
0 12 Q
(Run VPR with no parameters to get a list of all the available options.) 129.6 461 T
0.27 (VPR has a lot of options. In general, the defaults are \336ne, and only people looking at) 129.6 431 P
0.49 (how dif) 108 413 P
0.49 (ferent CAD algorithms perform will try many of them. If you wish to understand) 145.25 413 P
-0.07 (what the more esoteric placer and router options actually do, contact the author to obtain a) 108 395 P
-0.21 (copy of a technical report which contains some information on the algorithms contained in) 108 377 P
(VPR.) 108 359 T
1 14 Q
(General Options) 108 321.67 T
1 12 Q
1.94 (-nodisp) 129.6 295 P
0 F
1.94 (: Disables all graphics. Useful if you're not running X W) 167.6 295 P
1.94 (indows. Default:) 458.11 295 P
(graphics enabled.) 108 277 T
1 F
0.43 (-auto integer) 129.6 247 P
0 F
0.43 (: Can be 0, 1, or 2. This sets how often you must click Proceed to con-) 195.65 247 P
0.46 (tinue execution after viewing the graphics. The higher the number) 108 229 P
0.46 (, the more infrequently) 428.71 229 P
(the program will pause. Default: 1.) 108 211 T
1 F
1.95 (-r) 129.6 181 P
1.95 (oute_only) 138.7 181 P
0 F
1.95 (: T) 188.68 181 P
1.95 (ake an existing placement from the placement \336le speci\336ed on the) 203.45 181 P
(command line and route it. Default: of) 108 163 T
(f.) 291.99 163 T
1 F
(-place_only) 129.6 133 T
0 F
(: Place the circuit, but do not route it. Default: of) 188.24 133 T
(f.) 421.87 133 T
1 F
0.22 (-aspect_ratio \337oat:) 129.6 103 P
0 F
0.22 (Speci\336es the aspect ratio \050number of columns / number of rows\051) 229.31 103 P
(of an FPGA. Default 1 \050square FPGA\051.) 108 85 T
FMENDPAGE
%%EndPage: "9" 10
%%Page: "10" 10
612 792 0 FMBEGINPAGE
108 54 540 54 2 L
0.25 H
2 Z
0 X
0 K
N
0 8 Q
(VPR User) 108 42.62 T
(\325) 140.94 42.62 T
(s Manual) 143.16 42.62 T
(June 10, 1996) 301.68 42.62 T
(10) 532 42.62 T
1 12 Q
0.83 (-nx integer:) 129.6 712 P
0 F
0.83 (Number of columns in the FPGA logic array) 193.87 712 P
0.83 (. Default: set to minimum) 413.08 712 P
(required to \336t circuit.) 108 694 T
1 F
2.16 (-ny integer:) 129.6 664 P
0 F
2.16 (Number of rows in the FPGA logic array) 196.54 664 P
2.16 (. Default: set to minimum) 407.75 664 P
(required to \336t circuit.) 108 646 T
1 F
0.69 (-full_stats:) 129.6 616 P
0 F
0.69 (Print out some extra statistics about the circuit and its routing useful for) 187.92 616 P
(wireability analysis. Default: of) 108 598 T
(f.) 259.68 598 T
1 14 Q
(Placer Options) 108 560.67 T
0 12 Q
0.39 (By default, the automatic annealing schedule is used. This schedule gathers statistics) 129.6 534 P
0.72 (as the placement progresses, and uses them to determine how to update the temperature,) 108 516 P
-0.13 (when to exit, etc. This schedule is generally superior to any user) 108 498 P
-0.13 (-speci\336ed schedule. If any) 414.48 498 P
0.5 (of init_t, exit_t or alpha_t is speci\336ed, the user schedule, with a \336xed initial temperature,) 108 480 P
(\336nal temperature and temperature update factor is used.) 108 462 T
1 F
(-seed integer) 129.6 432 T
0 F
(: Sets the initial random seed used by the placer) 194.54 432 T
(. Default: 1.) 422.73 432 T
1 F
0.28 (-inner_num integer) 129.6 402 P
0 F
0.28 (: The number of moves attempted at each temperature is inner_-) 229.48 402 P
0.17 (num times the total number of blocks) 108 384 P
0 10 Q
0.14 (4/3) 288.23 388.8 P
0 12 Q
0.17 ( in the circuit. N.B. the number of blocks in a cir-) 301 384 P
(cuit is the number of pads plus the number of clbs. Default: 10.) 108 366 T
1 F
0.61 (-init_t \337oat) 129.6 336 P
0 F
0.61 (: The starting temperature of the anneal for the manual annealing sched-) 187.18 336 P
(ule. Default: 100.) 108 318 T
1 F
0.7 (-exit_t \337oat) 129.6 288 P
0 F
0.7 (: The \050manual\051 anneal will terminate when the temperature drops below) 188.59 288 P
(the exit temperature. Default: 0.01.) 108 270 T
1 F
1.79 (-alpha_t \337oat) 129.6 240 P
0 F
1.79 (: The temperature is updated by multiplying the old temperature by) 199.69 240 P
(alpha_t when the manual annealing schedule is enabled. Default: 0.8.) 108 222 T
1 F
2.18 (-\336xed_pins:) 129.6 192 P
0 F
2.18 (Do not allow the placer to move the I/O locations about during the) 194.75 192 P
0.23 (anneal. Instead, lock each I/O location to a random pad at the start of the anneal to model) 108 174 P
(the ef) 108 156 T
(fect of poor board-level I/O constraints. Default: of) 134.76 156 T
(f.) 380.35 156 T
1 F
0.05 (-place_cost_type [linear|nonlinear]:) 129.6 126 P
0 F
0.05 (Select the placement cost function. For FPGAs) 314.21 126 P
0.49 (in which all channels have the same width the linear cost function reduces to a bounding) 108 108 P
1.66 (box wirelength cost function. The nonlinear cost function, on the other hand, consider) 108 90 P
(both wirelength and congestion during placement. Default: linear) 108 72 T
(.) 420.45 72 T
FMENDPAGE
%%EndPage: "10" 11
%%Page: "11" 11
612 792 0 FMBEGINPAGE
108 54 540 54 2 L
0.25 H
2 Z
0 X
0 K
N
0 8 Q
(VPR User) 108 42.62 T
(\325) 140.94 42.62 T
(s Manual) 143.16 42.62 T
(June 10, 1996) 301.68 42.62 T
(1) 532.3 42.62 T
(1) 536 42.62 T
1 12 Q
1.06 (-place_cost_exp \337oat:) 129.6 712 P
0 F
1.06 (Only relevant for FPGAs in which the channel width varies) 244.98 712 P
0.05 (from channel to channel. Sets the exponent \050) 108 694 P
5 F
0.05 (a) 322.19 694 P
0 F
0.05 (\051 used in the linear cost function to penalize) 329.76 694 P
(routing in narrow channels. Default: 1.) 108 676 T
1 F
-0.28 (-place_chan_width integer:) 129.6 646 P
0 F
-0.28 (Can be used with the nonlinear cost function to tell VPR) 271.62 646 P
0.35 (how many tracks a channel of relative width 1 is expected to need to complete routing of) 108 628 P
0.62 (this circuit. VPR will then place the circuit only once, and repeatedly try routing the cir-) 108 610 P
-0.14 (cuit as usual. If place_chan_width is not speci\336ed and the nonlinear cost is used, VPR will) 108 592 P
0.35 (replace and reroute the circuit for each channel width at which it attempts to map the cir-) 108 574 P
(cuit.) 108 556 T
1 F
0.81 (-num_r) 129.6 526 P
0.81 (egions:) 168.03 526 P
0 F
0.81 (Used only with the nonlinear cost function. VPR will compute con-) 207.81 526 P
1.35 (gestion on an array of num_regions X num_regions subareas. Lar) 108 508 P
1.35 (ge values of num_re-) 434.36 508 P
(gions greatly slow the placer) 108 490 T
(. Default: 4.) 245.24 490 T
1 14 Q
(Router Options) 108 452.67 T
1 12 Q
1.25 (-max_block_update integer) 129.6 426 P
0 F
1.25 (: The number of iterations of a \322path\336nder) 271.1 426 P
1.25 (-like\323 maze) 483.14 426 P
0.9 (routing algorithm, where a portion of the cost of routing resources is updated only once) 108 408 P
(every net has been rerouted.   Default: 15.) 108 390 T
1 F
3 (-block_update_type [block|mixed|path\336nder]:) 129.6 360 P
0 F
3 (Sets the cost updating algorithm) 373.42 360 P
0.86 (used by the \322block update\323 iterations of the router) 108 342 P
0.86 (. The path\336nder scheme is superior to) 354 342 P
(the other two and should always be used. Default: path\336nder) 108 324 T
(.) 398.47 324 T
1 F
0.04 (-max_immediate_update integer) 129.6 294 P
0 F
0.04 (: The number of iterations of a conventional rip-up) 295.86 294 P
1.21 (and reroute maze routing algorithm, where the cost of each routing resource is updated) 108 276 P
-0.26 (after each net is routed. These iterations are done after the block update iterations. Default:) 108 258 P
(0.) 108 240 T
1 F
1.25 (-initial_cost_type {div|sub|none}) 129.6 210 P
0 F
1.25 (: Speci\336es if an initial routing is to be performed) 295.19 210 P
-0.26 (using the expected occupancies of the channels, as computed from the placement, to deter-) 108 192 P
0.08 (mine routing resource cost. Div: overused channels are penalized by the term occupancy /) 108 174 P
0.88 (capacity) 108 156 P
0.88 (. Sub: overused channels are penalized by the term occupancy - capacity) 147.18 156 P
0.88 (. None:) 503.81 156 P
(no initial routing based on expected occupancy is performed. Default: none.) 108 138 T
1 F
0.87 (-initial_pr) 129.6 108 P
0.87 (es_fac \337oat) 181.36 108 P
0 F
0.87 (: Sets the starting value of the present overuse penalty factor) 239.19 108 P
0.87 (.) 537 108 P
(Default: 0.5.) 108 90 T
FMENDPAGE
%%EndPage: "11" 12
%%Page: "12" 12
612 792 0 FMBEGINPAGE
108 54 540 54 2 L
0.25 H
2 Z
0 X
0 K
N
0 8 Q
(VPR User) 108 42.62 T
(\325) 140.94 42.62 T
(s Manual) 143.16 42.62 T
(June 10, 1996) 301.68 42.62 T
(12) 532 42.62 T
1 12 Q
1.32 (-pr) 129.6 712 P
1.32 (es_fac_mult \337oat) 145.37 712 P
0 F
1.32 (: Sets the growth factor by which the present overuse penalty) 233.64 712 P
(factor is multiplied after each router iteration. Default: 1.5.) 108 694 T
1 F
1.68 (-acc_fac_mult \337oat) 129.6 664 P
0 F
1.68 (: Speci\336es the accumulated overuse factor) 228.87 664 P
1.68 (, as a portion of the) 438.98 664 P
0.72 (present overuse factor) 108 646 P
0.72 (. Used only by the path\336nder) 214.69 646 P
0.72 (-like block-update iterations. Default:) 357.3 646 P
(0.2.) 108 628 T
1 F
0.08 (-bb_factor integer) 129.6 598 P
0 F
0.08 (: Sets the distance \050in channels\051 outside of the bounding box of its) 222.6 598 P
1.92 (pins a route can go. Lar) 108 580 P
1.92 (ger numbers slow the router somewhat, but allow for a more) 230.64 580 P
(exhaustive search of possible routes. Default: 3.) 108 562 T
1 F
0.61 (-bend_cost \337oat) 129.6 532 P
0 F
0.61 (: The cost of a bend. Lar) 211.17 532 P
0.61 (ger numbers will lead to routes with fewer) 332.2 532 P
0.31 (bends, at the cost of some increase in track count. Routes with fewer bends will be easier) 108 514 P
(to detail route onto segmented architectures. Default: 1.) 108 496 T
1 16 Q
(Graphics) 108 451.33 T
0 12 Q
0.98 (The graphics included in VPR are very easy to use. Click any mouse button on the) 129.6 424 P
-0.26 (arrow keys to pan the view) 108 406 P
-0.26 (, or click on the Zoom-In and Zoom-Out keys to zoom the view) 235.47 406 P
-0.26 (.) 537 406 P
0.09 (Click on the W) 108 388 P
0.09 (indow button, then on the diagonally opposite corners of a box, to zoom in) 180.74 388 P
0.05 (on a particular area. Selecting PostScript creates a PostScript \336le \050in pic1.ps, pic2.ps, etc.\051) 108 370 P
0.46 (of the image on screen. T) 108 352 P
0.46 (oggle Nets toggles the nets in the circuit visible/invisible. Click) 231.36 352 P
0.02 (on any clb in the display) 108 334 P
0.02 (, and it will be highlighted in green, while its fanin and fanout are) 224.93 334 P
0.6 (highlighted in blue and red, respectively) 108 316 P
0.6 (. Finally) 303.43 316 P
0.6 (, Proceed tells VPR to continue with the) 343.24 316 P
0.22 (next step in placing and routing the circuit, while Exit aborts the program. The menu but-) 108 298 P
0.29 (tons will be greyed out to show they are not selectable when VPR is working, rather than) 108 280 P
(interactively displaying graphics.) 108 262 T
1 16 Q
(Debugging Aids) 108 217.33 T
0 12 Q
-0.17 (After parsing the netlist and architecture \336les, VPR dumps out an image of its internal) 129.6 190 P
1.14 (data structures into net.echo and arch.echo. These \336les can be examined to be sure that) 108 172 P
-0 (VPR is parsing the input \336les as you expect. If the preprocessor \337ag DEBUG is de\336ned in) 108 154 P
0.23 (pr) 108 136 P
0.23 (.h, some additional sanity checks are performed during a run. I normally leave DEBUG) 117.33 136 P
0.05 (on all the time, as it only slows execution by 1 to 2%. The major sanity checks are always) 108 118 P
1.18 (enabled, regardless of the state of DEBUG. Finally) 108 100 P
1.18 (, if VERBOSE is set in pr) 360.31 100 P
1.18 (.h, a great) 490.35 100 P
FMENDPAGE
%%EndPage: "12" 13
%%Page: "13" 13
612 792 0 FMBEGINPAGE
108 54 540 54 2 L
0.25 H
2 Z
0 X
0 K
N
0 8 Q
(VPR User) 108 42.62 T
(\325) 140.94 42.62 T
(s Manual) 143.16 42.62 T
(June 10, 1996) 301.68 42.62 T
(13) 532 42.62 T
0 12 Q
-0.12 (deal of intermediate data will be printed to the screen as VPR runs. If you set verbose, you) 108 712 P
(may want to redirect screen output to a \336le.) 108 694 T
-0.11 (The initial and \336nal placement costs provide useful numbers for regression testing the) 129.6 664 P
0.02 (netlist parsers and the placer) 108 646 P
0.02 (, respectively) 244.15 646 P
0.02 (. I generate and print out a routing serial number) 307.34 646 P
(to allow easy regression testing of the router) 108 628 T
(.) 320.19 628 T
FMENDPAGE
%%EndPage: "13" 14
%%Trailer
%%BoundingBox: 0 0 612 792
%%Pages: 13 1
%%DocumentFonts: Times-Roman
%%+ Times-Bold
%%+ Times-Italic
%%+ Helvetica
%%+ Courier
%%+ Symbol
